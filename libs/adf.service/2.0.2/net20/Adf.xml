<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Adf</name>
    </assembly>
    <members>
        <member name="T:Adf.DataSerializable">
            <summary>
            数据序列化助手
            </summary>
            <remarks>本类默认支持系统原生数据类型,数组，自定义实体类对象 </remarks>
        </member>
        <member name="T:Adf.IBinarySerializable">
            <summary>
            可序列化标记接口
            </summary>
        </member>
        <member name="M:Adf.IBinarySerializable.Serialize(System.Object)">
            <summary>
            序例化
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.IBinarySerializable.Deserialize(System.Type,System.Byte[])">
            <summary>
            返序例化
            </summary>
            <param name="type"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_BOOLEAN">
            <summary>
            BYTE LENGTH FOR BOOLEAN
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_BYTE">
            <summary>
            BYTE LENGTH FOR BYTE
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_SBYTE">
            <summary>
            BYTE LENGTH FOR SBYTE
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_CHAR">
            <summary>
            BYTE LENGTH FOR INT16
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_INT16">
            <summary>
            BYTE LENGTH FOR
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_UINT16">
            <summary>
            BYTE LENGTH FOR UINT16
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_INT32">
            <summary>
            BYTE LENGTH FOR INT32
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_UINT32">
            <summary>
            BYTE LENGTH FOR UINT32
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_SINGLE">
            <summary>
            BYTE LENGTH FOR SINGLE
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_DATETIME">
            <summary>
            BYTE LENGTH FOR DATETIME
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_DOUBLE">
            <summary>
            BYTE LENGTH FOR DOUBLE
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_INT64">
            <summary>
            BYTE LENGTH FOR INT64
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_UINT64">
            <summary>
            BYTE LENGTH FOR UINT64
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.SIZE_DECIMAL">
            <summary>
            BYTE LENGTH FOR DECIMAL
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_BOOLEAN">
            <summary>
            TYPE  FOR BOOLEAN
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_BYTE">
            <summary>
            TYPE  FOR BYTE
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_SBYTE">
            <summary>
            TYPE  FOR SBYTE
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_CHAR">
            <summary>
            TYPE  FOR INT16
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_INT16">
            <summary>
            TYPE  FOR
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_UINT16">
            <summary>
            TYPE  FOR UINT16
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_INT32">
            <summary>
            TYPE  FOR INT32
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_UINT32">
            <summary>
            TYPE  FOR UINT32
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_SINGLE">
            <summary>
            TYPE  FOR SINGLE
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_STRING">
            <summary>
            TYPE  FOR STRING
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_DATETIME">
            <summary>
            TYPE  FOR DATETIME
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_DOUBLE">
            <summary>
            TYPE  FOR DOUBLE
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_INT64">
            <summary>
            TYPE  FOR INT64
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_UINT64">
            <summary>
            TYPE  FOR UINT64
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.TYPE_DECIMAL">
            <summary>
            TYPE  FOR DECIMAL
            </summary>
        </member>
        <member name="F:Adf.DataSerializable.DefaultInstance">
            <summary>
            获取默认实例对象
            </summary>
        </member>
        <member name="M:Adf.DataSerializable.Serialize(System.Object)">
            <summary>
            序列化数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.DataSerializable.SerializeArray(System.Object)">
            <summary>
            SerializeArray
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.DataSerializable.Deserialize(System.Type,System.Byte[])">
            <summary>
            返回指定类型的数据
            </summary>
            <param name="type"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.DataSerializable.DeserializeArray(System.Type,System.Byte[])">
            <summary>
            解析指定类型数组对象
            </summary>
            <param name="type"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.DataSerializable.DeserializeObject(System.Type,System.Byte[])">
            <summary>
            将流字节数组序列化为指定类型
            </summary>
            <param name="type"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.DataSerializable.SerializeObject(System.Object)">
            <summary>
            将对象序列化成字节数组
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.RedisSortedSets">
            <summary>
            Redis 有序集合
            </summary>
        </member>
        <member name="M:Adf.RedisSortedSets.ZAdd(System.String,System.Double,System.String)">
            <summary>
            添加一个元素
            </summary>
            <param name="key"></param>
            <param name="score"></param>
            <param name="member"></param>
            <returns>排序</returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZCARD(System.String)">
            <summary>
            返回集合数
            key存在的时候，返回有序集的元素个数，否则返回0。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZCOUNT(System.String,System.Double,System.Double)">
            <summary>
            指定分数范围的元素个数
            </summary>
            <param name="key"></param>
            <param name="max"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZINCRBY(System.String,System.Double,System.String)">
            <summary>
            给指定元素添加自增值
            </summary>
            <param name="key"></param>
            <param name="increment"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZUNIONSTORE(System.String,System.Collections.Generic.IDictionary{System.String,System.Double},Adf.RedisAggregate)">
            <summary>
            计算给定的一个或多个有序集的并集，其中给定 key 的数量必须以 numkeys 参数指定，并将该并集(结果集)储存到 destination 。
            默认情况下，结果集中某个成员的 score 值是所有给定集下该成员 score 值之 和 。
            </summary>
            <param name="destinationKey">目标键</param>
            <param name="keyWeights">键与乘法因子</param>
            <param name="aggregate">聚合方式</param>
            <returns>保存到 destination 的结果集的基数</returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZINTERSTORE(System.String,System.Collections.Generic.IDictionary{System.String,System.Double},Adf.RedisAggregate)">
            <summary>
            计算给定的一个或多个有序集的交集，其中给定 key 的数量必须以 numkeys 参数指定，并将该交集(结果集)储存到 destination 。
            默认情况下，结果集中某个成员的 score 值是所有给定集下该成员 score 值之和.
            关于 WEIGHTS 和 AGGREGATE 选项的描述，参见 ZUNIONSTORE 命令
            </summary>
            <param name="destinationKey">目标键</param>
            <param name="keyWeights">键与乘法因子</param>
            <param name="aggregate">聚合方式</param>
            <returns>保存到 destination 的结果集的基数</returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZRANGEValues(System.String,System.Double,System.Double)">
            <summary>
            返回给定的分值范围元素内容列表
            </summary>
            <param name="key"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZRANGE(System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            返回给定的分值范围元素内容列表
            </summary>
            <param name="key"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <param name="withscores"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZRANGEByte(System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            返回给定的分值范围元素列表
            </summary>
            <param name="key"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <param name="withscores">是否返回分值</param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZRANGEBYSCOREValues(System.String,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            返回给定的分值范围元素列表
            </summary>
            <param name="key"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="offset">取出偏移量,需设置count有效</param>
            <param name="count">设置数量则offset有产效</param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZRANGEBYSCORE(System.String,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            返回给定的分值范围元素列表
            </summary>
            <param name="key"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="offset">取出偏移量,需设置count有效</param>
            <param name="count">设置数量则offset有产效</param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZRANK(System.String,System.String)">
            <summary>
            获取元素排名
            </summary>
            <param name="key"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZREM(System.String,System.String)">
            <summary>
            删除元素
            </summary>
            <param name="key"></param>
            <param name="member"></param>
            <returns>返回的是从有序集合中删除的成员个数，不包括不存在的成员。</returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZREM(System.String,System.String[])">
            <summary>
            删除元素
            </summary>
            <param name="key"></param>
            <param name="members"></param>
            <returns>返回的是从有序集合中删除的成员个数，不包括不存在的成员。</returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZREMRANGEBYRANK(System.String,System.Double,System.Double)">
            <summary>
            删除一个范围元素
            </summary>
            <param name="key"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZREMRANGEBYSCORE(System.String,System.Double,System.Double)">
            <summary>
            删除一个积分范围元素
            </summary>
            <param name="key"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZREVRANGEValues(System.String,System.Int32,System.Int32)">
            <summary>
            返回给定的区间元素列表
            </summary>
            <param name="key"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZREVRANGE(System.String,System.Int32,System.Int32)">
            <summary>
            返回给定的区间元素列表
            </summary>
            <param name="key"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZREVRANGEByte(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            返回给定的区间元素列表
            </summary>
            <param name="key"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <param name="withscores">是否返回分值</param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZREVRANGEBYSCOREValues(System.String,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            返回有序集 key 中， score 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。有序集成员按 score 值递减(从大到小)的次序排列。
            具有相同 score 值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按 score 值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <param name="key"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="count">设置数量则offset有产效</param>
            <param name="offset">取出偏移量,需设置count有效</param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZREVRANGEBYSCORE(System.String,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            返回有序集 key 中， score 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。有序集成员按 score 值递减(从大到小)的次序排列。
            具有相同 score 值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按 score 值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <param name="key"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="count">设置数量则offset有产效</param>
            <param name="offset">取出偏移量,需设置count有效</param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZREVRANGEBYSCOREByte(System.String,System.Double,System.Double,System.Boolean,System.Int32,System.Int32)">
            <summary>
            返回有序集 key 中， score 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。有序集成员按 score 值递减(从大到小)的次序排列。
            具有相同 score 值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按 score 值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <param name="key"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="withscores">是否返回分值</param>
            <param name="count">设置数量则offset有产效</param>
            <param name="offset">取出偏移量,需设置count有效</param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZREVRANK(System.String,System.String)">
            <summary>
            返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递减(从大到小)排序。
            排名以 0 为底，也就是说， score 值最大的成员排名为 0 。
            使用 ZRANK 命令可以获得成员按 score 值递增(从小到大)排列的排名。
            </summary>
            <param name="key"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSortedSets.ZSCORE(System.String,System.String)">
            <summary>
            返回有序集 key 中，成员 member 的 score 值。如果 member 元素不是有序集 key 的成员，或 key 不存在，返回 nil 。
            </summary>
            <param name="key"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.MqException">
            <summary>
            TaskQueue Exception
            </summary>
        </member>
        <member name="M:Adf.MqException.#ctor(System.String)">
            <summary>
            初始新实例
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Adf.LogExceptionEventArgs">
            <summary>
            记录异常事件数据
            </summary>
        </member>
        <member name="M:Adf.LogExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:Adf.LogExceptionEventArgs.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:Adf.WebSocketHandshake">
            <summary>
            WebSocket 握手处理
            </summary>
        </member>
        <member name="F:Adf.WebSocketHandshake.MagicKEY">
            <summary>
            Magic KEY
            </summary>
        </member>
        <member name="M:Adf.WebSocketHandshake.HandshakeSecurityHash09(System.String)">
            <summary>
            加密
            </summary>
            <param name="secWebSocketKey"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.ValidateHelper">
            <summary>
            校验助手
            </summary>
        </member>
        <member name="M:Adf.ValidateHelper.IsNull(System.Object)">
            <summary>
            判断对象是否为空
            </summary>
            <param name="obj">object类型</param>
            <returns>bool类型</returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsDBNull(System.Object)">
            <summary>
            判断对象是否为数据空对象
            </summary>
            <param name="obj">object类型</param>
            <returns>bool类型</returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsNullOrDBNull(System.Object)">
            <summary>
            判断是否为数据空对象或空对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsEmail(System.String)">
            <summary>
            是否为邮箱
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.HasEmail(System.String)">
            <summary>
            是否包含邮箱
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsInt32(System.String)">
            <summary>
            是否为Int32字符
            </summary>
            <param name="source">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsInt64(System.String)">
            <summary>
            是否为Int64字符
            </summary>
            <param name="source">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsDateTime(System.String)">
            <summary>
            是否为时间
            </summary>
            <param name="source">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsMobileOfChina(System.String)">
            <summary>
            是否为中国手机号
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsIPv4(System.String)">
            <summary>
            是否为IPV4 IP
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.HasIPv4(System.String)">
            <summary>
            是否含 有Ipv4 IP
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsIPv6(System.String,System.Boolean)">
            <summary>
            是否为IPV6 IP
            </summary>
            <param name="source"></param>
            <param name="hasIPv4"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.HasIPv6(System.String)">
            <summary>
            是否含 有Ipv6 IP
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsIP(System.String)">
            <summary>
            是否为IPV4 或 IPv6 IP
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.HasIP(System.String)">
            <summary>
            是否含 有Ipv4 或 IPv6 IP
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsPhoneOfChina(System.String)">
            <summary>
            是不是中国电话，格式010-88888888
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsPostcodeOfChina(System.String)">
            <summary>
            是否为中国邮政编码 6个数字
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsChinese(System.String)">
            <summary>
            是否为中文
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.HasChinese(System.String)">
            <summary>
            是否包含中文
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsNormal(System.String)">
            <summary>
            验证是不是否为常规字符 字母，数字，下划线的组合
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsNumber(System.String,System.Boolean)">
            <summary> 
            是否为非负纯数字
            </summary> 
            <param name="source"></param> 
            <param name="isNegative">是否允许为负数</param>
            <returns></returns> 
        </member>
        <member name="M:Adf.ValidateHelper.IsNumberOrFloat(System.String,System.Boolean)">
            <summary> 
            是否为整数或浮点数 
            </summary> 
            <param name="source"></param> 
            <param name="isNegative">是否允许为负数</param>
            <returns></returns> 
        </member>
        <member name="M:Adf.ValidateHelper.IsKeyboard(System.String)">
            <summary>
            判断是否为键盘字符
            </summary>
            <param name="input">要进行判断的字符串</param>
            <returns>返回Bool值表示是否为键盘字符</returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsLetterAndNumber(System.String)">
            <summary>
            是否为不区分大小写的字母和数字
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsLetterAndNumber(System.String,Adf.LetterCase)">
            <summary>
            是否为字母和数字
            </summary>
            <param name="input"></param>
            <param name="letterCase">指定大小写规则</param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsLetter(System.String)">
            <summary>
            是否为不区分大小写的字母
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ValidateHelper.IsLetter(System.String,Adf.LetterCase)">
            <summary>
            是否为指定规则的字母
            </summary>
            <param name="input"></param>
            <param name="letterCase">指定大小写规则</param>
            <returns></returns>
        </member>
        <member name="T:Adf.LetterCase">
            <summary>
            字母大小写属性
            </summary>
        </member>
        <member name="F:Adf.LetterCase.SupperAndLower">
            <summary>
            字母大写和小写
            </summary>
        </member>
        <member name="F:Adf.LetterCase.Supper">
            <summary>
            仅大写字母
            </summary>
        </member>
        <member name="F:Adf.LetterCase.Lower">
            <summary>
            仅小写字母
            </summary>
        </member>
        <member name="T:Adf.Image.ImageHanlde">
            <summary>
            图片处理
            </summary>
        </member>
        <member name="M:Adf.Image.ImageHanlde.#ctor(System.String)">
            <summary>
            初始化图片
            </summary>
            <param name="path">图片地址</param>
        </member>
        <member name="M:Adf.Image.ImageHanlde.#ctor(System.IO.Stream)">
            <summary>
            初始化图片
            </summary>
            <param name="stream">图片流</param>
        </member>
        <member name="M:Adf.Image.ImageHanlde.CreateMark(Adf.Image.ImageMark)">
            <summary>
            创建一个水印图
            </summary>
            <param name="mark">水印对象</param>
            <exception cref="T:System.ApplicationException">Create Error</exception>
        </member>
        <member name="M:Adf.Image.ImageHanlde.CreateMark(Adf.Image.ImageMark,System.IO.Stream)">
            <summary>
            创建一个水印图
            </summary>
            <param name="mark">水印对象</param>
            <param name="savestream">要保存至的文件流</param>
            <exception cref="T:System.ApplicationException">Create Error</exception>
        </member>
        <member name="M:Adf.Image.ImageHanlde.CreateMark(Adf.Image.ImageMark,System.String)">
            <summary>
            创建一个水印图
            </summary>
            <param name="mark">水印对象</param>
            <param name="savepath">要保存至的文件路径</param>
            <exception cref="T:System.ApplicationException">Create Error</exception>
        </member>
        <member name="M:Adf.Image.ImageHanlde.Save">
            <summary>
            保存当前图片,使用此方法必需保证是使用的<see cref="T:Adf.Image.ImageHanlde"/> 重载方法
            </summary>
        </member>
        <member name="M:Adf.Image.ImageHanlde.Save(System.String)">
            <summary>
            将图片保存至指定路径
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:Adf.Image.ImageHanlde.Save(System.IO.Stream)">
            <summary>
            将图片保存至指定路径
            </summary>
            <param name="outputStream">输出流</param>
        </member>
        <member name="M:Adf.Image.ImageHanlde.Save(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            将图片保存至指定路径
            </summary>
            <param name="path">路径</param>
            <param name="if">要保存的文件格式</param>
        </member>
        <member name="M:Adf.Image.ImageHanlde.ConvertFormat(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            格式转换,返回文件名
            </summary>
            <param name="filepath">路径</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Adf.Image.ImageHanlde.SetQuality(System.Int32)">
            <summary>
            设置当前图片质量
            </summary>
            <param name="quality">质量等级，由 1-100的数字表示，建议设置在60以上</param>
        </member>
        <member name="M:Adf.Image.ImageHanlde.CompressImage(System.Int32)">
            <summary>
            图片宽高自动压缩处理
            </summary>
            <param name="width">图片最大宽度，当大于该宽度时图片将自动进行压缩处理</param>
        </member>
        <member name="M:Adf.Image.ImageHanlde.CompressImage(System.Int32,System.Int32)">
            <summary>
            图片宽高自动压缩处理
            </summary>
            <param name="width">图片最大宽度，当大于该宽度时图片将自动进行压缩处理,当值小于图片宽图时自动以高度缩放等比计算</param>
            <param name="height">图片最大高度，当值小于图片高度时自动以宽图缩放等比计算</param>
        </member>
        <member name="M:Adf.Image.ImageHanlde.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:Adf.Image.ImageHanlde.ImageFormat">
            <summary>
            获取或设置当前图片的格式
            </summary>
        </member>
        <member name="P:Adf.Image.ImageHanlde.Path">
            <summary>
            获取正在处理图片的路径
            </summary>
        </member>
        <member name="P:Adf.Image.ImageHanlde.JpegCodeinfo">
            <summary>
            默认的Jpeg编辑器
            </summary>
        </member>
        <member name="T:Adf.Mq">
            <summary>
            任务队列管理器
            </summary>
        </member>
        <member name="M:Adf.Mq.#ctor(System.String)">
            <summary>
            initialize a instance
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Adf.Mq.#ctor(System.String,Adf.LogManager)">
            <summary>
            initialize a instance
            </summary>
            <param name="name"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Adf.Mq.GetAvailableThread">
            <summary>
            可用接收线程数
            </summary>
        </member>
        <member name="M:Adf.Mq.Send``1(``0)">
            <summary>
            发送
            </summary>
        </member>
        <member name="M:Adf.Mq.Receive``1(System.Int32,System.Action{``0})">
            <summary>
            异步接收
            </summary>
            <param name="action"></param>
            <param name="maxThreadSize"></param>
            <exception cref="T:Adf.MqException">MqException 已调用过 Receive了</exception>
            <exception cref="T:System.Messaging.MessageQueueException"> System.Messaging.MessageQueueException</exception>
        </member>
        <member name="M:Adf.Mq.ReceiveCompleted``1(System.Object,System.Messaging.ReceiveCompletedEventArgs)">
            <summary>
            完成一个接收
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Adf.Mq.ReconnectQueue``1(System.Messaging.MessageQueue,System.Int32,System.Messaging.Message@)">
            <summary>
            重建一个失败的队列
            </summary>
            <param name="mq"></param>
            <param name="queueIndex">队列所在索引</param>
            <param name="message">接收到的消息</param>
            <returns></returns>
        </member>
        <member name="M:Adf.Mq.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="P:Adf.Mq.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Adf.Mq.Receiving">
            <summary>
            是否正在接收
            </summary>
        </member>
        <member name="P:Adf.Mq.ReconnectInterval">
            <summary>
            异常时重连间隔，单位：秒，默认:60seconds
            </summary>
        </member>
        <member name="T:Adf.ResourceHelper">
            <summary>
            资源助手
            </summary>
        </member>
        <member name="M:Adf.ResourceHelper.GetText(System.String)">
            <summary>
            获取当前程序集文本资源
            </summary>
            <param name="name">项目名称.文件名/项目名称.目录名.文件名</param>
            <returns></returns>
        </member>
        <member name="M:Adf.ResourceHelper.GetText(System.String,System.Reflection.Assembly)">
            <summary>
            获取指定程序集文本资源
            </summary>
            <param name="name">项目名称.文件名/项目名称.目录名.文件名</param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ResourceHelper.GetBytes(System.String)">
            <summary>
            获取当前程序集资源字节数组
            </summary>
            <param name="name">项目名称.文件名/项目名称.目录名.文件名</param>
            <returns></returns>
        </member>
        <member name="M:Adf.ResourceHelper.GetBytes(System.String,System.Reflection.Assembly)">
            <summary>
            获取当前程序集资源字节数组
            </summary>
            <param name="name">项目名称.文件名/项目名称.目录名.文件名</param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.MemcachePoolMember">
            <summary>
            Memcache池成员
            </summary>
        </member>
        <member name="T:Adf.IPoolMember">
            <summary>
            Pool Member Info
            池成员
            </summary>
        </member>
        <member name="M:Adf.IPoolMember.CreatePoolInstance">
            <summary>
            Create
            </summary>
            <returns></returns>
        </member>
        <member name="P:Adf.IPoolMember.PoolActive">
            <summary>
            is active ,成员是否可用
            </summary>
        </member>
        <member name="P:Adf.IPoolMember.PoolMemberId">
            <summary>
            Pool Member Identity
            </summary>
        </member>
        <member name="M:Adf.MemcachePoolMember.#ctor(System.String,System.Int32)">
            <summary>
            初始一个新实例
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:Adf.MemcachePoolMember.CreatePoolInstance">
            <summary>
            创建新实例
            </summary>
            <returns></returns>
        </member>
        <member name="P:Adf.MemcachePoolMember.Host">
            <summary>
            获取主机名
            </summary>
        </member>
        <member name="P:Adf.MemcachePoolMember.Port">
            <summary>
            获取主机端口
            </summary>
        </member>
        <member name="P:Adf.MemcachePoolMember.PoolActive">
            <summary>
            是否活动可用
            </summary>
        </member>
        <member name="P:Adf.MemcachePoolMember.PoolMemberId">
            <summary>
            池成员标识
            </summary>
        </member>
        <member name="T:Adf.ObjectConverter">
            <summary>
            对象转换器
            </summary>
        </member>
        <member name="M:Adf.ObjectConverter.ToDictionary(System.Object,System.Boolean)">
            <summary>
            将目标对象属性转换为键值列表
            </summary>
            <param name="targetObject"></param>
            <param name="recursion"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ObjectConverter.ToObject(System.Type,System.Collections.IDictionary)">
            <summary>
            将键值表值转换为对象
            </summary>
            <param name="dictionary"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ObjectConverter.ToObject(System.Type,System.Collections.IDictionary,Adf.ObjectConverter.ConvertValueCallback)">
            <summary>
            将键值表值转换为对象
            </summary>
            <param name="dictionary"></param>
            <param name="objectType"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ObjectConverter.ConvertValue(System.Object,System.Type)">
            <summary>
            转换一个对象值
            </summary>
            <param name="value"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ObjectConverter.ConvertValue(System.Object,System.Type,Adf.ObjectConverter.ConvertValueCallback)">
            <summary>
            转换一个对象值
            </summary>
            <param name="value"></param>
            <param name="objectType"></param>
            <param name="callback">定义转换回调以及嵌套调用时自处理,返回值为true时，输出参数有效</param>
            <returns></returns>
        </member>
        <member name="T:Adf.ObjectConverter.ConvertValueCallback">
            <summary>
            定义对象转换器转换对象值时的回调，以便转换具有嵌套值时的自处理
            </summary>
            <param name="value"></param>
            <param name="objectType"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.ICache">
            <summary>
            ICache
            </summary>
        </member>
        <member name="M:Adf.ICache.Set(System.String,System.Object,System.Int32)">
            <summary>
            set cache
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires"></param>
        </member>
        <member name="M:Adf.ICache.Get(System.String)">
            <summary>
            get cache
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ICache.Get(System.String,System.Type)">
            <summary>
            get cache
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <returns>null is not find</returns>
        </member>
        <member name="M:Adf.ICache.Get``1(System.String)">
            <summary>
            get cache
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ICache.Delete(System.String)">
            <summary>
            delete cache
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Adf.Config.ConfigBase`1">
            <summary>
            配置基类
            </summary>
            <remarks>
            /Config/file1.config
            /Config/file2.config
            /Config/file...N.config
            </remarks>
        </member>
        <member name="T:Adf.Config.IConfig">
            <summary>
            配置文件接口
            </summary>
        </member>
        <member name="M:Adf.Config.IConfig.CheckModifyed">
            <summary>
            配置文件是否已修改
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.IConfig.Reload">
            <summary>
            重新载入配置文件
            </summary>
        </member>
        <member name="M:Adf.Config.IConfig.Exists(System.String)">
            <summary>
            是否存在某一配置
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.IConfig.TryGet(System.String,System.Object@)">
            <summary>
            尝试获取某一配置
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="E:Adf.Config.IConfig.Changed">
            <summary>
            配置变更事件
            </summary>
        </member>
        <member name="P:Adf.Config.IConfig.FileName">
            <summary>
            获取配置文件名称
            </summary>
        </member>
        <member name="P:Adf.Config.IConfig.FilePath">
            <summary>
            获取本地配置文件路径
            </summary>
        </member>
        <member name="P:Adf.Config.IConfig.FileExist">
            <summary>
            本地配置文件是否存在
            </summary>
        </member>
        <member name="P:Adf.Config.IConfig.Count">
            <summary>
            获取配置项总数
            </summary>
        </member>
        <member name="P:Adf.Config.IConfig.IsWatcher">
            <summary>
            是否已启用变更监控
            </summary>
        </member>
        <member name="P:Adf.Config.IConfig.Item(System.String)">
            <summary>
            获取某一配置值
            </summary>
            <param name="name"></param>
            <returns>exists return value, no exists return null</returns>
        </member>
        <member name="F:Adf.Config.ConfigBase`1.items">
            <summary>
            获取配置项字典
            </summary>
        </member>
        <member name="F:Adf.Config.ConfigBase`1.attrs">
            <summary>
            获取配置根属性字典
            </summary>
        </member>
        <member name="F:Adf.Config.ConfigBase`1.version">
            <summary>
            current load version
            </summary>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.#ctor(System.String)">
            <summary>
            初始化新实例
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetFilePath(System.String)">
            <summary>
            get file a path
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.Init">
            <summary>
            初始化配置导入,可重载此方法在之前与之后进行实现其它业务
            </summary>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.AddWatcher">
            <summary>
            添加到监控列表
            </summary>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.Reload">
            <summary>
            重新初始化配置导入,可重载此方法在之前与之后进行实现其它业务
            </summary>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.CheckModifyed">
            <summary>
            check config file is modifyed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetFileVersion(System.String)">
            <summary>
            get file version
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.FileLoad(System.Xml.XmlDocument)">
            <summary>
            load config
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.ReloadErrorHandle(System.Exception)">
            <summary>
            reload error handle, default ignore error
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.OnChanged">
            <summary>
            trigger change event
            </summary>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.NewItem(System.Xml.XmlNode)">
            <summary>
            新项
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetAttr(System.String)">
            <summary>
            获取根属性节点
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetAttr(System.String,System.String)">
            <summary>
            获取根属性节值
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetAttrAsInt16(System.String,System.Int16)">
            <summary>
            获取一个根属性节点整型值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetAttrAsInt32(System.String,System.Int32)">
            <summary>
            获取一个根属性节点整型值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetAttrAsInt64(System.String,System.Int64)">
            <summary>
            获取一个根属性节点长整型值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetAttrAsUInt16(System.String,System.UInt16)">
            <summary>
            获取一个根属性节点整型值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetAttrAsUInt32(System.String,System.UInt32)">
            <summary>
            获取一个根属性节点整型值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetAttrAsUInt64(System.String,System.UInt64)">
            <summary>
            获取一个根属性节点长整型值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetAttrAsBoolean(System.String,System.Boolean)">
            <summary>
            获取一个根属性节点布尔值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetItem(System.String,`0)">
            <summary>
            get config
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.TryGet(System.String,`0@)">
            <summary>
            尝试获取
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.Exists(System.String)">
            <summary>
            是否存在某一配置
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetKeys">
            <summary>
            获取所有键列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigBase`1.GetItems">
            <summary>
            获取所有值列表
            </summary>
            <returns></returns>
        </member>
        <member name="E:Adf.Config.ConfigBase`1.Changed">
            <summary>
            当配置文件发生变化时
            </summary>
        </member>
        <member name="P:Adf.Config.ConfigBase`1.FileName">
            <summary>
            配置文件名称
            </summary>
        </member>
        <member name="P:Adf.Config.ConfigBase`1.FilePath">
            <summary>
            本地配置文件路径
            </summary>
        </member>
        <member name="P:Adf.Config.ConfigBase`1.FileExist">
            <summary>
            本地文件是否存在
            </summary>
        </member>
        <member name="P:Adf.Config.ConfigBase`1.Count">
            <summary>
            获取配置项总数
            </summary>
        </member>
        <member name="P:Adf.Config.ConfigBase`1.IsWatcher">
            <summary>
            是否已启用变更监控
            </summary>
        </member>
        <member name="P:Adf.Config.ConfigBase`1.Item(System.String)">
            <summary>
            获取指定名称配置
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.Base62Helper">
            <summary>
            Base62 助手
            </summary>
        </member>
        <member name="M:Adf.Base62Helper.Encode(System.Int64)">
            <summary>
            将数字进行62字符编码
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Base62Helper.Decode(System.String)">
            <summary>
            将已编码的62字符还原为数字
            </summary>
            <param name="encodeString"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.IObjectCache">
            <summary>
            Object Cache 处理器接口
            </summary>
        </member>
        <member name="M:Adf.IObjectCache.BuildObjectCacheKey(System.Object)">
            <summary>
            生成单项缓存键
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.IObjectCache.SaveBox(System.String,System.Collections.IEnumerable)">
            <summary>
            存储一个缓存盒
            </summary>
            <param name="data">数据</param>
            <param name="boxCacheKey">缓存盒键</param>
            <returns></returns>
        </member>
        <member name="M:Adf.IObjectCache.GetData(System.String)">
            <summary>
            根据缓存盒键获取数据
            </summary>
            <param name="boxCacheKey">缓存盒键</param>
            <returns>null is not exist</returns>
        </member>
        <member name="M:Adf.IObjectCache.GetObjectList(System.String[])">
            <summary>
            根据缓存键获取对象数据
            </summary>
            <param name="objectCacheKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.IObjectCache.GetObject(System.String)">
            <summary>
            根据缓存键获取对象数据
            </summary>
            <param name="objectCacheKey"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.IObjectCache.ObjectExpires">
            <summary>
            单个对象过期时间,默认：300秒
            </summary>
        </member>
        <member name="P:Adf.IObjectCache.BoxExpires">
            <summary>
            盒子储过期时间,默认：300秒
            </summary>
        </member>
        <member name="P:Adf.IObjectCache.Cache">
            <summary>
            获取缓存实例
            </summary>
        </member>
        <member name="P:Adf.IObjectCache.KeepGanged">
            <summary>
            联动保持，当为true时确保任一对象失效时盒子也失效, 默认 false
            </summary>
        </member>
        <member name="T:Adf.SocketConnection.SocketClient">
            <summary>
            socket client
            </summary>
        </member>
        <member name="T:Adf.SocketConnection.SocketConnection">
            <summary>
            socket connection
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnection.#ctor">
            <summary>
            initialize a new instance
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnection.ToString">
            <summary>
            output connection id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnection.Close">
            <summary>
            close connection
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnection.System#IDisposable#Dispose">
            <summary>
            dispose server
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnection.Read">
            <summary>
            call read
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnection.OnDisconnectioned">
            <summary>
            on new disconnection
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnection.OnError(System.Exception)">
            <summary>
            on new error
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnection.OnLog(System.String)">
            <summary>
            on new log
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnection.OnMessage(System.Object)">
            <summary>
            on new message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnection.WriteByte(System.Byte)">
            <summary>
            write byte
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnection.Write(System.Byte[])">
            <summary>
            write content
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnection.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            write content
            </summary>
            <param name="buffer"></param>
            <param name="length"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnection.WriteUTF8String(System.String)">
            <summary>
            write utf8 content
            </summary>
            <param name="input"></param>
        </member>
        <member name="P:Adf.SocketConnection.SocketConnection.UserState">
            <summary>
            get or set user state
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.SocketConnection.Stream">
            <summary>
            get or set stream
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.SocketConnection.RemoteEndPoint">
            <summary>
            get or set remote end point
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.SocketConnection.Listener">
            <summary>
            get or set listener
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.SocketConnection.Handler">
            <summary>
            get connection handler
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.SocketConnection.Id">
            <summary>
            get connection id
            </summary>
        </member>
        <member name="E:Adf.SocketConnection.SocketConnection.Error">
            <summary>
            on error
            </summary>
        </member>
        <member name="E:Adf.SocketConnection.SocketConnection.Disconnectioned">
            <summary>
            on disconnectioned
            </summary>
        </member>
        <member name="E:Adf.SocketConnection.SocketConnection.Log">
            <summary>
            on new log
            </summary>
        </member>
        <member name="E:Adf.SocketConnection.SocketConnection.Message">
            <summary>
            on new message
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketClient.#ctor(System.String)">
            <summary>
            initialize a new instance
            </summary>
            <param name="ep">list endpoint</param>
        </member>
        <member name="M:Adf.SocketConnection.SocketClient.#ctor(System.String,System.Int32)">
            <summary>
            initialize a new instance
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketClient.Connect">
            <summary>
            begin connect, timeout 15s
            </summary>
            <exception cref="T:System.InvalidOperationException">no set new connection action</exception>
        </member>
        <member name="M:Adf.SocketConnection.SocketClient.Connect(System.Int32)">
            <summary>
            begin connect
            </summary>
            <exception cref="T:System.InvalidOperationException">no set new connection action</exception>
            <exception cref="T:System.TimeoutException"></exception>
            <param name="timeout"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketClient.OnConnectioned">
            <summary>
            on new disconnection
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.SocketClient.Host">
            <summary>
            get listen host
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.SocketClient.Port">
            <summary>
            get listen port
            </summary>
        </member>
        <member name="E:Adf.SocketConnection.SocketClient.Connectioned">
            <summary>
            on disconnectioned
            </summary>
        </member>
        <member name="T:Adf.Mail.MailDeliver">
            <summary>
            无代理发送器
            </summary>
        </member>
        <member name="F:Adf.Mail.MailDeliver.mxrecords">
            <summary>
            mx record. domain,exchange
            </summary>
        </member>
        <member name="M:Adf.Mail.MailDeliver.Send(Adf.Mail.MailMessage)">
            <summary>
            无代理发送
            </summary>
            <param name="message"></param>
            <exception cref="T:Adf.SmtpException"></exception>
        </member>
        <member name="M:Adf.Mail.MailDeliver.Send(System.String,Adf.Mail.MailMessage)">
            <summary>
            按域进行无代理发送
            </summary>
            <param name="domain"></param>
            <param name="message"></param>
            <exception cref="T:Adf.SmtpException"></exception>
        </member>
        <member name="F:Adf.Mail.MailDeliver.MXRecordItem.recordList">
            <summary>
            所有DNS列表
            </summary>
        </member>
        <member name="F:Adf.Mail.MailDeliver.MXRecordItem.index">
            <summary>
            当前使用的索引序号
            </summary>
        </member>
        <member name="T:Adf.Config.ConfigLoader`1">
            <summary>
            config loader
            </summary>
        </member>
        <member name="M:Adf.Config.ConfigLoader`1.#ctor(System.String)">
            <summary>
            initialize new search instance
            </summary>
            <param name="searchPattern">ex: *.config / *.ex.config</param>
        </member>
        <member name="M:Adf.Config.ConfigLoader`1.Load">
            <summary>
            load config
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigLoader`1.Reload">
            <summary>
            reload config
            </summary>
        </member>
        <member name="P:Adf.Config.ConfigLoader`1.SearchPattern">
            <summary>
            get search pattern
            </summary>
        </member>
        <member name="P:Adf.Config.ConfigLoader`1.Names">
            <summary>
            get all config names
            </summary>
        </member>
        <member name="P:Adf.Config.ConfigLoader`1.Count">
            <summary>
            get config count
            </summary>
        </member>
        <member name="P:Adf.Config.ConfigLoader`1.Item(System.String)">
            <summary>
            get config instance
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.RedisWriter">
            <summary>
            命令写入工具
            </summary>
        </member>
        <member name="M:Adf.RedisWriter.#ctor(Adf.RedisClient,System.Int32,System.String)">
            <summary>
            初始化新实例
            </summary>
            <param name="client"></param>
            <param name="command"></param>
            <param name="argumentSize">参数总数</param>
        </member>
        <member name="M:Adf.RedisWriter.WriteArgument(System.String)">
            <summary>
            写入一个参数
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Adf.RedisWriter.WriteArgument(System.Byte[])">
            <summary>
            写入一个参数
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Adf.Db.SqliteBuilder">
            <summary>
            Sqlite专用语句生成
            </summary>
        </member>
        <member name="T:Adf.Db.SqlBuilder">
            <summary>
            将指定的对象转换为SQL语句
            </summary>
        </member>
        <member name="M:Adf.Db.SqlBuilder.#ctor(Adf.Db.DbFactory)">
            <summary>
            初始化新对象
            </summary>
            <param name="factory">当前操作对象</param>
        </member>
        <member name="M:Adf.Db.SqlBuilder.GetWhere(Adf.Db.DbEntity,System.Data.IDbDataParameter[]@)">
            <summary>
            get object where
            </summary>
            <param name="where">指定的条件生成对象</param>
            <param name="parameters"></param>
        </member>
        <member name="M:Adf.Db.SqlBuilder.GetDelete(Adf.Db.DbEntity,System.Data.IDbDataParameter[]@)">
            <summary>
            get delete sql
            </summary>
            <param name="where">实体</param>
            <param name="parameters"></param>
        </member>
        <member name="M:Adf.Db.SqlBuilder.GetInsert(Adf.Db.DbEntity,System.Data.IDbDataParameter[]@)">
            <summary>
            get insert sql
            </summary>
            <param name="entity"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Adf.Db.SqlBuilder.GetUpdate(Adf.Db.DbEntity,Adf.Db.DbEntity,System.Data.IDbDataParameter[]@)">
            <summary>
            get update sql
            </summary>
            <param name="where">更新条件</param>
            <param name="update"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Adf.Db.SqlBuilder.GetSelect(Adf.Db.DbEntity,System.String,System.Data.IDbDataParameter[]@)">
            <summary>
            get select sql
            </summary>
            <param name="where"></param>
            <param name="fields">default is "*" </param>
            <param name="parameters"></param>
        </member>
        <member name="M:Adf.Db.SqlBuilder.PageSql(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            生成分页用Sql语句
            </summary>
            <param name="fields">字段值,前后不带空格,位于 Select 与 From 之间的字段部表示</param>
            <param name="tablename">要进行查询的数据表,可为多个</param>
            <param name="condition">要进行查询的查询串,Where的后缀,如果未有,请设置为 null</param>
            <param name="orderby">排序方法,如果未有排序则为null</param>
            <param name="groupby">分组,分组请设置为null</param>
            <param name="pageindex">页序</param>
            <param name="pagesize">页大小</param>
            <param name="key">键</param>
            <param name="distinct"></param>
            <returns>返回生成后的Sql语句</returns>
        </member>
        <member name="M:Adf.Db.SqlBuilder.CountSql(System.String,System.String)">
            <summary>
            生成分页用计Count语句
            </summary>
            <param name="tablename">要进行查询的数据表,可为多个</param>
            <param name="condition">要进行查询的查询串,Where的后缀,如果未有,请设置为Empty</param>
            <returns>返回生成后的Sql语句</returns>
        </member>
        <member name="P:Adf.Db.SqlBuilder.Factory">
            <summary>
            工厂对象
            </summary>
        </member>
        <member name="M:Adf.Db.SqliteBuilder.#ctor(Adf.Db.DbFactory)">
            <summary>
            初始化新对象
            </summary>
            <param name="factory">当前操作对象</param>
        </member>
        <member name="M:Adf.Db.SqliteBuilder.GetSelect(Adf.Db.DbEntity,System.String,System.Data.IDbDataParameter[]@)">
            <summary>
            get select sql
            </summary>
            <param name="fields"></param>
            <param name="parameters"></param>
            <param name="where"></param>
        </member>
        <member name="M:Adf.Db.SqliteBuilder.PageSql(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            生成分页用Sql语句
            </summary>
            <param name="fields">字段值,前后不带空格,位于 Select 与 From 之间的字段部表示</param>
            <param name="tablename">要进行查询的数据表,可为多个</param>
            <param name="condition">要进行查询的查询串,Where的后缀,如果未有,请设置为 null</param>
            <param name="orderby">排序方法,如果未有排序则为null</param>
            <param name="groupby">分组,分组请设置为null</param>
            <param name="pageindex">页序</param>
            <param name="pagesize">页大小</param>
            <param name="key">键</param>
            <param name="distinct"></param>
            <returns>返回生成后的Sql语句</returns>
        </member>
        <member name="T:Adf.IConsistentHashingNode">
            <summary>
            一致性哈希节点接口
            </summary>
        </member>
        <member name="M:Adf.IConsistentHashingNode.GetHashingIdentity">
            <summary>
            获取哈希标识字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Adf.ConsistentHashing`1">
            <summary>
            Consistent Hashing
            一致性哈希
            </summary>
            <typeparam name="T">实现 <see cref="T:Adf.IConsistentHashingNode"/> 接口节点</typeparam>
        </member>
        <member name="M:Adf.ConsistentHashing`1.#ctor(`0[])">
            <summary>
            初始化新实例
            </summary>
            <param name="nodes">节点数组</param>
        </member>
        <member name="M:Adf.ConsistentHashing`1.GetPrimary(System.String)">
            <summary>
            获取一个节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConsistentHashing`1.Hash(System.String)">
            <summary>
            Hash
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.ConsistentHashing`1.NodeCount">
            <summary>
            获取含虚拟节点的总节点数
            </summary>
        </member>
        <member name="P:Adf.ConsistentHashing`1.Nodes">
            <summary>
            获取实际节点
            </summary>
        </member>
        <member name="T:Adf.SocketConnection.SocketPoolListener">
            <summary>
            socket listener with a connection pool
            </summary>
        </member>
        <member name="T:Adf.SocketConnection.SocketListener">
            <summary>
            socket listener
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketListener.#ctor(System.String)">
            <summary>
            initialize a new instance
            </summary>
            <param name="ep">list endpoint</param>
        </member>
        <member name="M:Adf.SocketConnection.SocketListener.#ctor(System.String,System.Int32)">
            <summary>
            initialize a new instance
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketListener.Initialize(System.Net.IPAddress,System.Int32)">
            <summary>
            initialize listen
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketListener.ToString">
            <summary>
            output host and port
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.SocketConnection.SocketListener.Listen">
            <summary>
            listen start
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketListener.Listen(System.Int32)">
            <summary>
            listen start
            </summary>
            <param name="backlog"></param>
            <exception cref="T:System.InvalidOperationException">no set new connection action</exception>
        </member>
        <member name="M:Adf.SocketConnection.SocketListener.ReadConnection(Adf.SocketConnection.SocketConnection)">
            <summary>
            connection call read
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketListener.CreateConnection(System.Int64,System.Net.Sockets.Socket)">
            <summary>
            new connection
            </summary>
            <param name="id"></param>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.SocketConnection.SocketListener.OnConnectioned(Adf.SocketConnection.SocketConnection)">
            <summary>
            on new error
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketListener.OnError(System.Exception)">
            <summary>
            on new error
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketListener.Dispose">
            <summary>
            dispose server
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.SocketListener.Host">
            <summary>
            get listen host
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.SocketListener.Port">
            <summary>
            get listen port
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.SocketListener.IsListened">
            <summary>
            is listen start
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.SocketListener.LogAgent">
            <summary>
            log agent
            </summary>
        </member>
        <member name="E:Adf.SocketConnection.SocketListener.Error">
            <summary>
            on error
            </summary>
        </member>
        <member name="E:Adf.SocketConnection.SocketListener.NewConnection">
            <summary>
            on new connection
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.SocketListener.Handler">
            <summary>
            get listener handler
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketPoolListener.#ctor(System.String)">
            <summary>
            initialize a new instance
            </summary>
            <param name="ep">list endpoint</param>
        </member>
        <member name="M:Adf.SocketConnection.SocketPoolListener.#ctor(System.String,System.Int32)">
            <summary>
            initialize a new instance
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketPoolListener.CloseConnection(System.Int64)">
            <summary>
            close connection
            </summary>
            <param name="id"></param>
            <returns>not connection return false, success return true.</returns>
        </member>
        <member name="M:Adf.SocketConnection.SocketPoolListener.CreateConnection(System.Int64,System.Net.Sockets.Socket)">
            <summary>
            new connection
            </summary>
            <param name="id"></param>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.SocketConnection.SocketPoolListener.ReadConnection(Adf.SocketConnection.SocketConnection)">
            <summary>
            initialize connection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketPoolListener.GetConnection(System.Int64)">
            <summary>
            get connection for enabled hold option.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.SocketConnection.SocketPoolListener.ForEach(System.Action{Adf.SocketConnection.SocketConnection})">
            <summary>
            for each all socket connection
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketPoolListener.Dispose">
            <summary>
            dispose instance
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.SocketPoolListener.ConnectionCount">
            <summary>
            get connection count
            </summary>
            <returns></returns>
        </member>
        <member name="T:Adf.SocketConnection.ListenerHandler">
            <summary>
            default listener handler
            </summary>
        </member>
        <member name="T:Adf.SocketConnection.IListenerHandler">
            <summary>
            listener handler
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.IListenerHandler.CreateConnection(Adf.SocketConnection.SocketListener)">
            <summary>
            create connection
            </summary>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="F:Adf.SocketConnection.ListenerHandler.Default">
            <summary>
            get default handler
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.ListenerHandler.CreateConnection(Adf.SocketConnection.SocketListener)">
            <summary>
            create connection
            </summary>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.RedisHashes">
            <summary>
            Redis 哈希表
            </summary>
        </member>
        <member name="M:Adf.RedisHashes.HDEL(System.String,System.String)">
            <summary>
            删除一个项
            </summary>
            <param name="key"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisHashes.HEXISTS(System.String,System.String)">
            <summary>
            判断一个项是否存在
            </summary>
            <param name="key"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisHashes.HGET(System.String,System.String)">
            <summary>
            获取一个项
            </summary>
            <param name="key"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisHashes.HGETALL(System.String)">
            <summary>
            获取一个项
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisHashes.HINCRBY(System.String,System.String,System.Int32)">
            <summary>
            对某项自增一数值
            </summary>
            <param name="key"></param>
            <param name="field"></param>
            <param name="increment"></param>
            <returns>自增后的数值</returns>
        </member>
        <member name="M:Adf.RedisHashes.HINCRBYFLOAT(System.String,System.String,System.Double)">
            <summary>
            对某项自增一浮点数值
            </summary>
            <param name="key"></param>
            <param name="field"></param>
            <param name="increment"></param>
            <returns>自增后的数值,服务端版本要求:Available since 2.6.0.</returns>
        </member>
        <member name="M:Adf.RedisHashes.HKEYS(System.String)">
            <summary>
            获取元素的键项列表
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisHashes.HVALS(System.String)">
            <summary>
            获取元素的键项列表
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisHashes.HLEN(System.String)">
            <summary>
            获取哈希表元素个数
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisHashes.HMGET(System.String,System.String[])">
            <summary>
            获取元素的键项列表
            </summary>
            <param name="key"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisHashes.HMSET(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            设置一组元素值
            </summary>
            <param name="key"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:Adf.RedisHashes.HSET(System.String,System.String,System.String)">
            <summary>
            设置一个元素项
            </summary>
            <param name="key"></param>
            <param name="field"></param>
            <param name="value"></param>
            <returns>
            1 if field is a new field in the hash and value was set.
            0 if field already exists in the hash and the value was updated.
            </returns>
        </member>
        <member name="M:Adf.RedisHashes.HSETNX(System.String,System.String,System.String)">
            <summary>
            设置一个元素项,如果元素项不存在则成功，否则设置失败
            </summary>
            <param name="key"></param>
            <param name="field"></param>
            <param name="value"></param>
            <returns>
            1 if field is a new field in the hash and value was set.
            0 if field already exists in the hash and the value was updated.
            </returns>
        </member>
        <member name="T:Adf.Base36Helper">
            <summary>
            Base36 助手
            </summary>
        </member>
        <member name="M:Adf.Base36Helper.Encode(System.Int64)">
            <summary>
            将数字进行62字符编码
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Base36Helper.Decode(System.String)">
            <summary>
            将已编码的62字符还原为数字
            </summary>
            <param name="encodeString"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.WebSocketDataFrame">
            <summary>
            WebSocket 数据帧
            </summary>
        </member>
        <member name="M:Adf.WebSocketDataFrame.#ctor(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            初始化一个Socket数据帧
            </summary>
            <param name="socket"></param>
            <param name="headerBuffer"></param>
        </member>
        <member name="M:Adf.WebSocketDataFrame.#ctor(System.Net.Sockets.NetworkStream,System.Byte[])">
            <summary>
            初始化一个NetworkStream数据帧
            </summary>
            <param name="stream"></param>
            <param name="headerBuffer"></param>
        </member>
        <member name="M:Adf.WebSocketDataFrame.#ctor(System.Byte[],System.Boolean,Adf.WebSocketOpcode)">
            <summary>
            初始一个输出内容帧
            </summary>
            <param name="content"></param>
            <param name="isMask"></param>
            <param name="opcode"></param>
        </member>
        <member name="M:Adf.WebSocketDataFrame.GetFrameBytes">
            <summary>
            返回完整帧字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.WebSocketDataFrame.Mask(System.Byte[],System.Byte[])">
            <summary>
            掩码
            </summary>
            <param name="data"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.WebSocketDataFrame.Content">
            <summary>
            获取内容
            </summary>
        </member>
        <member name="P:Adf.WebSocketDataFrame.Opcode">
            <summary>
            获取当前内容Opcode
            </summary>
        </member>
        <member name="T:Adf.WebSocketCloseReason">
            <summary>
            WebSocket 关闭原因
            </summary>
        </member>
        <member name="F:Adf.WebSocketCloseReason.Timeout">
            <summary>
            连接超时
            </summary>
        </member>
        <member name="F:Adf.WebSocketCloseReason.IOError">
            <summary>
            通信错误
            </summary>
        </member>
        <member name="F:Adf.WebSocketCloseReason.Close">
            <summary>
            主动关闭
            </summary>
        </member>
        <member name="F:Adf.WebSocketCloseReason.Disconnected">
            <summary>
            通信断开
            </summary>
        </member>
        <member name="F:Adf.WebSocketCloseReason.Error">
            <summary>
            常规性错误
            </summary>
        </member>
        <member name="T:Adf.MD5Helper">
            <summary>
            编码助手
            </summary>
        </member>
        <member name="F:Adf.MD5Helper.Encoding">
            <summary>
            MD5默认字符编码，默认为 ASCII
            </summary>
        </member>
        <member name="M:Adf.MD5Helper.MD5(System.String)">
            <summary>
            MD5 encodes the passed string
            </summary>
            <param name="input">The string to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Adf.MD5Helper.MD5(System.String,System.Text.Encoding)">
            <summary>
            MD5 encodes the passed string
            </summary>
            <param name="input">The string to encode.</param>
            <param name="encoding">encoding</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Adf.MD5Helper.MD5(System.Byte[])">
            <summary>
            MD5 encodes the passed string
            </summary>
            <param name="input">The string to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Adf.MD5Helper.FileMD5(System.String)">
            <summary>
            File MD5
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.MD5Helper.StreamMD5(System.IO.Stream)">
            <summary>
            stream MD5
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.UriHelper">
            <summary>
            Uri Helper
            </summary>
        </member>
        <member name="M:Adf.UriHelper.QueryStringToString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            QueryString to String
            </summary>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.UriHelper.ParseQueryString(System.String,System.Text.Encoding)">
            <summary>
            Parse QueryString In Url
            </summary>
            <param name="url"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Adf.UriHelper.ParseQueryString(System.String,System.Text.Encoding,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Parse QueryString In Url
            </summary>
            <param name="url"></param>
            <param name="encoding"></param>
            <param name="queryString"></param>
        </member>
        <member name="M:Adf.UriHelper.ParseQueryString(System.String,System.Text.Encoding,System.Collections.Specialized.NameValueCollection,System.String@)">
            <summary>
            Parse QueryString In Url
            </summary>
            <param name="url"></param>
            <param name="encoding"></param>
            <param name="queryString"></param>
            <param name="path"></param>
        </member>
        <member name="M:Adf.UriHelper.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            UrlEncode
            </summary>
            <param name="str"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.UriHelper.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            UrlDecode
            </summary>
            <param name="value"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.UriHelper.IsUrlSafeChar(System.Char)">
            <summary>
            IsUrlSafeChar
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.UriHelper.IntToHex(System.Int32)">
            <summary>
            IntToHex
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.UriHelper.HexToInt(System.Char)">
            <summary>
            HexToInt
            </summary>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.SerializeHelper">
            <summary>
            序列化数据处理
            </summary>
        </member>
        <member name="M:Adf.SerializeHelper.GetSerialize(System.String)">
            <summary>
            读取一个序列数据，文件不存在则返回为null
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:Adf.SerializeHelper.SetSerialize(System.String,System.Object)">
            <summary>
            设置一个序列数据
            </summary>
            <param name="path">路径</param>
            <param name="data">数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Adf.SerializeHelper.GetXmlSerialize``1(System.String)">
            <summary>
            读取一个序列数据，文件不存在则返回为null
            </summary>
            <typeparam name="T">要序列化的类型</typeparam>
            <param name="path">路径</param>
        </member>
        <member name="M:Adf.SerializeHelper.SetXmlSerialize(System.String,System.Object)">
            <summary>
            设置一个序列数据
            </summary>
            <param name="path">路径</param>
            <param name="data">数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:Adf.Db.MySqlBuilder">
            <summary>
            MySql专用语句生成
            </summary>
        </member>
        <member name="M:Adf.Db.MySqlBuilder.#ctor(Adf.Db.DbFactory)">
            <summary>
            初始化新对象
            </summary>
            <param name="factory">当前操作对象</param>
        </member>
        <member name="M:Adf.Db.MySqlBuilder.GetSelect(Adf.Db.DbEntity,System.String,System.Data.IDbDataParameter[]@)">
            <summary>
            get select sql
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
            <param name="fields"></param>
        </member>
        <member name="M:Adf.Db.MySqlBuilder.PageSql(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            生成分页用Sql语句
            </summary>
            <param name="fields">字段值,前后不带空格,位于 Select 与 From 之间的字段部表示</param>
            <param name="tablename">要进行查询的数据表,可为多个</param>
            <param name="condition">要进行查询的查询串,Where的后缀,如果未有,请设置为 null</param>
            <param name="orderby">排序方法,如果未有排序则为null</param>
            <param name="groupby">分组,分组请设置为null</param>
            <param name="pageindex">页序</param>
            <param name="pagesize">页大小</param>
            <param name="key">键</param>
            <param name="distinct"></param>
            <returns>返回生成后的Sql语句</returns>
        </member>
        <member name="T:Adf.Db.DbHelper">
            <summary>
            DB助手
            </summary>
        </member>
        <member name="M:Adf.Db.DbHelper.IDataReaderToDataTable(System.Data.IDataReader)">
            <summary>
            将读取器转换为DataTable
            </summary>
            <param name="reader">数据读取器</param>
        </member>
        <member name="M:Adf.Db.DbHelper.Replace(System.String)">
            <summary>
            进行数据的安全串过滤,防止常规SQL注入
            </summary>
            <param name="input">要进行过滤的数据串</param>
        </member>
        <member name="M:Adf.Db.DbHelper.CloneParameters(System.Data.IDbDataParameter[])">
            <summary>
            克隆一组参数
            </summary>
            <param name="parameters">参数对象要求已实现ICloneable接口</param>
            <returns></returns>
        </member>
        <member name="T:Adf.Config.IpGroupSection">
            <summary>
            IP组配置节解释器
            </summary>
        </member>
        <member name="P:Adf.Config.IpGroupSection.Level">
            <summary>
            本地级别
            </summary>
        </member>
        <member name="P:Adf.Config.IpGroupSection.Hash">
            <summary>
            哈希获取时的虚拟节点数
            </summary>
        </member>
        <member name="P:Adf.Config.IpGroupSection.Description">
            <summary>
            本地描述
            </summary>
        </member>
        <member name="P:Adf.Config.IpGroupSection.Check">
            <summary>
            检测间隔(秒)
            </summary>
        </member>
        <member name="P:Adf.Config.IpGroupSection.IpList">
            <summary>
            Ip列表
            </summary>
        </member>
        <member name="T:Adf.Config.IpGroupCollection">
            <summary>
            IP组配置集合
            </summary>
        </member>
        <member name="M:Adf.Config.IpGroupCollection.CreateNewElement">
            <summary>
            创建新元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.IpGroupCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            获取键
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.Config.IpGroupCollection.Item(System.Int32)">
            <summary>
            获取指定索引的元素
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="T:Adf.CollectionGeneric`1">
            <summary>
            通用泛型集合基类
            </summary>
            <typeparam name="T">元素类型</typeparam>
        </member>
        <member name="M:Adf.CollectionGeneric`1.Add(`0)">
            <summary>
            添加一个新元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:Adf.CollectionGeneric`1.AddRange(`0[])">
            <summary>
            添加一组新元素
            </summary>
            <param name="arritem">元素组</param>
        </member>
        <member name="M:Adf.CollectionGeneric`1.Remove(`0)">
            <summary>
            移除指定的元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:Adf.CollectionGeneric`1.Remove(System.Int32)">
            <summary>
            移除指定索引处的元素
            </summary>
            <param name="index">移除指定索引处的元素</param>
        </member>
        <member name="P:Adf.CollectionGeneric`1.Item(System.Int32)">
            <summary>
            获取指定索引处的元素
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="T:Adf.RedisSubscribeResult">
            <summary>
            订阅事件参数
            </summary>
        </member>
        <member name="P:Adf.RedisSubscribeResult.SubscribeCount">
            <summary>
            Type 为订阅类型操作时,返回当前订阅此频道的数量，如： subscribe/unsubscribe
            </summary>
        </member>
        <member name="P:Adf.RedisSubscribeResult.Channel">
            <summary>
            频道名
            </summary>
        </member>
        <member name="P:Adf.RedisSubscribeResult.Type">
            <summary>
            结果类型
            </summary>
        </member>
        <member name="P:Adf.RedisSubscribeResult.Message">
            <summary>
            Type 为 message 时取得消息内容
            </summary>
        </member>
        <member name="T:Adf.PathHelper">
            <summary>
            路径处理
            </summary>
        </member>
        <member name="M:Adf.PathHelper.GetApplicationFile(System.String)">
            <summary>
            获取应用程序内文件或目录路径
            </summary>
            <param name="nameOrPath">文件名,目录或一个绝对路径, 若传入的是一个绝对路径，则将原样返回</param>
            <returns></returns>
        </member>
        <member name="M:Adf.PathHelper.IsInvalidNameChar(System.Char)">
            <summary>
            是否为不允许的名称字符
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.PathHelper.IsInvalidPathChar(System.Char)">
            <summary>
            是否为不允许的路径字符
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.PathHelper.CheckFileName(System.String)">
            <summary>
            检查文件名是否合法
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.PathHelper.CheckFilePath(System.String)">
            <summary>
            检查路径是否合法
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.PathHelper.EndSlash(System.String)">
            <summary>
            将指定的路径进行判断，如果最后未有斜杠\，如果未有则自动增加一个
            </summary>
            <param name="path">路径串</param>
        </member>
        <member name="M:Adf.PathHelper.EndBackSlash(System.String)">
            <summary>
            验证指定的路径最后一位是否为反斜扛 / ,如果不是则自动增加一个
            </summary>
            <param name="path">路径串</param>
        </member>
        <member name="M:Adf.PathHelper.NumberPathFull(System.Int64,System.String,System.Int32)">
            <summary>
            数字转路径，路径包含当前目录下文件名称
            </summary>
            <param name="number"></param>
            <param name="separateChar">路径分隔符</param>
            <param name="value">单目录最大值,此值不得小于100</param>
            <returns></returns>
        </member>
        <member name="M:Adf.PathHelper.NumberPath(System.Int64,System.String,System.Int32)">
            <summary>
            数字转路径，路径不包含当前目录下文件名
            </summary>
            <param name="number"></param>
            <param name="separateChar">路径分隔符</param>
            <param name="value">单目录最大值,此值不得小于100</param>
            <returns></returns>
        </member>
        <member name="M:Adf.PathHelper.NumberPath(System.Int64,System.Int32@,System.String,System.Int32)">
            <summary>
            数字转路径,并返回当前目录下文件名
            </summary>
            <param name="number"></param>
            <param name="separateChar">路径分隔符</param>
            <param name="value">单目录最大值,此值不得小于100</param>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="T:Adf.LogWriter">
            <summary>
            日志书写器
            </summary>
            <remarks>
            配置清单
            Log:Path 存储路径, 默认当前应用根目录下 Log 文件夹
            Log:Disabled:{Name} 禁止某一写书器, 默认值：false, 单个设置的disabled会覆盖全局设置
            </remarks>
        </member>
        <member name="T:Adf.ILogWriter">
            <summary>
            日志书写器
            </summary>
        </member>
        <member name="M:Adf.ILogWriter.Write(System.String,System.Object[])">
            <summary>
            写入日志内容并格式化内容
            </summary>
            <param name="content"></param>
            <param name="args">格式化数据</param>
        </member>
        <member name="M:Adf.ILogWriter.Write(System.String)">
            <summary>
            写入日志内容
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Adf.ILogWriter.WriteTimeLine(System.String,System.Object[])">
            <summary>
            写入以时间起始的行日志内容
            </summary>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="M:Adf.ILogWriter.WriteTime(System.String,System.Object[])">
            <summary>
            写入以时间起始的日志内容
            </summary>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="M:Adf.ILogWriter.WriteLine(System.String,System.Object[])">
            <summary>
            写入一行日志内容
            </summary>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="M:Adf.ILogWriter.WriteLine">
            <summary>
            写入一个空行
            </summary>
        </member>
        <member name="E:Adf.ILogWriter.Disposed">
            <summary>
            书写器关闭完成
            </summary>
        </member>
        <member name="E:Adf.ILogWriter.Writing">
            <summary>
            日志写入事件
            </summary>
        </member>
        <member name="P:Adf.ILogWriter.Level">
            <summary>
            获取日志写书器级别
            </summary>
        </member>
        <member name="P:Adf.ILogWriter.Name">
            <summary>
            获取当前日志名称
            </summary>
        </member>
        <member name="P:Adf.ILogWriter.Enable">
            <summary>
            获取或设置是否启用该书写器
            </summary>
        </member>
        <member name="M:Adf.LogWriter.#ctor(System.String)">
            <summary>
            初始化新实例
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Adf.LogWriter.#ctor(System.String,System.String)">
            <summary>
            初始化新实例
            </summary>
            <param name="path">当为Null时，若配置(Log.config)Log:Path:name或Log:Path则为配置值，否则以当前应用程序目录下Log为目录</param>
            <param name="name"></param>
        </member>
        <member name="M:Adf.LogWriter.CreateDefaultPath">
            <summary>
            create default path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.LogWriter.BuildPath">
            <summary>
            获取日志路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.LogWriter.BuildPath(System.String)">
            <summary>
            获取日志路径
            </summary>
            <returns></returns>
            <param name="name"></param>
        </member>
        <member name="M:Adf.LogWriter.GetFilePath">
            <summary>
            获取当前日志文件路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.LogWriter.Write(System.String,System.Object[])">
            <summary>
            写入内容
            </summary>
            <param name="content"></param>
            <param name="args">格式化数据</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.LogWriter.Write(System.String)">
            <summary>
            写入内容
            </summary>
            <param name="content"></param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.LogWriter.OnWriting(System.String)">
            <summary>
            触发写入事件
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Adf.LogWriter.WritePack(System.String,System.Object[])">
            <summary>
            记录一个打包的格式化日志记录
            </summary>
            <param name="content"></param>
            <param name="args">内容格式化串</param>
        </member>
        <member name="M:Adf.LogWriter.WriteTimeLine(System.String,System.Object[])">
            <summary>
            以时间起始的行
            </summary>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="M:Adf.LogWriter.WriteTime(System.String,System.Object[])">
            <summary>
            以时间起始的内容
            </summary>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="M:Adf.LogWriter.WriteLine(System.String,System.Object[])">
            <summary>
            按行写入记录
            </summary>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="M:Adf.LogWriter.WriteLine">
            <summary>
            写入空行
            </summary>
        </member>
        <member name="M:Adf.LogWriter.Flush">
            <summary>
            刷新缓冲区
            </summary>
        </member>
        <member name="M:Adf.LogWriter.Flush(System.Byte[])">
            <summary>
            将内容刷新至硬盘
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Adf.LogWriter.OnFlushCompleted">
            <summary>
            flush completed
            </summary>
        </member>
        <member name="M:Adf.LogWriter.WriteToConsole(System.String)">
            <summary>
            console logger
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Adf.LogWriter.GetConfig(System.String)">
            <summary>
            get config item from logconfig or appconfig, first logconfig
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LogWriter.GetConfigAsInt(System.String,System.Int32)">
            <summary>
            get type int config item
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LogWriter.LogConfigChanged(System.Object,System.EventArgs)">
            <summary>
            config change
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Adf.LogWriter.OnDisposed(System.EventArgs)">
            <summary>
            引发Disposed事件
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Adf.LogWriter.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="P:Adf.LogWriter.Level">
            <summary>
            获取或指定当前日志写书器的日志级别，默认不指定。
            </summary>
        </member>
        <member name="E:Adf.LogWriter.Writing">
            <summary>
            新写入事件
            </summary>
        </member>
        <member name="E:Adf.LogWriter.Flushed">
            <summary>
            日志存储刷新完成事件
            </summary>
        </member>
        <member name="E:Adf.LogWriter.Disposed">
            <summary>
            资源释放完成
            </summary>
        </member>
        <member name="P:Adf.LogWriter.Name">
            <summary>
            获取当前日志名称
            </summary>
        </member>
        <member name="P:Adf.LogWriter.Path">
            <summary>
            获取或设置日志存储路径
            </summary>
        </member>
        <member name="P:Adf.LogWriter.Extension">
            <summary>
            获取或设置日志文件扩展名（带点）
            </summary>
        </member>
        <member name="P:Adf.LogWriter.Encoding">
            <summary>
            获取或设置字符编码, 默认UTF8
            </summary>
        </member>
        <member name="P:Adf.LogWriter.Enable">
            <summary>
            获取或设置是否启用
            </summary>
        </member>
        <member name="P:Adf.LogWriter.ToConsole">
            <summary>
            获取或设置是否输出至 Console
            </summary>
        </member>
        <member name="P:Adf.LogWriter.ConsoleColor">
            <summary>
            获取或设置输出至Console的颜色
            </summary>
        </member>
        <member name="P:Adf.LogWriter.BufferSize">
            <summary>
            获取或设置缓冲区大小，零则不缓冲实际刷新，默认：零
            </summary>
        </member>
        <member name="P:Adf.LogWriter.BufferCount">
            <summary>
            get current cache count
            </summary>
        </member>
        <member name="P:Adf.LogWriter.IsDisposed">
            <summary>
            get is disposed
            </summary>
        </member>
        <member name="P:Adf.LogWriter.ThrowFlushError">
            <summary>
            is throw exception on flush error, default enable
            </summary>
        </member>
        <member name="P:Adf.LogWriter.Manager">
            <summary>
            get this writer parent manager
            </summary>
        </member>
        <member name="T:Adf.ProcuriosJson">
             <summary>
             This class encodes and decodes JSON strings.
             Spec. details, see http://www.json.org/
            
             JSON uses Arrays and Objects. These correspond here to the datatypes ArrayList and Hashtable.
             All numbers are parsed to doubles.
             
             download http://techblog.procurios.nl/k/618/news/view/14605/14863/How-do-I-write-my-own-parser-for-JSON.html
             
             The software is subject to the MIT license: you are free to use it in any way you like, but it must keep its license.
             
             </summary>
        </member>
        <member name="M:Adf.ProcuriosJson.JsonDecode(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An Array, a Dictionary(string,object), a double, a string, null, true, or false</returns>
        </member>
        <member name="M:Adf.ProcuriosJson.JsonDecode(System.String,System.Boolean@)">
            <summary>
            Parses the string json into a value; and fills 'success' with the successfullness of the parse.
            </summary>
            <param name="json">A JSON string.</param>
            <param name="success">Successful parse?</param>
        </member>
        <member name="M:Adf.ProcuriosJson.JsonEncode(System.Object,System.Boolean)">
            <summary>
            Converts a Hashtable / ArrayList object into a JSON string
            </summary>
            <param name="json">A Hashtable / ArrayList / Object</param>
            <param name="hex"></param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="T:Adf.Db.DbEntity">
            <summary>
            对象基类
            </summary>
        </member>
        <member name="T:Adf.Db.IDbEntity">
            <summary>
            Support Reader Import Flag
            </summary>
        </member>
        <member name="M:Adf.Db.IDbEntity.Initialize(Adf.Db.IDbReader)">
            <summary>
            import reader
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Adf.Db.DbEntity.#ctor(System.String)">
            <summary>
            初始化一实例
            </summary>
        </member>
        <member name="M:Adf.Db.DbEntity.#ctor">
            <summary>
            初始化一实例
            </summary>
        </member>
        <member name="M:Adf.Db.DbEntity.SetQuerySize(System.Int32)">
            <summary>
            设置查询影响行数
            </summary>
            <param name="size">0则不限</param>
        </member>
        <member name="M:Adf.Db.DbEntity.GetQuerySize">
            <summary>
            获取已设置的查询影响行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbEntity.SetWhereRelation(Adf.Db.WhereRelation)">
            <summary>
            设置查询时的条件关系，默认为AND关系
            </summary>
            <param name="whereRelation"></param>
        </member>
        <member name="M:Adf.Db.DbEntity.GetWhereRelation">
            <summary>
            获取已设置的查询条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbEntity.Set(System.String,System.Object)">
            <summary>
            添加或设置指定的属性
            </summary>
            <param name="Name">参数名称</param>
            <param name="Value">属性值</param>
        </member>
        <member name="M:Adf.Db.DbEntity.Remove(System.String)">
            <summary>
            移除指定的已设置属性
            </summary>
            <param name="Name">属性名称</param>
        </member>
        <member name="M:Adf.Db.DbEntity.Contains(System.String)">
            <summary>
            返回一个值,表示是否已初始或设置过指定名称的属性值
            </summary>
            <param name="Name">属性名称</param>
        </member>
        <member name="M:Adf.Db.DbEntity.GetInitializePropertyCount">
            <summary>
            返回已初始属性个数,包念标量定义与隐含定义
            </summary>
        </member>
        <member name="M:Adf.Db.DbEntity.GetString(System.String)">
            <summary>
            获取指定项的字符串格式
            </summary>
            <param name="name">属性名</param>
        </member>
        <member name="M:Adf.Db.DbEntity.Get(System.String)">
            <summary>
            获取指定的属性名,如未找到值,则会抛出异常。
            </summary>
            <param name="Name">属性名</param>
        </member>
        <member name="M:Adf.Db.DbEntity.Get``1(System.String)">
            <summary>
            获取指定的属性值。
            </summary>
            <param name="name">属性名</param>
        </member>
        <member name="M:Adf.Db.DbEntity.Get``1(System.String,``0)">
            <summary>
            获取指定的属性值。
            </summary>
            <param name="name">属性名</param>
            <param name="defaultValue">为null时或未设置时的默认值</param>
        </member>
        <member name="M:Adf.Db.DbEntity.IsNull(System.String)">
            <summary>
            判断指定的属性是否为null值
            </summary>
            <param name="name">属性名称</param>
        </member>
        <member name="M:Adf.Db.DbEntity.GetEnumerator">
            <summary>
            返回已设置属性玫举值
            </summary>
        </member>
        <member name="M:Adf.Db.DbEntity.GetPropertyNames">
            <summary>
            返回已设置属性名称集合
            </summary>
        </member>
        <member name="M:Adf.Db.DbEntity.CopyTo(Adf.Db.DbEntity)">
            <summary>
            将本对象数据复制到指定的对象
            </summary>
            <param name="target">接收数据的对象</param>
        </member>
        <member name="M:Adf.Db.DbEntity.Initialize(Adf.Db.IDbReader)">
            <summary>
            初始化数据
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Adf.Db.DbEntity.GetTableName">
            <summary>
            获取当前实体对应的表名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbEntity.SetTableName(System.String)">
            <summary>
            设置当前实体对应的表名称
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.Db.DbLogger">
            <summary>
            日志书写器
            </summary>
        </member>
        <member name="F:Adf.Db.DbLogger.Instance">
            <summary>
            默认实例
            </summary>
        </member>
        <member name="T:Adf.QueueServerClientEvent`1">
            <summary>
            客户端事件委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="client"></param>
            <param name="args"></param>
        </member>
        <member name="T:Adf.QueueServerReceiveEvent">
            <summary>
            客户端读取事件委托
            </summary>
            <param name="client"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.QueueServerClient">
            <summary>
            队列服务客户端
            </summary>
        </member>
        <member name="T:Adf.IPoolInstance">
            <summary>
            Pool Element Interface
            池实例
            </summary>
        </member>
        <member name="P:Adf.IPoolInstance.PoolAbandon">
            <summary>
            获取或设置是否废弃此实例
            </summary>
        </member>
        <member name="M:Adf.QueueServerClient.#ctor(System.String)">
            <summary>
            初始化新实例,应用指定的配置文件名称
            </summary>
            <param name="configFileName">Config 下配置文件名称</param>
        </member>
        <member name="M:Adf.QueueServerClient.#ctor(System.String,System.String)">
            <summary>
            初始化新实例,应用指定的配置文件名称
            </summary>
            <param name="configFileName">Config 下配置文件名称</param>
            <param name="prefix">当前配置前缀</param>
        </member>
        <member name="M:Adf.QueueServerClient.#ctor(System.String,System.Int32,System.String)">
            <summary>
            初始化新实例,设置拉超时时间30s
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="topic"></param>
        </member>
        <member name="M:Adf.QueueServerClient.#ctor(System.String,System.Int32,System.String,System.UInt16)">
            <summary>
            初始化新实例
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="topic"></param>
            <param name="commitTimeout">
            
            <para>commit timeout, unit: seconds;</para>
            <para>消息处理确认超时间,单位：秒;</para>
            <para>此时间用于服务器对消息判断超时恢复</para>
            <para>消息pull到后,超过此时间还未进行commit/rollback则会重新进入发送队列，并对 duplications + 1</para>
            <para>应用可通过判断 duplications 是否为零以确认该消息是第几次的复制品，第一次获取到的消息此值为零</para>
            <para>一般来说你需要对复制品进行业务上的二次调用检查</para>
            
            </param>
        </member>
        <member name="M:Adf.QueueServerClient.Connect">
            <summary>
            连接到主机
            </summary>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Adf.QueueServerException">connect failure</exception>
        </member>
        <member name="M:Adf.QueueServerClient.Connect(System.UInt16)">
            <summary>
            连接到主机
            </summary>
            <param name="timeout">连接超时时间，单位: 秒,  connect timeout , unit: seconds</param>
            <exception cref="T:System.IO.IOException">connection exception</exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Adf.QueueServerException">connect failure</exception>
        </member>
        <member name="M:Adf.QueueServerClient.Select(System.String)">
            <summary>
            使用当前提交看超时时间选择队列
            </summary>
            <param name="topic"></param>
            <exception cref="T:System.ArgumentNullException">topic is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
        </member>
        <member name="M:Adf.QueueServerClient.Select(System.String,System.UInt16)">
            <summary>
            选择队列
            </summary>
            <param name="commitTimeout"></param>
            <param name="topic"></param>
            <exception cref="T:System.ArgumentNullException">topic is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
        </member>
        <member name="M:Adf.QueueServerClient.Delete">
            <summary>
            删除队列
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
        </member>
        <member name="M:Adf.QueueServerClient.LPush(System.String)">
            <summary>
            插入一个字符消息至服务器队列前端，确认服务器已收到
            </summary>
            <param name="input"></param>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
            <returns>message id</returns>
        </member>
        <member name="M:Adf.QueueServerClient.LPush(System.Byte[])">
            <summary>
            插入一个消息至服务器队列前端，确认服务器已收到
            </summary>
            <param name="data"></param>
            <exception cref="T:System.ArgumentNullException">data is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
            <returns>message id</returns>
        </member>
        <member name="M:Adf.QueueServerClient.RPush(System.String)">
            <summary>
            推送一个字符消息至服务器队列末尾，确认服务器已收到
            </summary>
            <param name="input"></param>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
            <returns>message id</returns>
        </member>
        <member name="M:Adf.QueueServerClient.RPush(System.Byte[])">
            <summary>
            推送一个消息至服务器队列末尾，确认服务器已收到
            </summary>
            <param name="data"></param>
            <exception cref="T:System.ArgumentNullException">data is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
            <returns>message id</returns>
        </member>
        <member name="M:Adf.QueueServerClient.RPushAsync(System.Byte[],System.UInt64)">
            <summary>
            推送一个消息至服务器队列末尾，不确认服务器已收到即返回，使用此方法可通过 Ack 事件获取 发送结果
            </summary>
            <param name="data"></param>
            <param name="transferId">传输标识，允许用户自定义，该值将会ACK时回传，你可使用此值跟踪消息</param>
            <exception cref="T:System.ArgumentNullException">data is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
        </member>
        <member name="M:Adf.QueueServerClient.LPushAsync(System.Byte[],System.UInt64)">
            <summary>
            插入一个消息至服务器队列前端，不确认服务器已收到即返回，使用此方法可通过 Ack 事件获取 发送结果
            </summary>
            <param name="data"></param>
            <param name="transferId">传输标识，允许用户自定义，该值将会ACK时回传，你可使用此值跟踪消息</param>
            <exception cref="T:System.ArgumentNullException">data is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
        </member>
        <member name="M:Adf.QueueServerClient.Pull">
            <summary>
            从服务器拉取一个消息
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
            <exception cref="T:Adf.QueueServerException"></exception>
        </member>
        <member name="M:Adf.QueueServerClient.PullAsync(System.UInt64)">
            <summary>
            异步拉取一个消息，通过 PullAck 事件获取 结果
            </summary>
            <param name="transferId">传输标识，允许用户自定义，该值将会ACK时回传，你可使用此值跟踪消息</param>
            <exception cref="T:System.ArgumentNullException">data is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
        </member>
        <member name="M:Adf.QueueServerClient.Commit(System.UInt64)">
            <summary>
            提交一个消息处理完毕通知
            </summary>
            <param name="messageId"></param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
            <exception cref="T:Adf.QueueServerException"></exception>
        </member>
        <member name="M:Adf.QueueServerClient.CommitAsync(System.UInt64,System.UInt64)">
            <summary>
            提交一个消息处理完毕通知
            </summary>
            <param name="messageId"></param>
            <param name="transferId">传输标识，允许用户自定义，该值将会ACK时回传，你可使用此值跟踪消息</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
        </member>
        <member name="M:Adf.QueueServerClient.Rollback(System.UInt64)">
            <summary>
            回滚一个未提交的消息至队列，以便重新接收
            </summary>
            <param name="messageId"></param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
            <exception cref="T:Adf.QueueServerException"></exception>
        </member>
        <member name="M:Adf.QueueServerClient.RollbackAsync(System.UInt64,System.UInt64)">
            <summary>
            回滚一个未提交的消息至队列，以便重新接收
            </summary>
            <param name="messageId"></param>
            <param name="transferId">传输标识，允许用户自定义，该值将会ACK时回传，你可使用此值跟踪消息</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
            <exception cref="T:Adf.QueueServerException"></exception>
        </member>
        <member name="M:Adf.QueueServerClient.Count">
            <summary>
            获取当前队列消息数量
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
            <exception cref="T:Adf.QueueServerException"></exception>
            <returns>return message count in queue</returns>
        </member>
        <member name="M:Adf.QueueServerClient.Clear">
            <summary>
            清空队列，已被pull但未被commit/rollback的现有消息同时清空，当客户端进行commit/rollback时会返回 队列不存在的 错误提示
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
            <exception cref="T:Adf.QueueServerException"></exception>
            <returns>return message count in queue</returns>
        </member>
        <member name="M:Adf.QueueServerClient.Receive(Adf.QueueServerReceiveEvent)">
            <summary>
            <para>连续接收一系列消息,完成则commit,失败则rollback，通过返回的client.disposed停止接收。 </para>
            <para>该方法会忽略所有异常，通过ReceiveError事件捕获内部发生的异常，IOException系统自行恢复，对于非IOException异常会导致接收中断，你应对其进行修复或记录处理。</para>
            <para>注意： 此client应保持独占性，除非说明均不应再应用于其它业务</para>
            </summary>
            <param name="callback">receive callback</param>
            <exception cref="T:System.ArgumentNullException">callback is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.InvalidOperationException">client Has Been Received. a client only allow start one receive</exception>
        </member>
        <member name="M:Adf.QueueServerClient.Receive(Adf.QueueServerReceiveEvent,System.Int32)">
            <summary>
            <para>使用多个线程连续接收一系列消息,完成则commit,失败则rollback，通过返回的client.disposed停止接收。 </para>
            <para>该方法会忽略所有异常，通过ReceiveError事件捕获内部发生的异常，IOException系统自行恢复，对于非IOException异常会导致接收中断，你应对其进行修复或记录处理。</para>
            <para>注意： 此client应保持独占性，除非说明均不应再应用于其它业务</para>
            </summary>
            <param name="callback">receive callback</param>
            <param name="maxThreadSize">max thread size,value must than 0</param>
            <exception cref="T:System.ArgumentNullException">callback is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.InvalidOperationException">client Has Been Received. a client only allow start one receive</exception>
        </member>
        <member name="M:Adf.QueueServerClient.ReceiveFromConfiguration(System.String,Adf.QueueServerReceiveEvent)">
            <summary>
            使用配置初始化连续
            <para>使用配置的连接数连续接收一系列消息,完成则commit,失败则rollback，通过返回的client.disposed停止接收。 </para>
            <para>该方法会忽略所有异常，通过ReceiveError事件捕获内部发生的异常，IOException系统自行恢复，对于非IOException异常会导致接收中断，你应对其进行修复或记录处理。</para>
            <para>注意： 此返回的client应保持Pull独占性，除非说明均不应再应用于其它业务</para>
            </summary>
            <param name="configFile">配置文件名，需提供相对应的属性或配置项  commitTimeout, maxThreadSize, topic</param>
            <param name="callback">receive callback</param>
            <exception cref="T:System.ArgumentNullException">callback is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.InvalidOperationException">client Has Been Received. a client only allow start one receive</exception>
        </member>
        <member name="M:Adf.QueueServerClient.ReceiveFromConfiguration(System.String,Adf.QueueServerReceiveEvent,System.Action{Adf.QueueServerClient})">
            <summary>
            使用配置初始化连续
            <para>使用配置的连接数连续接收一系列消息,完成则commit,失败则rollback，通过返回的client.disposed停止接收。 </para>
            <para>该方法会忽略所有异常，通过ReceiveError事件捕获内部发生的异常，IOException系统自行恢复，对于非IOException异常会导致接收中断，你应对其进行修复或记录处理。</para>
            <para>注意： 此返回的client应保持Pull独占性，除非说明均不应再应用于其它业务</para>
            </summary>
            <param name="configFile">配置文件名，需提供相对应的属性或配置项  commitTimeout, maxThreadSize, topic</param>
            <param name="callback">receive callback</param>
            <param name="creatorCallback">create callback for client initalize</param>
            <exception cref="T:System.ArgumentNullException">callback is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.InvalidOperationException">client Has Been Received. a client only allow start one receive</exception>
        </member>
        <member name="M:Adf.QueueServerClient.Subscribe(System.String)">
            <summary>
            将当前主题订阅到另一个主题
            </summary>
            <param name="subscribeToTopic"></param>
            <exception cref="T:System.ArgumentNullException">topic is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
            <exception cref="T:Adf.QueueServerException"></exception>
        </member>
        <member name="M:Adf.QueueServerClient.Unsubscribe(System.String)">
            <summary>
            取消一个主题对当前主题的订阅
            </summary>
            <param name="subscribeToTopic"></param>
            <exception cref="T:System.ArgumentNullException">topic is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
            <exception cref="T:Adf.QueueServerException"></exception>
        </member>
        <member name="M:Adf.QueueServerClient.SubscribeList">
            <summary>
            获取当前主题订阅列表
            </summary>
            <exception cref="T:System.ArgumentNullException">topic is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.IO.IOException">no connect on server or network disconnected</exception>
            <returns>topic list</returns>
        </member>
        <member name="M:Adf.QueueServerClient.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="E:Adf.QueueServerClient.LPushAck">
            <summary>
            LPush ack event
            </summary>
        </member>
        <member name="E:Adf.QueueServerClient.RPushAck">
            <summary>
            RPush ack event
            </summary>
        </member>
        <member name="E:Adf.QueueServerClient.PullAck">
            <summary>
            pull ack event
            </summary>
        </member>
        <member name="E:Adf.QueueServerClient.CommitAck">
            <summary>
            commit ack event
            </summary>
        </member>
        <member name="E:Adf.QueueServerClient.RollbackAck">
            <summary>
            rollback ack event
            </summary>
        </member>
        <member name="E:Adf.QueueServerClient.ReceiveError">
            <summary>
            receive error event
            </summary>
        </member>
        <member name="E:Adf.QueueServerClient.NetworkError">
            <summary>
            Network error
            </summary>
        </member>
        <member name="P:Adf.QueueServerClient.IsConnectioned">
            <summary>
            获取一个值表示是否已连接
            </summary>
        </member>
        <member name="P:Adf.QueueServerClient.CommitTimeout">
            <summary>
            <para>获取消息处理超时时间,单位：秒, 默认： 30s</para>
            <para>get commit timeout,unit: seconds, default 30s</para>
            </summary>
        </member>
        <member name="P:Adf.QueueServerClient.Timeout">
            <summary>
            <para>获取或设置服务器响应超时时间,单位：秒, 默认: 10秒</para>
            <para>get or set server response timeout,unit: seconds, default: 10s</para>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">value allow 1-65535</exception>
        </member>
        <member name="P:Adf.QueueServerClient.Topic">
            <summary>
            get topic
            </summary>
        </member>
        <member name="P:Adf.QueueServerClient.UserState">
            <summary>
            get or set user state
            </summary>
        </member>
        <member name="P:Adf.QueueServerClient.Configuration">
            <summary>
            获取当前实例所使用的配置，通过 configFileName 初始化实例时本属性有效， 其它实例化方式下均为NULL
            </summary>
        </member>
        <member name="P:Adf.QueueServerClient.PoolAbandon">
            <summary>
            for pool use
            </summary>
        </member>
        <member name="T:Adf.QueueServerReceiveOption">
            <summary>
            receive option
            </summary>
        </member>
        <member name="F:Adf.QueueServerReceiveOption.Nothing">
            <summary>
            no nothing
            </summary>
        </member>
        <member name="F:Adf.QueueServerReceiveOption.Commit">
            <summary>
            commit
            </summary>
        </member>
        <member name="F:Adf.QueueServerReceiveOption.Rollback">
            <summary>
            rollback
            </summary>
        </member>
        <member name="T:Adf.QueueServerErrorCode">
            <summary>
            queue server error code
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.Normal">
            <summary>
            normal
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.TopicExists">
            <summary>
            topic exists
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.TopicNotExists">
            <summary>
            topic not exists
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.MessageExists">
            <summary>
            message exists
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.MessageNotExists">
            <summary>
            message not exits
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.TransferTypeInvalid">
            <summary>
            transfer type invalid
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.PacketInvalid">
            <summary>
            packet invalid
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.ServerError">
            <summary>
            server error
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.CommitTimeoutInvalid">
            <summary>
            commit timeout invalid
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.TransferIdConflict">
            <summary>
            transfer id conflict
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.ClientError">
            <summary>
            client error
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.NoPermission">
            <summary>
            no access permission
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.QueueExpired">
            <summary>
            queue is expired or rebuiled
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.ConnectionLimit">
            <summary>
            connection limit exceeded
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.ServerUnavailable">
            <summary>
            Server unavailable
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.NotSupport">
            <summary>
            command or function no support
            </summary>
        </member>
        <member name="F:Adf.QueueServerErrorCode.Prohibit">
            <summary>
            function prohibit
            </summary>
        </member>
        <member name="T:Adf.QueueServerException">
            <summary>
            queue server exception
            </summary>
        </member>
        <member name="M:Adf.QueueServerException.#ctor(Adf.QueueServerErrorCode,System.String)">
            <summary>
            initialize new instance
            </summary>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:Adf.QueueServerException.#ctor(System.String)">
            <summary>
            initialize new instance
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Adf.QueueServerException.ErrorCode">
            <summary>
            get error code
            </summary>
        </member>
        <member name="T:Adf.QueueServerAckArgs">
            <summary>
            队列服务响应结果
            </summary>
        </member>
        <member name="P:Adf.QueueServerAckArgs.ErrorCode">
            <summary>
            <para>normal is success, other is failure, failure reasons in error message </para>
            <para>normal 表示成功，忽略errorMessage, 其它均表示失败, 可通过errorMessage获取原因</para>
            </summary>
        </member>
        <member name="P:Adf.QueueServerAckArgs.ErrorMessage">
            <summary>
            <para>获取成功时的消息标识</para>
            <para>get message id after success</para>
            </summary>
        </member>
        <member name="P:Adf.QueueServerAckArgs.MessageId">
            <summary>
            <para>获取成功时的消息标识</para>
            <para>get message id after success</para>
            </summary>
        </member>
        <member name="P:Adf.QueueServerAckArgs.TransferId">
            <summary>
            <para>invoke method paramter transferId</para>
            <para>使用者调用请求方法时传入的值</para>
            </summary>
        </member>
        <member name="T:Adf.QueueServerMessageAckArgs">
            <summary>
            队列服务消息响应结果
            </summary>
        </member>
        <member name="M:Adf.QueueServerMessageAckArgs.ToString">
            <summary>
            将数据转换成字符形式
            </summary>
            <returns></returns>
        </member>
        <member name="P:Adf.QueueServerMessageAckArgs.ErrorCode">
            <summary>
            <para>normal is success, other is failure, failure reasons in error message </para>
            <para>normal 表示成功，忽略errorMessage, 其它均表示失败, 可通过errorMessage获取原因</para>
            </summary>
        </member>
        <member name="P:Adf.QueueServerMessageAckArgs.ErrorMessage">
            <summary>
            <para>获取成功时的消息标识</para>
            <para>get message id after success</para>
            </summary>
        </member>
        <member name="P:Adf.QueueServerMessageAckArgs.MessageId">
            <summary>
            <para>获取成功时的消息标识</para>
            <para>get message id after success</para>
            </summary>
        </member>
        <member name="P:Adf.QueueServerMessageAckArgs.TransferId">
            <summary>
            <para>invoke method paramter transferId</para>
            <para>使用者调用请求方法时传入的值</para>
            </summary>
        </member>
        <member name="P:Adf.QueueServerMessageAckArgs.Duplications">
            <summary>
            获取该消息被获取的次数
            </summary>
        </member>
        <member name="P:Adf.QueueServerMessageAckArgs.Data">
            <summary>
            获取消息数据
            </summary>
        </member>
        <member name="T:Adf.QueueServerMessage">
            <summary>
            队列服务消息体
            </summary>
        </member>
        <member name="M:Adf.QueueServerMessage.ToString">
            <summary>
            将数据转换成字符形式
            </summary>
            <returns></returns>
        </member>
        <member name="P:Adf.QueueServerMessage.MessageId">
            <summary>
            获取消息标识
            </summary>
        </member>
        <member name="P:Adf.QueueServerMessage.Duplications">
            <summary>
            获取该消息被获取的次数
            </summary>
        </member>
        <member name="P:Adf.QueueServerMessage.Data">
            <summary>
            获取消息数据
            </summary>
        </member>
        <member name="T:Adf.QueueServerErrorEventArgs">
            <summary>
            错误事件参数
            </summary>
        </member>
        <member name="M:Adf.QueueServerErrorEventArgs.#ctor(System.Exception)">
            <summary>
            初始化新实例
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:Adf.QueueServerErrorEventArgs.Exception">
            <summary>
            获取引发事件的异常
            </summary>
        </member>
        <member name="T:Adf.SocketConnection.ParserException">
            <summary>
            parser exception
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.ParserException.#ctor(System.String)">
            <summary>
            init new instance
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Adf.SocketConnection.ParserException.#ctor(System.String,System.Exception)">
            <summary>
            init new instance
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:Adf.ObjectHelper">
            <summary>
            object helper 
            </summary>
        </member>
        <member name="M:Adf.ObjectHelper.Dispose(System.IDisposable)">
            <summary>
            dispose a object
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Adf.ObjectHelper.TryDispose(System.IDisposable)">
            <summary>
            dispose a object and no throw error
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="T:Adf.UUIDBase58">
            <summary>
            UUID 压缩，返回16-22位长度字符串
            </summary>
        </member>
        <member name="F:Adf.UUIDBase58.ALPHABET">
            <summary>
            uuid chars
            </summary>
        </member>
        <member name="M:Adf.UUIDBase58.Encode(System.Byte[])">
            Encodes the given bytes in base58. No checksum is appended.
        </member>
        <member name="M:Adf.UUIDBase58.Decode(System.String)">
            <summary>
            base58 decode
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.IpHelper">
            <summary>
            IP 助手
            </summary>
        </member>
        <member name="M:Adf.IpHelper.IPv4ToNumber(System.String)">
            <summary>
            将IP地址转换为数值
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.IpHelper.NumberToIPv4(System.Int64)">
            <summary>
            将数值IP转换为IP地址
            </summary>
            <param name="ipCode"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.IpHelper.MaskIPv4(System.String)">
            <summary>
            将指定的IPv4，后两位替换为 *
            </summary>
            <param name="ip">IP地址</param>
        </member>
        <member name="M:Adf.IpHelper.MaskIPv4(System.String,System.Int32)">
            <summary>
            将指定的IP，除指定长度外，按*显示
            </summary>
            <param name="ip">IP地址</param>
            <param name="length">显示长度</param>
        </member>
        <member name="M:Adf.IpHelper.ParseEndPoint(System.String)">
            <summary>
            string end point convert to ep object
            </summary>
            <param name="ep"></param>
            <returns>cast failure return false</returns>
        </member>
        <member name="M:Adf.IpHelper.ParseEndPoint(System.String,System.String@,System.Int32@)">
            <summary>
            parse host:port
            </summary>
            <param name="ep"></param>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.IpHelper.ParseEndPoint(System.String,System.Int32@)">
            <summary>
            parse port
            </summary>
            <param name="portString"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.IpHelper.CheckPort(System.Int32)">
            <summary>
            check effective port
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.StreamHelper">
            <summary>
            Stream
            </summary>
        </member>
        <member name="M:Adf.StreamHelper.Receive(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            读取
            </summary>
            <param name="stream"></param>
            <param name="readSize"></param>
            <param name="bufferSize"></param>
            <exception cref="T:System.Net.Sockets.SocketException">errorCode= SocketError.Shutdown</exception>
        </member>
        <member name="M:Adf.StreamHelper.Receive(System.IO.MemoryStream,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            读取
            </summary>
            <param name="memoryStream"></param>
            <param name="receiveStream"></param>
            <param name="readSize"></param>
            <param name="bufferSize"></param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.StreamHelper.Receive(System.IO.Stream,System.Int32)">
            <summary>
            读取指定字节数
            </summary>
            <param name="stream"></param>
            <param name="readSize"></param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.StreamHelper.Receive(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            读取指定字节数至指定缓冲区
            </summary>
            <param name="stream"></param>
            <param name="readSize"></param>
            <param name="buffer"></param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.StreamHelper.ReceivePostition(System.IO.Stream,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            从流的指定位置处读取，不受流索引位置影响，不改变当前索引
            </summary>
            <param name="stream">支持索引位置调节的流</param>
            <param name="streamOffset"></param>
            <param name="readSize"></param>
            <param name="buffer"></param>
            <param name="bufferOffset"></param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.StreamHelper.Receive(System.IO.Stream,System.Int32,System.Byte[],System.Int32)">
            <summary>
             读取指定字节数填充至缓冲区指定位置
            </summary>
            <param name="stream"></param>
            <param name="readSize"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.StreamHelper.ReadLine(System.IO.Stream,System.Text.Encoding)">
            <summary>
            reads a line
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
            <returns>String that was read in</returns>
        </member>
        <member name="M:Adf.StreamHelper.ReadLine(System.IO.Stream)">
            <summary>
            reads a line
            </summary>
            <param name="stream"></param>
            <returns>String that was read in</returns>
        </member>
        <member name="M:Adf.StreamHelper.ReadSegment(System.IO.Stream)">
            <summary>
            read segment for \0
            </summary>
            <param name="input"></param>
            <returns>String that was read in</returns>
        </member>
        <member name="M:Adf.StreamHelper.ReadSegment(System.IO.Stream,System.IO.Stream)">
            <summary>
            read segment for \0
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns>String that was read in</returns>
        </member>
        <member name="M:Adf.StreamHelper.ReadLine(System.IO.Stream,System.Byte[],System.Int32@)">
            <summary>
            reads a line
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
            <param name="bufferPosition"></param>
            <returns>String that was read in</returns>
        </member>
        <member name="M:Adf.StreamHelper.TryClose(System.IO.Stream)">
            <summary>
            尝试关闭一个流
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Adf.StreamHelper.Receive(Adf.StreamReadState)">
            <summary>
            异步读取指定字节数填充至缓冲区指定位置
            </summary>
            <param name="srs"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">read length or read size error.read size not allow zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="T:Adf.PoolNewInstance`1">
            <summary>
            pool new instance action
            </summary>
            <param name="pool"></param>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="T:Adf.Pool`1">
            <summary>
            Pool Manager
            </summary>
        </member>
        <member name="M:Adf.Pool`1.#ctor(System.Int32,Adf.IPoolMember[])">
            <summary>
            initialize
            </summary>
            <param name="memberInstanceSize"></param>
            <param name="members"></param>
        </member>
        <member name="M:Adf.Pool`1.#ctor(System.Int32,Adf.IPoolMember[],System.Int32)">
            <summary>
            initialize
            </summary>
            <param name="memberInstanceSize"></param>
            <param name="members"></param>
            <param name="hash">zero disable hash, non-zero enable</param>
        </member>
        <member name="M:Adf.Pool`1.Get(System.String,System.String)">
            <summary>
            get a active element,need use using
            </summary>
            <param name="hashkey"></param>
            <param name="memberId"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Pool`1.GetMember(System.String)">
            <summary>
            获取指定成员
            </summary>
            <param name="memberId"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Pool`1.GetActiveMember">
            <summary>
            获取可用成员
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Pool`1.GetActiveHashMember(System.String)">
            <summary>
            获取可用HASH成员
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Pool`1.CreateInstance(Adf.Pool{`0}.MemberInfo,System.Int32)">
            <summary>
            创建成员实例
            </summary>
            <param name="memberInfo"></param>
            <param name="instanceIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Pool`1.ResumeHandler">
            <summary>
            resume handler
            </summary>
        </member>
        <member name="M:Adf.Pool`1.DisabledMember(Adf.Pool{`0}.MemberInfo)">
            <summary>
            禁用所有成员实例
            </summary>
            <param name="memberInfo"></param>
        </member>
        <member name="M:Adf.Pool`1.OnNewInstanceException(Adf.IPoolMember,System.Exception)">
            <summary>
            trigger NewInstanceException event
            </summary>
            <param name="item"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Adf.Pool`1.Giveback(Adf.Pool{`0}.InstanceInfo)">
            <summary>
            give instance
            </summary>
            <param name="instanceInfo"></param>
        </member>
        <member name="M:Adf.Pool`1.Call(System.Action{`0})">
            <summary>
            call
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Adf.Pool`1.Call(System.Action{`0},System.String)">
            <summary>
            call
            </summary>
            <param name="action"></param>
            <param name="hashkey">null is no hash</param>
        </member>
        <member name="M:Adf.Pool`1.Call(System.Action{`0},System.String,System.String)">
            <summary>
            call
            </summary>
            <param name="action"></param>
            <param name="hashkey">null is no hash</param>
            <param name="memberId">null is no memberid</param>
        </member>
        <member name="M:Adf.Pool`1.TryCall(System.Action{`0},System.String,System.String)">
            <summary>
            call
            </summary>
            <param name="action"></param>
            <param name="hashkey">null is no hash</param>
            <param name="memberId">null is no memberid</param>
        </member>
        <member name="M:Adf.Pool`1.CallMember(System.Action{`0},System.String)">
            <summary>
            call member
            </summary>
            <param name="action"></param>
            <param name="memberId">null is no memberid</param>
        </member>
        <member name="M:Adf.Pool`1.CallExceptionIsAbandon(System.Exception)">
            <summary>
            Call异常时指示该异常是否应禁止当前实例,默认处理 PoolAbandonException / SocketException 异常，若有其它异常处理请自行重载判断
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Adf.Pool`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="E:Adf.Pool`1.NewInstanceException">
            <summary>
            new element exception
            </summary>
        </member>
        <member name="E:Adf.Pool`1.NewInstance">
            <summary>
            new instance
            </summary>
        </member>
        <member name="P:Adf.Pool`1.RetryInspector">
            <summary>
            设置用于判断对于异常是否进行重试操作的函数，NULL 时不检查将对所有异常进行重试,  默认为 NULL， 此属性受 Retry 属性限制, 返回true表示应该启用重试，返回false表示禁止重试机制
            </summary>
        </member>
        <member name="P:Adf.Pool`1.MemberInstanceSize">
            <summary>
            pool size to member
            </summary>
        </member>
        <member name="P:Adf.Pool`1.ResumeCheckInterval">
            <summary>
            Instance Re check Seconds, Default 60, zero ignore
            实例异常恢复检测间隔
            </summary>
        </member>
        <member name="P:Adf.Pool`1.Timeout">
            <summary>
            full wait timeout,default zero, not timeout
            </summary>
        </member>
        <member name="P:Adf.Pool`1.Members">
            <summary>
            Elements
            </summary>
        </member>
        <member name="P:Adf.Pool`1.ActiveCount">
            <summary>
            Active Instance Count
            </summary>
        </member>
        <member name="P:Adf.Pool`1.RuningCount">
            <summary>
            Runing Instance Count
            </summary>
        </member>
        <member name="P:Adf.Pool`1.SupportHash">
            <summary>
            is support hash
            </summary>
        </member>
        <member name="P:Adf.Pool`1.Retry">
            <summary>
            get or set retry number for call method, zero to disable. default 3.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">value must than or equal zero. for set</exception>
        </member>
        <member name="F:Adf.Pool`1.MemberInfo.Index">
            <summary>
            成员索引
            </summary>
        </member>
        <member name="F:Adf.Pool`1.MemberInfo.Member">
            <summary>
            成员
            </summary>
        </member>
        <member name="F:Adf.Pool`1.MemberInfo.InstanceIndex">
            <summary>
            实例索引
            </summary>
        </member>
        <member name="F:Adf.Pool`1.MemberInfo.Instances">
            <summary>
            实例数组
            </summary>
        </member>
        <member name="F:Adf.Pool`1.MemberInfo.IsError">
            <summary>
            是否发生错误
            </summary>
        </member>
        <member name="M:Adf.Pool`1.MemberInfo.GetHashingIdentity">
            <summary>
            获取哈希标识
            </summary>
            <returns></returns>
        </member>
        <member name="F:Adf.Pool`1.InstanceInfo.IsActive">
            <summary>
            是否可用
            </summary>
        </member>
        <member name="F:Adf.Pool`1.InstanceInfo.MemberInfo">
            <summary>
            Pool Member
            </summary>
        </member>
        <member name="F:Adf.Pool`1.InstanceInfo.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="F:Adf.Pool`1.InstanceInfo.Index">
            <summary>
            当前实例索引
            </summary>
        </member>
        <member name="F:Adf.Pool`1.InstanceInfo.Disabled">
            <summary>
            是否禁用
            </summary>
        </member>
        <member name="T:Adf.RedisResponseException">
            <summary>
            Redis 响应异常
            </summary>
        </member>
        <member name="M:Adf.RedisResponseException.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="code"></param>
        </member>
        <member name="T:Adf.RedisAggregate">
            <summary>
            集合类型
            </summary>
        </member>
        <member name="F:Adf.RedisAggregate.SUM">
            <summary>
            和
            </summary>
        </member>
        <member name="F:Adf.RedisAggregate.MIN">
            <summary>
            最小值 
            </summary>
        </member>
        <member name="F:Adf.RedisAggregate.MAX">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:Adf.Memcache">
             <summary>
             Supports setting, adding, replacing, deleting compressed/uncompressed and
             serialized (can be stored as string if object is native class) objects to memcached.
             </summary>
             <example>
             //***To create cache client object and set params:***
             Memcache mc = new Memcache();
             
             // compression is enabled by default	
             mc.setCompressEnable(true);
            
            	// set compression threshhold to 4 KB (default: 15 KB)	
            	mc.setCompressThreshold(4096);
             
             
             //***To store an object:***
             Memcache mc = new Memcache();
             string key   = "cacheKey1";	
             object value = SomeClass.getObject();	
             mc.set(key, value);
             
             
             //***To store an object using a custom server hashCode:***
             //The set method shown here will always set the object in the cache.
             //The add and replace methods do the same, but with a slight difference.
             //  add -- will store the object only if the server does not have an entry for this key
             //  replace -- will store the object only if the server already has an entry for this key
            	Memcache mc = new Memcache();
            	string key   = "cacheKey1";	
            	object value = SomeClass.getObject();	
            	int hash = 45;
            	mc.set(key, value, hash);
             
             
             //***To delete a cache entry:***
             Memcache mc = new Memcache();
             string key   = "cacheKey1";	
             mc.delete(key);
             
             
             //***To delete a cache entry using a custom hash code:***
             Memcache mc = new Memcache();
             string key   = "cacheKey1";	
             int hash = 45;
             mc.delete(key, hashCode);
             
             
             //***To store a counter and then increment or decrement that counter:***
             Memcache mc = new Memcache();
             string key   = "counterKey";	
             mc.storeCounter(key, 100);
             Console.WriteLine("counter after adding      1: " mc.incr(key));	
             Console.WriteLine("counter after adding      5: " mc.incr(key, 5));	
             Console.WriteLine("counter after subtracting 4: " mc.decr(key, 4));	
             Console.WriteLine("counter after subtracting 1: " mc.decr(key));	
             
             
             //***To store a counter and then increment or decrement that counter with custom hash:***
             Memcache mc = new Memcache();
             string key   = "counterKey";	
             int hash = 45;	
             mc.storeCounter(key, 100, hash);
             Console.WriteLine("counter after adding      1: " mc.incr(key, 1, hash));	
             Console.WriteLine("counter after adding      5: " mc.incr(key, 5, hash));	
             Console.WriteLine("counter after subtracting 4: " mc.decr(key, 4, hash));	
             Console.WriteLine("counter after subtracting 1: " mc.decr(key, 1, hash));	
             
             
             //***To retrieve an object from the cache:***
             Memcache mc = new Memcache();
             string key   = "key";	
             object value = mc.get(key);	
            
            
             //***To retrieve an object from the cache with custom hash:***
             Memcache mc = new Memcache();
             string key   = "key";	
             int hash = 45;	
             object value = mc.get(key, hash);
             
             
             //***To retrieve an multiple objects from the cache***
             Memcache mc = new Memcache();
             string[] keys   = { "key", "key1", "key2" };
             object value = mc.getMulti(keys);
             
            
             //***To retrieve an multiple objects from the cache with custom hashing***
             Memcache mc = new Memcache();
             string[] keys    = { "key", "key1", "key2" };
             int[] hashes = { 45, 32, 44 };
             object value = mc.getMulti(keys, hashes);
             
            
             //***To flush all items in server(s)***
             Memcache mc = new Memcache();
             mc.FlushAll();
             
            
             //***To get stats from server(s)***
             Memcache mc = new Memcache();
             Hashtable stats = mc.stats();
             </example>
        </member>
        <member name="F:Adf.Memcache.NUMREGEX">
            <summary>
            NUM
            </summary>
        </member>
        <member name="M:Adf.Memcache.#ctor(System.String,System.Int32)">
            <summary>
            初始化新实例
            </summary>
        </member>
        <member name="M:Adf.Memcache.#ctor(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            初始化新实例
            </summary>
        </member>
        <member name="M:Adf.Memcache.ReadLine">
            <summary>
            reads a line
            intentionally not using the deprecated readLine method from DataInputStream 
            </summary>
            <returns>String that was read in</returns>
        </member>
        <member name="M:Adf.Memcache.Flush">
            <summary>
            flushes output stream 
            </summary>
        </member>
        <member name="M:Adf.Memcache.Write(System.Byte[])">
            <summary>
            writes a byte array to the output stream
            </summary>
            <param name="bytes">byte array to write</param>
        </member>
        <member name="M:Adf.Memcache.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            writes a byte array to the output stream
            </summary>
            <param name="bytes">byte array to write</param>
            <param name="offset">offset to begin writing from</param>
            <param name="count">count of bytes to write</param>
        </member>
        <member name="M:Adf.Memcache.Delete(System.String)">
            <summary>
            Deletes an object from cache given cache key.
            </summary>
            <param name="key">the key to be removed</param>
            <returns><c>true</c>, if the data was deleted successfully</returns>
        </member>
        <member name="M:Adf.Memcache.Delete(System.String,System.Int64)">
            <summary>
            Deletes an object from cache given cache key, a delete time, and an optional hashcode.
            
            The item is immediately made non retrievable.<br/>
            Keep in mind: 
            <see cref="M:Adf.Memcache.Add(System.String,System.Object)">add(string, object)</see> and <see cref="M:Adf.Memcache.Replace(System.String,System.Object)">replace(string, object)</see>
            will fail when used with the same key will fail, until the server reaches the
            specified time. However, <see cref="M:Adf.Memcache.Set(System.String,System.Object)">set(string, object)</see> will succeed
            and the new value will not be deleted.
            </summary>
            <param name="key">the key to be removed</param>
            <param name="timeout">seconds or unix-stamp</param>
            <returns><c>true</c>, if the data was deleted successfully</returns>
        </member>
        <member name="M:Adf.Memcache.Touch(System.String,System.Int64)">
            <summary>
            set expires for a key
            </summary>
            <param name="key">the key to be removed</param>
            <param name="expires">seconds or unix-stamp</param>
            <returns><c>true</c>, if the data was touch successfully</returns>
        </member>
        <member name="M:Adf.Memcache.Set(System.String,System.Object)">
            <summary>
            Stores data on the server; only the key and the value are specified.
            </summary>
            <param name="key">key to store data under</param>
            <param name="value">value to store</param>
            <returns>true, if the data was successfully stored</returns>
        </member>
        <member name="M:Adf.Memcache.Set(System.String,System.Object,System.Int64)">
            <summary>
            Stores data on the server; the key, value, and an expiration time are specified.
            </summary>
            <param name="key">key to store data under</param>
            <param name="value">value to store</param>
            <param name="expires">when to expire the record</param>
            <returns>true, if the data was successfully stored</returns>
        </member>
        <member name="M:Adf.Memcache.Add(System.String,System.Object)">
            <summary>
            Adds data to the server; only the key and the value are specified.
            </summary>
            <param name="key">key to store data under</param>
            <param name="value">value to store</param>
            <returns>true, if the data was successfully stored</returns>
        </member>
        <member name="M:Adf.Memcache.Add(System.String,System.Object,System.Int64)">
            <summary>
            Adds data to the server; the key, value, and an expiration time are specified.
            </summary>
            <param name="key">key to store data under</param>
            <param name="value">value to store</param>
            <param name="expires">when to expire the record</param>
            <returns>true, if the data was successfully stored</returns>
        </member>
        <member name="M:Adf.Memcache.Replace(System.String,System.Object)">
            <summary>
            Updates data on the server; only the key and the value are specified.
            </summary>
            <param name="key">key to store data under</param>
            <param name="value">value to store</param>
            <returns>true, if the data was successfully stored</returns>
        </member>
        <member name="M:Adf.Memcache.Replace(System.String,System.Object,System.Int64)">
            <summary>
            Updates data on the server; the key, value, and an expiration time are specified.
            </summary>
            <param name="key">key to store data under</param>
            <param name="value">value to store</param>
            <param name="expires">when to expire the record</param>
            <returns>true, if the data was successfully stored</returns>
        </member>
        <member name="M:Adf.Memcache.Set(System.String,System.String,System.Object,System.Int64)">
            <summary>
            Stores data to cache.
            
            If data does not already exist for this key on the server, or if the key is being
            deleted, the specified value will not be stored.
            The server will automatically delete the value when the expiration time has been reached.
            
            If compression is enabled, and the data is longer than the compression threshold
            the data will be stored in compressed form.
            
            As of the current release, all objects stored will use .NET serialization.
            </summary>
            <param name="cmdname">action to take (set, add, replace)</param>
            <param name="key">key to store cache under</param>
            <param name="obj">object to cache</param>
            <param name="expires">expiration</param>
            <returns>true/false indicating success</returns>
        </member>
        <member name="M:Adf.Memcache.Increment(System.String)">
            <summary>
            Increment the value at the specified key by 1, and then return it.
            </summary>
            <param name="key">key where the data is stored</param>
            <returns>-1, if the key is not found, the value after incrementing otherwise</returns>
        </member>
        <member name="M:Adf.Memcache.Increment(System.String,System.Int64)">
            <summary>
            Increment the value at the specified key by passed in val. 
            </summary>
            <param name="key">key where the data is stored</param>
            <param name="inc">how much to increment by</param>
            <returns>-1, if the key is not found, the value after incrementing otherwise</returns>
        </member>
        <member name="M:Adf.Memcache.Decrement(System.String)">
            <summary>
            Decrement the value at the specified key by 1, and then return it.
            </summary>
            <param name="key">key where the data is stored</param>
            <returns>-1, if the key is not found, the value after incrementing otherwise</returns>
        </member>
        <member name="M:Adf.Memcache.Decrement(System.String,System.Int64)">
            <summary>
            Decrement the value at the specified key by passed in value, and then return it.
            </summary>
            <param name="key">key where the data is stored</param>
            <param name="inc">how much to increment by</param>
            <returns>-1, if the key is not found, the value after incrementing otherwise</returns>
        </member>
        <member name="M:Adf.Memcache.IncrementOrDecrement(System.String,System.String,System.Int64)">
            <summary>
            Increments/decrements the value at the specified key by inc.
            
            Note that the server uses a 32-bit unsigned integer, and checks for
            underflow. In the event of underflow, the result will be zero.  Because
            Java lacks unsigned types, the value is returned as a 64-bit integer.
            The server will only decrement a value if it already exists;
            if a value is not found, -1 will be returned.
            
            TODO: C# has unsigned types.  We can fix this.
            </summary>
            <param name="cmdname">increment/decrement</param>
            <param name="key">cache key</param>
            <param name="inc">amount to incr or decr</param>
            <returns>new value or -1 if not exist</returns>
        </member>
        <member name="M:Adf.Memcache.Get(System.String)">
            <summary>
            Retrieve a key from the server, using a specific hash.
            
            If the data was compressed or serialized when compressed, it will automatically
            be decompressed or serialized, as appropriate. (Inclusive or)
            
            Non-serialized data will be returned as a string, so explicit conversion to
            numeric types will be necessary, if desired
            </summary>
            <param name="key">key where data is stored</param>
            <returns>the object that was previously stored, or null if it was not previously stored</returns>
        </member>
        <member name="M:Adf.Memcache.Get``1(System.String)">
            <summary>
            Retrieve a key from the server, using a specific hash.
            
            If the data was compressed or serialized when compressed, it will automatically
            be decompressed or serialized, as appropriate. (Inclusive or)
            
            Non-serialized data will be returned as a string, so explicit conversion to
            numeric types will be necessary, if desired
            </summary>
            <param name="key">key where data is stored</param>
            <returns>the object that was previously stored, or null if it was not previously stored</returns>
        </member>
        <member name="M:Adf.Memcache.Get(System.String,System.Type)">
            <summary>
            Retrieve a key from the server, using a specific hash.
            
            If the data was compressed or serialized when compressed, it will automatically
            be decompressed or serialized, as appropriate. (Inclusive or)
            
            Non-serialized data will be returned as a string, so explicit conversion to
            numeric types will be necessary, if desired
            </summary>
            <param name="key">key where data is stored</param>
            <param name="type"></param>
            <returns>the object that was previously stored, or null if it was not previously stored</returns>
        </member>
        <member name="M:Adf.Memcache.LoadItem(System.String,System.Type)">
            <summary>
            get item
            </summary>
            <param name="key"></param>
            <param name="type"></param>
        </member>
        <member name="M:Adf.Memcache.FlushAll">
            <summary>
            Invalidates the entire cache.
            
            Will return true only if succeeds in clearing all servers.
            </summary>
            <returns>success true/false</returns>
        </member>
        <member name="M:Adf.Memcache.Stats">
            <summary>
            Retrieves stats for passed in servers (or all servers).
            
            Returns a map keyed on the servername.
            The value is another map which contains stats
            with stat name as key and value as value.
            </summary>
            <returns>Stats map</returns>
        </member>
        <member name="M:Adf.Memcache.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="M:Adf.Memcache.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires"></param>
        </member>
        <member name="P:Adf.Memcache.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Adf.Memcache.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:Adf.Memcache.SendTimeout">
            <summary>
            发送超时
            </summary>
        </member>
        <member name="P:Adf.Memcache.ReadTimeout">
            <summary>
            获取或设置读取超时
            </summary>
        </member>
        <member name="P:Adf.Memcache.BinarySerializable">
            <summary>
            获取或设置二进制序列化器,默认 JsonBinarySerializable, 可通过在appsetting中配置 MemcacheBinarySerializable 来指定其它实例
            </summary>
        </member>
        <member name="P:Adf.Memcache.Encoding">
            <summary>
            Sets default string encoding when storing primitives as strings. 
            Default is UTF-8.
            </summary>
        </member>
        <member name="P:Adf.Memcache.EnableCompression">
            <summary>
            Enable storing compressed data, provided it meets the threshold requirements.
            
            If enabled, data will be stored in compressed form if it is
            longer than the threshold length set with setCompressThreshold(int)
            
            The default is that compression is enabled.
            
            Even if compression is disabled, compressed data will be automatically
            decompressed.
            </summary>
            <value><c>true</c> to enable compuression, <c>false</c> to disable compression</value>
        </member>
        <member name="P:Adf.Memcache.CompressionThreshold">
            <summary>
            Sets the required length for data to be considered for compression.
            
            If the length of the data to be stored is not equal or larger than this value, it will
            not be compressed.
            
            This defaults to 15 KB.
            </summary>
            <value>required length of data to consider compression</value>
        </member>
        <member name="P:Adf.Memcache.IsConnected">
            <summary>
            Gets whether or not the socket is connected.  Returns <c>true</c> if it is.
            </summary>
        </member>
        <member name="P:Adf.Memcache.PoolAbandon">
            <summary>
            获取或设置是否放弃此实例
            </summary>
        </member>
        <member name="T:Adf.LogManager">
            <summary>
            日志管理器,可通过Log:Disabled配置存储级别，以分号分隔，默认全开，当指定某项时则禁止, 若值为all则禁止所有日志
            </summary>
        </member>
        <member name="M:Adf.LogManager.#ctor">
            <summary>
            初始化新实例
            </summary>
        </member>
        <member name="M:Adf.LogManager.#ctor(System.String)">
            <summary>
            初始化新实例并指定名称
            </summary>
            <param name="name">日志组名称</param>
        </member>
        <member name="M:Adf.LogManager.#ctor(System.String,System.String)">
            <summary>
            初始化新实例并指定名称
            </summary>
            <param name="name">日志组名称</param>
            <param name="path">当为Null时，若配置(AppSetting)Log:Path则为配置值，否则以当前应用程序目录下Log为目录</param>
        </member>
        <member name="M:Adf.LogManager.Each(System.Action{Adf.LogWriter})">
            <summary>
            循环调用当前被托管的每个日志写入器
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Adf.LogManager.ForEach(System.Action{Adf.LogWriter})">
            <summary>
            循环当前每个日志写入器
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Adf.LogManager.CreateAsyncWriter(System.String)">
            <summary>
            <para>创建一个非托管的异步日志书写器，书写器使用完成应调用LogWriter.Dispose方法释放资源</para>
            <para>此方法适用于日志名称与路径变化频繁，或要求非实时写入，日志数量巨量的场景</para>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LogManager.CreateAsyncWriter(System.String,System.String)">
            <summary>
            <para>创建一个非托管的异步日志书写器，书写器使用完成应调用LogWriter.Dispose方法释放资源</para>
            <para>此方法适用于日志名称与路径变化频繁，或要求非实时写入，日志数量巨量的场景</para>
            <para>可通过配置Log:AsynBuffer来指定初始缓冲区大小,默认4096</para>
            </summary>
            <param name="path"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LogManager.GetExceptionWriter(System.Exception)">
            <summary>
            get exception logmanager, 受全局配置参数 Log:Disabled:Exception 影响
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LogManager.GetWriter(System.String)">
            <summary>
            <para>获取一个拖管日志写书器， 写书器由本管理器托管进行FlushInterval间隔刷新， LogWriter.Dispose方法被管理器托管，无需独立调用</para>
            <para>此方法适用于日志名称相对确定的托管日志数量小于1万场景</para>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LogManager.Exception(System.Exception)">
            <summary>
            异常记录
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Adf.LogManager.SendExceptionMail(System.Exception)">
            <summary>
            发送异常邮件
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Adf.LogManager.SetFlushInterval(System.Int32)">
            <summary>
            设置刷新间隔时间
            </summary>
            <param name="interval">以秒为单位的数值</param>
        </member>
        <member name="M:Adf.LogManager.Enable(System.Boolean)">
            <summary>
            设置是否开启日志
            </summary>
        </member>
        <member name="M:Adf.LogManager.Flush">
            <summary>
            刷新并存储所有缓冲区内容，该方法一般在应用结束或需要批量将数据存储时使用
            </summary>
        </member>
        <member name="M:Adf.LogManager.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="M:Adf.LogManager.WritingEvent(System.Object,Adf.LogEventArgs)">
            <summary>
            中转输出事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Adf.LogManager.GetConfig(System.String)">
            <summary>
            get config item from logconfig or appconfig, first logconfig
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LogManager.GetConfigAsInt(System.String,System.Int32)">
            <summary>
            get type int config item
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="E:Adf.LogManager.Writing">
            <summary>
            新写入事件
            </summary>
        </member>
        <member name="E:Adf.LogManager.NewException">
            <summary>
            新异常
            </summary>
        </member>
        <member name="E:Adf.LogManager.AsyncError">
            <summary>
            异步存储异常时
            </summary>
        </member>
        <member name="P:Adf.LogManager.Name">
            <summary>
            获取日志组名称
            </summary>
        </member>
        <member name="P:Adf.LogManager.Message">
            <summary>
            获取消息日志记录器, 受全局配置参数 Log:Disabled:Message 影响
            </summary>
        </member>
        <member name="P:Adf.LogManager.Warning">
            <summary>
            获取警告日志记录器, 受全局配置参数 Log:Disabled:Warning 影响
            </summary>
        </member>
        <member name="P:Adf.LogManager.Error">
            <summary>
            获取错误日志记录器, 受全局配置参数 Log:Disabled:Error 影响
            </summary>
        </member>
        <member name="P:Adf.LogManager.Debug">
            <summary>
            获取调试日志记录器, 受全局配置参数 Log:Disabled:Debug 影响
            </summary>
        </member>
        <member name="P:Adf.LogManager.NewExceptionToMail">
            <summary>
            获取新异常时是否发送至邮件（若邮件已配置）,默认开启
            </summary>
        </member>
        <member name="P:Adf.LogManager.ToConsole">
            <summary>
            获取或设置是否输出至Console
            </summary>
        </member>
        <member name="P:Adf.LogManager.Path">
            <summary>
            获取或设置存储路径
            </summary>
        </member>
        <member name="P:Adf.LogManager.ThrowFlushError">
            <summary>
            获取或设置刷新数据至硬盘时是否抛出异常，默认启用
            </summary>
        </member>
        <member name="P:Adf.LogManager.IsOwnner">
            <summary>
            获取是否具有日志组，当初始name为空时此值为false,否则为true
            </summary>
        </member>
        <member name="P:Adf.LogManager.AllDisabled">
            <summary>
            获取是否已配置全部禁用，当配置Log:Disabled为all时此值为true
            </summary>
        </member>
        <member name="P:Adf.LogManager.FlushInterval">
            <summary>
            获取刷新间隔时间,单位：秒，配置项 Log:FlushInterval
            </summary>
        </member>
        <member name="T:Adf.Db.ParameterCallback">
            <summary>
            参数操作相关委托
            </summary>
        </member>
        <member name="T:Adf.Config.GlobalConfig">
            <summary>
            配置管理器员
            </summary>
        </member>
        <member name="T:Adf.Config.ConfigValue">
            <summary>
            字符型配置项
            </summary>
        </member>
        <member name="M:Adf.Config.ConfigValue.#ctor(System.String)">
            <summary>
            初始化新实例
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Adf.Config.ConfigValue.NewItem(System.Xml.XmlNode)">
            <summary>
            新项
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigValue.GetFormat(System.String,System.Object[])">
            <summary>
            获取一个字符串型配置并进行格式化操作
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigValue.GetString(System.String,System.String)">
            <summary>
            获取一个字符串型配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigValue.GetInt16(System.String,System.Int16)">
            <summary>
            获取一个整型值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigValue.GetInt32(System.String,System.Int32)">
            <summary>
            获取一个整型值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigValue.GetInt64(System.String,System.Int64)">
            <summary>
            获取一个长整型值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigValue.GetUInt16(System.String,System.UInt16)">
            <summary>
            获取一个整型值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigValue.GetUInt32(System.String,System.UInt32)">
            <summary>
            获取一个整型值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigValue.GetUInt64(System.String,System.UInt64)">
            <summary>
            获取一个长整型值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigValue.GetBoolean(System.String,System.Boolean)">
            <summary>
            获取一个布尔值配置
            </summary>
            <param name="name"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigValue.GetAndSetting(System.String,System.String)">
            <summary>
            获取指定配置项，若存在Setting配置，则由Setting配置优先
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="F:Adf.Config.GlobalConfig.Instance">
            <summary>
            获取配置实例
            </summary>
        </member>
        <member name="M:Adf.Config.GlobalConfig.#ctor">
            <summary>
            Global Config
            </summary>
        </member>
        <member name="T:Adf.RedisPubSub">
            <summary>
            发布与订阅
            </summary>
        </member>
        <member name="M:Adf.RedisPubSub.Publish(System.String,System.String)">
            <summary>
            设置一个二进制值
            </summary>
            <param name="channel"></param>
            <param name="value">值对空格与双引号数据敏感，若值包含空格或引号，请使用base64进行编码后传输，订阅时进行解码</param>
            <returns>received client count</returns>
        </member>
        <member name="M:Adf.RedisPubSub.Subscribe(System.Action{Adf.RedisSubscribeResult},System.String[])">
            <summary>
            订阅指定KEY的消息，使用此方法请确保此实例仅会被当次使用
            </summary>
            <param name="channels"></param>
            <param name="resultCallback"></param>
        </member>
        <member name="M:Adf.RedisPubSub.PUBSUB">
            <summary>
            查看订阅与发布系统状态,返回活跃频道组成的列表。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Adf.CRC32Helper">
            <summary>
            CRC 32 助手
            </summary>
        </member>
        <member name="M:Adf.CRC32Helper.Encode(System.String)">
            <summary>
            进行CRC32加密
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.CRC32Helper.Encode(System.String,System.Text.Encoding)">
            <summary>
            进行CRC32加密
            </summary>
            <param name="text"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.CRC32Helper.Encode(System.Byte[])">
            <summary>
            进行CRC32加密
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.CRC32Helper.UEncode(System.String)">
            <summary>
            进行CRC32加密
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.CRC32Helper.UEncode(System.String,System.Text.Encoding)">
            <summary>
            进行CRC32加密
            </summary>
            <param name="text"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.CRC32Helper.UEncode(System.Byte[])">
            <summary>
            进行CRC32加密
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.MemberPoolCreater`1">
            <summary>
            成员对象创建委托
            </summary>
            <returns></returns>
        </member>
        <member name="T:Adf.MemberPool`1">
            <summary>
            实例池管理器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Adf.MemberPool`1.Creater">
            <summary>
            成员创建方法
            </summary>
        </member>
        <member name="M:Adf.MemberPool`1.#ctor(System.Int32)">
            <summary>
            初始化新实例
            </summary>
            <param name="maxMemberCount">允许创建的最大成员数</param>
        </member>
        <member name="M:Adf.MemberPool`1.Get">
            <summary>
            从池中取出一个实例，若无可用成员则无限等待至有可用成员时
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.MemberPool`1.Get(System.Int32)">
            <summary>
            从池中取出一个实例，若无可用成员则等待至有可用成员时，当超过指定超时时间还无可用成员则引发超时异常
            </summary>
            <param name="millisecondsTimeout"></param>
            <exception cref="T:System.TimeoutException">get available member timeout</exception>
            <returns></returns>
        </member>
        <member name="M:Adf.MemberPool`1.Put(`0)">
            <summary>
            归还一个可用实例入池（不可用实例应调用 discard 方法进行废弃）
            </summary>
            <param name="member"></param>
            <exception cref="T:Adf.MemberPoolException">pool full</exception>
        </member>
        <member name="M:Adf.MemberPool`1.Discard">
            <summary>
            废弃一个实例，使池重新创建一个新对象(若实例可用应调用 put 进行归还）
            </summary>
            <exception cref="T:Adf.MemberPoolException">pool full</exception>
        </member>
        <member name="M:Adf.MemberPool`1.GetMembers">
            <summary>
            获取当前全部成员
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.MemberPool`1.Dispose">
            <summary>
            释放实现了IDispose接口且未被取出成员资源
            </summary>
        </member>
        <member name="P:Adf.MemberPool`1.MaxMemberCount">
            <summary>
            获取允许的最大成员数
            </summary>
        </member>
        <member name="P:Adf.MemberPool`1.AvailableCount">
            <summary>
            获取可用成员数
            </summary>
        </member>
        <member name="T:Adf.MemberPoolException">
            <summary>
            MemberPool Exception 
            </summary>
        </member>
        <member name="M:Adf.MemberPoolException.#ctor(System.String)">
            <summary>
            initialize a new instance
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Adf.IO.BinaryReaderLE">
            <summary>
            字节读取器(Little Endian)
            </summary>
            <exception cref="T:System.IO.IOException">全系列读取方法均有可能引发此异常。</exception>
        </member>
        <member name="M:Adf.IO.IBinaryReader.ReadByte">
            <summary>
            读取一个字节
            </summary>
        </member>
        <member name="M:Adf.IO.IBinaryReader.ReadBytes(System.Int32)">
            <summary>
            读取一个字节组
            </summary>
            <param name="length">读取长度</param>
            <returns></returns>
        </member>
        <member name="M:Adf.IO.IBinaryReader.Read(System.Byte[])">
            <summary>
            读取内容至缓冲区，数量为缓冲区长度
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Adf.IO.IBinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取内容至缓冲区，指定读取长度
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:Adf.IO.BinaryReaderLE.Dispose">
            <summary>
            清理资源（不会清理初始传入的流）
            </summary>
        </member>
        <member name="P:Adf.IO.BinaryReaderLE.Stream">
            <summary>
            get stream
            </summary>
        </member>
        <member name="P:Adf.IO.BinaryReaderLE.Encoding">
            <summary>
            get encoding
            </summary>
        </member>
        <member name="T:Adf.HashItemPool`1">
            <summary>
            hash item pool
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Adf.HashItemPool`1.#ctor(System.Int32)">
            <summary>
            initialize new instance
            </summary>
            <param name="bucketSize"></param>
        </member>
        <member name="M:Adf.HashItemPool`1.Get(System.Int32)">
            <summary>
            get a item
            </summary>
            <param name="hashCode"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">invalid invoke, no set Creater property.</exception>
        </member>
        <member name="M:Adf.HashItemPool`1.Put(System.Int32,`0)">
            <summary>
            put a item
            </summary>
            <param name="hashCode"></param>
            <param name="item"></param>
        </member>
        <member name="M:Adf.HashItemPool`1.ForEach(System.Action{`0})">
            <summary>
            for each all item
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Adf.HashItemPool`1.LoopRemove(System.Action{`0})">
            <summary>
            loop all item and remove item
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:Adf.HashItemPool`1.BucketSize">
            <summary>
            get bucket size
            </summary>
        </member>
        <member name="P:Adf.HashItemPool`1.Creater">
            <summary>
            get or set creater
            </summary>
            <exception cref="T:System.ArgumentNullException">value is null</exception>
        </member>
        <member name="P:Adf.HashItemPool`1.IsSynchronized">
            <summary>
            get or set synchronize state
            </summary>
        </member>
        <member name="T:Adf.PoolNewInstanceExceptionEventArgs">
            <summary>
            Pool Item New Element Info
            </summary>
        </member>
        <member name="P:Adf.PoolNewInstanceExceptionEventArgs.Item">
            <summary>
            item
            </summary>
        </member>
        <member name="P:Adf.PoolNewInstanceExceptionEventArgs.Exception">
            <summary>
            exception
            </summary>
        </member>
        <member name="T:Adf.EncodingHelper">
            <summary>
            字符编码助手
            </summary>
        </member>
        <member name="F:Adf.EncodingHelper.GB2312Encoding">
            <summary>
            GB2312 Encoding
            </summary>
        </member>
        <member name="M:Adf.EncodingHelper.GetConfigEncoding(System.String,System.Text.Encoding)">
            <summary>
            获取配置中的字符编码
            </summary>
            <param name="appSettingKey"></param>
            <param name="defaultEncoding"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.TimesecondHelper">
            <summary>
            时间秒值,描述自 0001-01-01 00:00:00 UTC 起至今秒值
            </summary>
        </member>
        <member name="M:Adf.TimesecondHelper.ToTimesecond">
            <summary>
            返回当前时间的时间秒值
            </summary>
        </member>
        <member name="M:Adf.TimesecondHelper.ToTimesecond(System.DateTime)">
            <summary>
            返回指定时间的时间秒值
            </summary>
            <param name="time">要返回的基础时间</param>
        </member>
        <member name="M:Adf.TimesecondHelper.ToTimesecond(System.Int64)">
            <summary>
            根据.net时间戳转为时间秒值
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.TimesecondHelper.ToDateTime(System.Int64)">
            <summary>
            将时间秒值转换为时间对象
            </summary>
            <param name="timesecond">时间秒值</param>
        </member>
        <member name="T:Adf.RedisClient">
            <summary>
            Redis 客户端
            </summary>
        </member>
        <member name="M:Adf.RedisClient.#ctor(System.String,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:Adf.RedisClient.#ctor(System.String)">
            <summary>
            初始化实例
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Adf.RedisClient.#ctor">
            <summary>
            初始化默认实例
            </summary>
        </member>
        <member name="M:Adf.RedisClient.Select(System.Int32)">
            <summary>
            设置当前要操作的DB
            </summary>
            <param name="dbIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Set(System.String,System.String)">
            <summary>
            设置一个字符串值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Adf.RedisClient.Set(System.String,System.Byte[])">
            <summary>
            设置一个二进制值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Adf.RedisClient.Set(System.String,System.Object)">
            <summary>
            设置一个对象
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Adf.RedisClient.Append(System.String,System.String)">
            <summary>
            设置一个二进制值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>返回文本新长度</returns>
        </member>
        <member name="M:Adf.RedisClient.SetNX(System.String,System.String)">
            <summary>
            设置一个值，当键已存在时则忽略
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.SetNX(System.String,System.Byte[])">
            <summary>
            设置一个值，当键已存在时则忽略
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.SetEX(System.String,System.String,System.Int32)">
            <summary>
            设置一个值并指定过期时间
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.SetEX(System.String,System.Byte[],System.Int32)">
            <summary>
            设置一个值并指定过期时间
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Set(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            设置一组字符串(MSET)
            </summary>
            <param name="dict"></param>
        </member>
        <member name="M:Adf.RedisClient.Set(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            设置一组数据(MSET)
            </summary>
            <param name="dict"></param>
        </member>
        <member name="M:Adf.RedisClient.GetBytes(System.String)">
            <summary>
            获取节字数组
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Get(System.String)">
            <summary>
            获取字符串结果
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.GetSet(System.String,System.Byte[])">
            <summary>
            获取并设置一个新值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.GetSet(System.String,System.String)">
            <summary>
            获取并设置一个新值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Exists(System.String)">
            <summary>
            确认一个键是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Remove(System.String)">
            <summary>
            删除一个键
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Remove(System.String[])">
            <summary>
            删除一批键
            </summary>
            <param name="keys"></param>
            <returns>返回删除的个数</returns>
        </member>
        <member name="M:Adf.RedisClient.Increment(System.String)">
            <summary>
            自加一
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Increment(System.String,System.Int32)">
            <summary>
            自加一个数值
            </summary>
            <param name="key"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Decrement(System.String)">
            <summary>
            自减一
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Decrement(System.String,System.Int32)">
            <summary>
            自减指定数值
            </summary>
            <param name="key"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Length(System.String)">
            <summary>
            获取一个键值长度
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.TypeOf(System.String)">
            <summary>
            获取键类型
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.RandomKey">
            <summary>
            随机获取一个键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Rename(System.String,System.String)">
            <summary>
            重命名一个键
            </summary>
            <param name="oldKeyname"></param>
            <param name="newKeyname"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Expire(System.String,System.Int32)">
            <summary>
            设置键过期间隔
            </summary>
            <param name="key"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.ExpireAt(System.String,System.Int32)">
            <summary>
            设置键绝对过期时间
            </summary>
            <param name="key"></param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.TTL(System.String)">
            <summary>
            获取一个键的TTL值
            </summary>
            <param name="key"></param>
            <returns>
            The command returns -2 if the key does not exist.
            The command returns -1 if the key exists but has no associated expire.
            </returns>
        </member>
        <member name="M:Adf.RedisClient.GetDbSize">
            <summary>
            获取数据库大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Save">
            <summary>
            保存
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.BackgroundSave">
            <summary>
            背景保存
            </summary>
        </member>
        <member name="M:Adf.RedisClient.Shutdown">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:Adf.RedisClient.FlushAll">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:Adf.RedisClient.FlushDb">
            <summary>
            清空当前DB
            </summary>
        </member>
        <member name="M:Adf.RedisClient.LastSave">
            <summary>
            获取最后保存时间
            </summary>
        </member>
        <member name="M:Adf.RedisClient.GetInfo">
            <summary>
            获取服务器信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.GetKeys">
            <summary>
            获取所有键列表
            </summary>
        </member>
        <member name="M:Adf.RedisClient.GetKeys(System.String)">
            <summary>
            获取匹配的键列表
            </summary>
            <param name="pattern">匹配规则</param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.GetKeys(System.String[])">
            <summary>
            获取键的字符串值列表
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.GetByteKeys(System.String[])">
            <summary>
            获取键键值列表
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="M:Adf.RedisClient.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置一个值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires">过期时间（以秒为时间单位）</param>
        </member>
        <member name="M:Adf.RedisClient.Get``1(System.String)">
            <summary>
            获取一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Get(System.String,System.Type)">
            <summary>
            设置一个对象
            </summary>
            <param name="type"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClient.Delete(System.String)">
            <summary>
            删除一个缓存值
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Adf.RedisClient.Connection">
            <summary>
            连接
            </summary>
        </member>
        <member name="P:Adf.RedisClient.BinarySerializable">
            <summary>
            获取或设置二进制序列化器,默认 JsonBinarySerializable, 可通过在appsetting中配置 RedisClientBinarySerializable 来指定其它实例
            </summary>
        </member>
        <member name="P:Adf.RedisClient.PoolAbandon">
            <summary>
            是否从池中废弃此实例
            </summary>
        </member>
        <member name="P:Adf.RedisClient.Encoding">
            <summary>
            字符编码
            </summary>
        </member>
        <member name="P:Adf.RedisClient.Sets">
            <summary>
            获取集合
            </summary>
        </member>
        <member name="P:Adf.RedisClient.SortedSets">
            <summary>
            获取有序集合
            </summary>
        </member>
        <member name="P:Adf.RedisClient.Lists">
            <summary>
            获取列表
            </summary>
        </member>
        <member name="P:Adf.RedisClient.Hashs">
            <summary>
            获取哈希表
            </summary>
        </member>
        <member name="P:Adf.RedisClient.HyperLogLog">
            <summary>
            HyperLogLog
            </summary>
        </member>
        <member name="P:Adf.RedisClient.PubSub">
            <summary>
            Pub/Sub 发布与订阅
            </summary>
        </member>
        <member name="P:Adf.RedisClient.DB">
            <summary>
            获取当前DB 
            </summary>
        </member>
        <member name="T:Adf.AuthcodeHelper">
            <summary>
            基本类型
            </summary>
        </member>
        <member name="M:Adf.AuthcodeHelper.CreateImage(System.IO.Stream,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建一个图片,图片类型Gif
            </summary>
            <param name="outputStream"></param>
            <param name="code"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="fontSize"></param>
        </member>
        <member name="M:Adf.AuthcodeHelper.CreateImage(System.IO.Stream,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建一个图片,图片类型Gif
            </summary>
            <param name="outputStream"></param>
            <param name="code"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="fontSize"></param>
            <param name="noiseCount"></param>
        </member>
        <member name="F:Adf.AuthcodeHelper.BrushItems">
            <summary>
            画笔
            </summary>
        </member>
        <member name="M:Adf.AuthcodeHelper.CreateImage2(System.IO.Stream,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建一个图片,图片类型Gif
            </summary>
            <param name="outputStream"></param>
            <param name="code"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="fontSize"></param>
            <param name="noiseCount"></param>
        </member>
        <member name="T:Adf.ThreadTasks">
            <summary>
            线程任务
            </summary>
        </member>
        <member name="M:Adf.ThreadTasks.ProcessTask(System.Int32,System.Int32,System.Object,Adf.ThreadTasks.TaskCallback)">
            <summary>
            多线程同步执行一个任务
            </summary>
            <param name="taskCount"></param>
            <param name="threadCount"></param>
            <param name="state"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Adf.ThreadTasks.ProcessTask(System.Int32,System.Object,Adf.ThreadTasks.TaskCallback[])">
            <summary>
            多线程同步执行一组任务并待所有任务完成
            </summary>
            <param name="maxThreadCount"></param>
            <param name="callbacks"></param>
            <param name="state"></param>
        </member>
        <member name="M:Adf.ThreadTasks.ProcessTask(System.Object,Adf.ThreadTasks.TaskCallback[])">
            <summary>
            多线程同步执行一组任务并待所有任务完成，使用此方法执行任务数量不应过大，建议小于64
            </summary>
            <param name="state"></param>
            <param name="callbacks"></param>
        </member>
        <member name="T:Adf.ThreadTasks.TaskCallback">
            <summary>
            任务执行回调
            </summary>
            <param name="state"></param>
            <param name="index"></param>
        </member>
        <member name="T:Adf.NumberBaseEncode">
            <summary>
            基础数字压缩编码
            </summary>
        </member>
        <member name="M:Adf.NumberBaseEncode.#ctor">
            <summary>
            使用默认字符集初始新实例
            </summary>
        </member>
        <member name="M:Adf.NumberBaseEncode.#ctor(System.String)">
            <summary>
            初始实例并指定压缩字符集
            </summary>
            <param name="chars"></param>
        </member>
        <member name="M:Adf.NumberBaseEncode.Encode(System.Int64)">
            <summary>
            将数字进行字符编码
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.NumberBaseEncode.Decode(System.String)">
            <summary>
            将已编码的字符还原为数字
            </summary>
            <param name="encodeValue"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.NumberBaseEncode.Chars">
            <summary>
            字符集
            </summary>
        </member>
        <member name="P:Adf.NumberBaseEncode.Length">
            <summary>
            字符集长度
            </summary>
        </member>
        <member name="T:Adf.ConfigException">
            <summary>
            adf config exception
            </summary>
        </member>
        <member name="M:Adf.ConfigException.#ctor(System.String)">
            <summary>
            initialize new instance
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Adf.ProcuriosJson2">
             <summary>
             This class encodes and decodes JSON strings.
             Spec. details, see http://www.json.org/
            
             JSON uses Arrays and Objects. These correspond here to the datatypes ArrayList and Hashtable.
             All numbers are parsed to doubles.
             
             download http://techblog.procurios.nl/k/618/news/view/14605/14863/How-do-I-write-my-own-parser-for-JSON.html
             
             The software is subject to the MIT license: you are free to use it in any way you like, but it must keep its license.
             
             </summary>
        </member>
        <member name="M:Adf.ProcuriosJson2.JsonDecode(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An Array, a hashtable, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:Adf.ProcuriosJson2.JsonDecode(System.String,System.Boolean@)">
            <summary>
            Parses the string json into a value; and fills 'success' with the successfullness of the parse.
            </summary>
            <param name="json">A JSON string.</param>
            <param name="success">Successful parse?</param>
            <returns>An ArrayList, a Hashtable, a double, a string, null, true, or false</returns>
        </member>
        <member name="T:Adf.SessionClient">
            <summary>
            session client
            </summary>
        </member>
        <member name="T:Adf.MemcachePool">
            <summary>
            Memcache池
            </summary>
        </member>
        <member name="M:Adf.MemcachePool.#ctor">
            <summary>
            根据默认配置初始化新实例
            </summary>
        </member>
        <member name="M:Adf.MemcachePool.#ctor(System.String)">
            <summary>
            根据指定配置初始化新实例
            </summary>
            <param name="configName"></param>
        </member>
        <member name="M:Adf.MemcachePool.#ctor(Adf.MemcachePoolMember[])">
            <summary>
            根据指定成员初始化新实例
            </summary>
            <param name="mpms"></param>
        </member>
        <member name="M:Adf.MemcachePool.#ctor(Adf.MemcachePoolMember[],System.Int32,System.Int32)">
            <summary>
            根据指定成员初始化新实例
            </summary>
            <param name="mpms"></param>
            <param name="memberPoolSize"></param>
            <param name="hash">zero disable hash, non-zero enable</param>
        </member>
        <member name="M:Adf.MemcachePool.Adf#ICache#Set(System.String,System.Object,System.Int32)">
            <summary>
            设置一个对象
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires"></param>
        </member>
        <member name="M:Adf.MemcachePool.Get(System.String)">
            <summary>
            获取一个字符值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.MemcachePool.Get``1(System.String)">
            <summary>
            获取一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.MemcachePool.Get(System.String,System.Type)">
            <summary>
            获取一个对象
            </summary>
            <param name="type"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.MemcachePool.Adf#ICache#Delete(System.String)">
            <summary>
            移除一个键
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Adf.MemcachePool.Delete(System.String)">
            <summary>
            Deletes an object from cache given cache key.
            </summary>
            <param name="key">the key to be removed</param>
            <returns><c>true</c>, if the data was deleted successfully</returns>
        </member>
        <member name="M:Adf.MemcachePool.Delete(System.String,System.Int64)">
            <summary>
            Deletes an object from cache given cache key, a delete time, and an optional hashcode.
            
            The item is immediately made non retrievable.<br/>
            Keep in mind: 
            <see cref="M:Adf.MemcachePool.Add(System.String,System.Object)">add(string, object)</see> and <see cref="M:Adf.MemcachePool.Replace(System.String,System.Object)">replace(string, object)</see>
            will fail when used with the same key will fail, until the server reaches the
            specified time. However, <see cref="M:Adf.MemcachePool.Set(System.String,System.Object)">set(string, object)</see> will succeed
            and the new value will not be deleted.
            </summary>
            <param name="key">the key to be removed</param>
            <param name="timeout">seconds or unix-stamp</param>
            <returns><c>true</c>, if the data was deleted successfully</returns>
        </member>
        <member name="M:Adf.MemcachePool.Touch(System.String,System.Int64)">
            <summary>
            set expires for a key
            </summary>
            <param name="key">the key to be removed</param>
            <param name="expires">seconds or unix-stamp</param>
            <returns><c>true</c>, if the data was touch successfully</returns>
        </member>
        <member name="M:Adf.MemcachePool.Set(System.String,System.Object)">
            <summary>
            Stores data on the server; only the key and the value are specified.
            </summary>
            <param name="key">key to store data under</param>
            <param name="value">value to store</param>
            <returns>true, if the data was successfully stored</returns>
        </member>
        <member name="M:Adf.MemcachePool.Set(System.String,System.Object,System.Int64)">
            <summary>
            Stores data on the server; the key, value, and an expiration time are specified.
            </summary>
            <param name="key">key to store data under</param>
            <param name="value">value to store</param>
            <param name="expires">when to expire the record</param>
            <returns>true, if the data was successfully stored</returns>
        </member>
        <member name="M:Adf.MemcachePool.Add(System.String,System.Object)">
            <summary>
            Adds data to the server; only the key and the value are specified.
            </summary>
            <param name="key">key to store data under</param>
            <param name="value">value to store</param>
            <returns>true, if the data was successfully stored</returns>
        </member>
        <member name="M:Adf.MemcachePool.Add(System.String,System.Object,System.Int64)">
            <summary>
            Adds data to the server; the key, value, and an expiration time are specified.
            </summary>
            <param name="key">key to store data under</param>
            <param name="value">value to store</param>
            <param name="expires">when to expire the record</param>
            <returns>true, if the data was successfully stored</returns>
        </member>
        <member name="M:Adf.MemcachePool.Replace(System.String,System.Object)">
            <summary>
            Updates data on the server; only the key and the value are specified.
            </summary>
            <param name="key">key to store data under</param>
            <param name="value">value to store</param>
            <returns>true, if the data was successfully stored</returns>
        </member>
        <member name="M:Adf.MemcachePool.Replace(System.String,System.Object,System.Int64)">
            <summary>
            Updates data on the server; the key, value, and an expiration time are specified.
            </summary>
            <param name="key">key to store data under</param>
            <param name="value">value to store</param>
            <param name="expires">when to expire the record</param>
            <returns>true, if the data was successfully stored</returns>
        </member>
        <member name="M:Adf.MemcachePool.Increment(System.String)">
            <summary>
            Increment the value at the specified key by 1, and then return it.
            </summary>
            <param name="key">key where the data is stored</param>
            <returns>-1, if the key is not found, the value after incrementing otherwise</returns>
        </member>
        <member name="M:Adf.MemcachePool.Increment(System.String,System.Int64)">
            <summary>
            Increment the value at the specified key by passed in val. 
            </summary>
            <param name="key">key where the data is stored</param>
            <param name="inc">how much to increment by</param>
            <returns>-1, if the key is not found, the value after incrementing otherwise</returns>
        </member>
        <member name="M:Adf.MemcachePool.Decrement(System.String)">
            <summary>
            Decrement the value at the specified key by 1, and then return it.
            </summary>
            <param name="key">key where the data is stored</param>
            <returns>-1, if the key is not found, the value after incrementing otherwise</returns>
        </member>
        <member name="M:Adf.MemcachePool.Decrement(System.String,System.Int64)">
            <summary>
            Decrement the value at the specified key by passed in value, and then return it.
            </summary>
            <param name="key">key where the data is stored</param>
            <param name="inc">how much to increment by</param>
            <returns>-1, if the key is not found, the value after incrementing otherwise</returns>
        </member>
        <member name="P:Adf.MemcachePool.Pool">
            <summary>
            获取池管理对象
            </summary>
        </member>
        <member name="P:Adf.MemcachePool.Name">
            <summary>
            配置节点名
            </summary>
        </member>
        <member name="P:Adf.MemcachePool.MemberPoolSize">
            <summary>
            获取每成员的最大实例数
            </summary>
        </member>
        <member name="F:Adf.SessionClient.MAX_TTL">
            <summary>
            max ttl (2592000)
            </summary>
        </member>
        <member name="F:Adf.SessionClient.Instance">
            <summary>
            获取SessionServer实例,对应配置节SessionServer
            </summary>
        </member>
        <member name="M:Adf.SessionClient.#ctor(System.String)">
            <summary>
            根据指定配置初始实例
            </summary>
            <param name="configName"></param>
            <exception cref="T:Adf.ConfigException"></exception>
        </member>
        <member name="M:Adf.SessionClient.GetSessionId">
            <summary>
            获取一个可用的会话标识
            </summary>
            <exception cref="T:Adf.SessionException">Create session id failed.</exception>
            <returns></returns>
        </member>
        <member name="M:Adf.SessionClient.AddSession(System.String,System.String,System.Int32)">
            <summary>
            add new session, 添加新会话,并指定过期时间
            </summary>
            <param name="sessionId"></param>
            <param name="data"></param>
            <param name="ttl">time of live, unit seconds, default 30m, max 30day, set zero for no expired</param>
            <returns>success: true, failure: false</returns>
            <exception cref="T:System.ArgumentNullException">token is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">ttl value invalid</exception>
        </member>
        <member name="M:Adf.SessionClient.RemoveSession(System.String)">
            <summary>
            remove a session, 移除会话
            </summary>
            <param name="sessionId"></param>
            <returns>find and removed : true, off-line : false</returns>
        </member>
        <member name="M:Adf.SessionClient.GetData(System.String)">
            <summary>
            get session data, 获取会话数据
            </summary>
            <param name="sessionId"></param>
            <returns>find return session data, else return null</returns>
        </member>
        <member name="M:Adf.SessionClient.Refresh(System.String,System.Int32)">
            <summary>
            refresh expire time, 刷新过期时间
            </summary>
            <param name="sessionId"></param>
            <param name="expires">seconds or unix-timestamp</param>
            <returns>success: true, off-line : false</returns>
        </member>
        <member name="M:Adf.SessionClient.GetKey(System.String)">
            <summary>
            get session store key, 获取会话存储键
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.SessionClient.Call(System.String,System.Action{Adf.Memcache})">
            <summary>
            callback for session, 为一个会话调用一个请求
            </summary>
            <param name="sessionId"></param>
            <param name="action"></param>
        </member>
        <member name="T:Adf.SessionException">
            <summary>
            Session exception
            </summary>
        </member>
        <member name="M:Adf.SessionException.#ctor(System.String)">
            <summary>
            session
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Adf.HttpServerWebSocketContext">
            <summary>
            Http Server WebSocket Context
            </summary>
        </member>
        <member name="T:Adf.HttpServerContextBase">
            <summary>
            Http Server Context base
            </summary>
        </member>
        <member name="M:Adf.HttpServerContextBase.#ctor(System.Collections.Specialized.NameValueCollection,Adf.HttpServer,System.String,System.String,System.String)">
            <summary>
            initialize new instance
            </summary>
            <param name="header"></param>
            <param name="server"></param>
            <param name="url"></param>
            <param name="method"></param>
            <param name="protocol"></param>
        </member>
        <member name="M:Adf.HttpServerContextBase.CreateResponseHeader(System.Net.HttpStatusCode)">
            <summary>
            创建响应头
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpServerContextBase.CreateCookieHeader(System.Text.StringBuilder)">
            <summary>
            创建Cookie响应头
            </summary>
            <param name="build"></param>
        </member>
        <member name="M:Adf.HttpServerContextBase.Response(System.Net.HttpStatusCode)">
            <summary>
            应答客户端
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:Adf.HttpServerContextBase.Response(System.Text.StringBuilder,System.Net.HttpStatusCode)">
            <summary>
            应答客户端
            </summary>
            <param name="status"></param>
            <param name="header"></param>
        </member>
        <member name="P:Adf.HttpServerContextBase.UserState">
            <summary>
            存储用户自定义数据
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.RequestHeader">
            <summary>
            RequestHeader
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.ResponseHeader">
            <summary>
            ResponseHeader
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.QueryString">
            <summary>
            QueryString
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.RequestType">
            <summary>
            Request Type
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.RequestCookie">
            <summary>
            get request cookie
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.ResponseCookie">
            <summary>
            get response cookie collection
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.Method">
            <summary>
            Get Method
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.Protocol">
            <summary>
            Protocol
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.Encoding">
            <summary>
            get/or set encoding
            </summary>
        </member>
        <member name="P:Adf.HttpServerContextBase.Server">
            <summary>
            get server
            </summary>
        </member>
        <member name="T:Adf.HttpServerContextBase.HttpQueryCollection">
            <summary>
            HTTP查询集合
            </summary>
        </member>
        <member name="M:Adf.HttpServerContextBase.HttpQueryCollection.#ctor(System.Int32)">
            <summary>
            初始化新实例
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Adf.HttpServerContextBase.HttpQueryCollection.ToString">
            <summary>
            将查询集合转换为字符串形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.#ctor(System.Net.Sockets.Socket,System.Collections.Specialized.NameValueCollection,Adf.HttpServer,System.String,System.String,System.String)">
            <summary>
            initialize new instance
            </summary>
            <param name="socket"></param>
            <param name="header"></param>
            <param name="server"></param>
            <param name="url"></param>
            <param name="method"></param>
            <param name="protocol"></param>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.GetRemoteNode">
            <summary>
            获取远程节点标志, IP:PORT
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.GetRemotePoint">
            <summary>
            获取远程节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.Pong">
            <summary>
            发送一个PONG帧
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.Send(System.Byte[])">
            <summary>
            发送字节数组一个消息
            </summary>
            <param name="data"></param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.Send(System.Byte[],System.Object)">
            <summary>
            发送字节数组一个消息
            </summary>
            <param name="data"></param>
            <param name="userState"></param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.Send(System.String)">
            <summary>
            发送一个文本消息
            </summary>
            <param name="message"></param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.SendAsync(System.String,System.Object)">
            <summary>
            发送一个文本消息
            </summary>
            <param name="message"></param>
            <param name="userState"></param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.Send(System.Byte[],Adf.WebSocketOpcode)">
            <summary>
            发送一组数据，并指定消息类型
            </summary>
            <param name="data"></param>
            <param name="opcode"></param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.SendAsync(System.Byte[],Adf.WebSocketOpcode,System.Object)">
            <summary>
            发送一组数据，并指定消息类型
            </summary>
            <param name="data"></param>
            <param name="opcode"></param>
            <param name="userSate"></param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.Receive">
            <summary>
            开始读取
            </summary>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.CreateResponseHeader(System.Net.HttpStatusCode)">
            <summary>
            create response header
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.Response(System.Text.StringBuilder,System.Net.HttpStatusCode)">
            <summary>
            响应客户端请求
            </summary>
            <param name="header"></param>
            <param name="status"></param>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.OnMessage(System.Byte[],Adf.WebSocketOpcode)">
            <summary>
            引发消息事件
            </summary>
            <param name="data"></param>
            <param name="opcode"></param>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.Close">
            <summary>
            关闭当前连接
            </summary>
        </member>
        <member name="M:Adf.HttpServerWebSocketContext.Close(System.String,Adf.WebSocketCloseReason)">
            <summary>
            关闭当前连接
            </summary>
            <param name="reason"></param>
            <param name="message"></param>
        </member>
        <member name="P:Adf.HttpServerWebSocketContext.Socket">
            <summary>
            get Socket
            </summary>
        </member>
        <member name="P:Adf.HttpServerWebSocketContext.Time">
            <summary>
            获取连接创建时间
            </summary>
        </member>
        <member name="P:Adf.HttpServerWebSocketContext.Id">
            <summary>
            获取连接ID
            </summary>
        </member>
        <member name="P:Adf.HttpServerWebSocketContext.Allowed">
            <summary>
            在连接开始事件中标志是否通过所有事件的检测，当你不允许这个连接继续时，设置为false， 系统将禁止此一连接请求
            </summary>
        </member>
        <member name="P:Adf.HttpServerWebSocketContext.CloseMessage">
            <summary>
            get close message
            </summary>
        </member>
        <member name="T:Adf.LogEventArgs">
            <summary>
            日志事件
            </summary>
        </member>
        <member name="M:Adf.LogEventArgs.#ctor(System.String)">
            <summary>
            log event args
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Adf.LogEventArgs.#ctor(System.String,Adf.LogLevel)">
            <summary>
            log event args
            </summary>
            <param name="content"></param>
            <param name="level"></param>
        </member>
        <member name="P:Adf.LogEventArgs.Level">
            <summary>
            获取日志级别
            </summary>
        </member>
        <member name="P:Adf.LogEventArgs.Content">
            <summary>
            获取内容
            </summary>
        </member>
        <member name="T:Adf.WebSocketOpcode">
            <summary>
            Contains the values of the opcode that indicates the type of a WebSocket frame.
            </summary>
            <remarks>
            The values of the opcode are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:Adf.WebSocketOpcode.Cont">
            <summary>
            Equivalent to numeric value 0.
            Indicates a continuation frame.
            </summary>
        </member>
        <member name="F:Adf.WebSocketOpcode.Text">
            <summary>
            Equivalent to numeric value 1.
            Indicates a text frame.
            </summary>
        </member>
        <member name="F:Adf.WebSocketOpcode.Binary">
            <summary>
            Equivalent to numeric value 2.
            Indicates a binary frame.
            </summary>
        </member>
        <member name="F:Adf.WebSocketOpcode.Close">
            <summary>
            Equivalent to numeric value 8.
            Indicates a connection close frame.
            </summary>
        </member>
        <member name="F:Adf.WebSocketOpcode.Ping">
            <summary>
            Equivalent to numeric value 9.
            Indicates a ping frame.
            </summary>
        </member>
        <member name="F:Adf.WebSocketOpcode.Pong">
            <summary>
            Equivalent to numeric value 10.
            Indicates a pong frame.
            </summary>
        </member>
        <member name="T:Adf.StringHelper">
            <summary>
            字符串扩展
            </summary>
        </member>
        <member name="F:Adf.StringHelper.CRLF">
            <summary>
            换行符常量
            </summary>
        </member>
        <member name="M:Adf.StringHelper.Page(System.String,System.String)">
            <summary>
            文本分页
            </summary>
            <param name="text"></param>
            <param name="pageToken"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.StringHelper.Compart(System.String,System.Int32,System.Char)">
            <summary>
            以分隔符拆分字符串
            </summary>
            <param name="ids"></param>
            <param name="itemMaxLength">单字符串最大长度</param>
            <param name="splitChar">拆分符</param>
            <returns></returns>
        </member>
        <member name="M:Adf.StringHelper.GetMultiByteLength(System.String)">
            <summary>
            取得字符串多字节长度
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.StringHelper.Sub(System.String,System.Int32,System.String)">
            <summary>
            取得传入字符串中指定多字节长度的字符串
            </summary>
            <param name="input">要进行截取的字符串</param>
            <param name="len">字符长度,多字节字符按2个字符计算</param>
            <param name="append">须在其尾增加的字符串，当为Null或Empty时则不进行添加</param>
            <returns>返回截取后的字符串</returns>
            <example>一个中文按两个单位计算</example>
        </member>
        <member name="M:Adf.StringHelper.Join(System.String,System.Object[])">
            <summary>
            串连
            </summary>
            <param name="splitChar"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.StringHelper.Count(System.String,System.String)">
            <summary>
            判断字符串compare 在 input字符串中出现的次数
            </summary>
            <param name="input">源字符串</param>
            <param name="compare">用于比较的字符串</param>
            <returns>字符串compare 在 input字符串中出现的次数</returns>
        </member>
        <member name="M:Adf.StringHelper.RemoveHtmlTag(System.String)">
            <summary>
            过滤掉html数据标记
            </summary>
            <param name="input">过滤信息</param>
        </member>
        <member name="M:Adf.StringHelper.RemoveCrLf(System.String)">
            <summary>
            清除给定字符串中的回车及换行符
            </summary>
            <param name="input">要清除的字符串</param>
            <returns>清除后返回的字符串</returns>
        </member>
        <member name="M:Adf.StringHelper.EncodeHtmlTag(System.String)">
            <summary>
            将字符串进行Html简单编码，空格、大小于、换行、双引号、单引号、正反括号
            </summary>
            <param name="input">要进行编码的字符串</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:Adf.StringHelper.DecodeHtmlTag(System.String)">
            <summary>
            将字符串进行Html解码，是<see cref="M:Adf.StringHelper.EncodeHtmlTag(System.String)"/>的反编辑
            </summary>
            <param name="input">要进行解码的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:Adf.StringHelper.DecodeHtmlTagChar(System.String)">
            <summary>
            对字符串中的大于号及小于号进行Html解码
            </summary>
            <param name="input">要进行解辑的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:Adf.StringHelper.EncodeHtmlTagChar(System.String)">
            <summary>
            对字符串中的大于号及小于号进行Html编码
            </summary>
            <param name="input">要进行编辑的字符串</param>
            <returns>返回加码后的字符串</returns>
        </member>
        <member name="M:Adf.StringHelper.Format(System.String,System.Collections.IDictionary)">
            <summary>
            以指定的字典数据格式化字符串，未匹配的内容原文输出
            </summary>
            <param name="input">要格式化的字符串，示例： my name is {name}, and my birthday {birthday} </param>
            <param name="dictionary">格式化内容字典， 名称是否区分大小写由输入字典决定</param>
            <exception cref="T:System.ArgumentNullException">dictionary is null</exception>
            <exception cref="T:System.FormatException">throwError  is true, no match replace item</exception>
            <returns></returns>
        </member>
        <member name="M:Adf.StringHelper.Format(System.String,System.Collections.IDictionary,System.Boolean)">
            <summary>
            以指定的字典数据格式化字符串
            </summary>
            <param name="input">要格式化的字符串，示例： my name is {name}, and my birthday {birthday} </param>
            <param name="dictionary">格式化内容字典， 名称是否区分大小写由输入字典决定</param>
            <param name="throwError">未找到匹配时，是否抛出异常</param>
            <exception cref="T:System.ArgumentNullException">dictionary is null</exception>
            <exception cref="T:System.FormatException">throwError  is true, no match replace item</exception>
            <returns></returns>
        </member>
        <member name="T:Adf.HtmlHelper">
            <summary>
            Html助手
            </summary>
        </member>
        <member name="M:Adf.HtmlHelper.GetNoArchorBody(System.String)">
            <summary>
            将字符串中href属性都替换为空
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HtmlHelper.ArrayToTable(System.Array,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            数组转换为表格
            </summary>
            <param name="array">数组</param>
            <param name="id">表格ID</param>
            <param name="width">表宽</param>
            <param name="border">边框</param>
            <param name="cellpadding">填充</param>
            <param name="cellspacing">表间距</param>
            <returns></returns>
        </member>
        <member name="M:Adf.HtmlHelper.DataTableToTable(System.Data.DataTable,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            数据表转换为表格
            </summary>
            <param name="dt">数据表</param>
            <param name="id">表格ID</param>
            <param name="width">表宽</param>
            <param name="border">边框</param>
            <param name="cellpadding">填充</param>
            <param name="cellspacing">表间距</param>
            <returns></returns>
        </member>
        <member name="T:Adf.EnumHelper">
            <summary>
            枚举助手
            </summary>
        </member>
        <member name="M:Adf.EnumHelper.GetDescription(System.Enum)">
            <summary>
            获取枚举的描述(Description属性)
            </summary>
            <param name="value"></param>
            <example>
            <code>
                 System.Console.WriteLine(Utility.EnumHelper.GetDescritpion(EnumA.Value));
                 System.Console.WriteLine(Utility.EnumHelper.GetDescritpion(EnumB.Value));
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:Adf.EnumHelper.GetDescriptions(System.Type)">
            <summary>
            获取枚举的描述列表
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.Db.DbReader">
            <summary>
            Public Reader
            </summary>
        </member>
        <member name="T:Adf.Db.IDbReader">
            <summary>
            Data Object Reader Interface
            </summary>
        </member>
        <member name="M:Adf.Db.IDbReader.Get``1(System.String)">
            <summary>
            get value
            </summary>
            <typeparam name="T">value type</typeparam>
            <param name="name">field name</param>
            <returns>is T type value</returns>
        </member>
        <member name="M:Adf.Db.IDbReader.Get(System.String)">
            <summary>
            get value
            </summary>
            <param name="name">field name</param>
            <returns>is T type value</returns>
        </member>
        <member name="M:Adf.Db.IDbReader.GetAsInt16(System.String)">
            <summary>
            Get To Int16
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.IDbReader.GetAsInt32(System.String)">
            <summary>
            Get To Int32
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.IDbReader.GetAsInt64(System.String)">
            <summary>
            Get To Int64
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.IDbReader.GetAsUInt16(System.String)">
            <summary>
            Get To Uint16
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.IDbReader.GetAsUInt32(System.String)">
            <summary>
            Get To Uint32
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.IDbReader.GetAsUInt64(System.String)">
            <summary>
            Get To Uint64
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.IDbReader.GetAsDateTime(System.String)">
            <summary>
            Get To DateTime
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.IDbReader.GetAsBoolean(System.String)">
            <summary>
            Get To Boolean
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.IDbReader.GetAsByte(System.String)">
            <summary>
            Get To Byte
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.IDbReader.GetAsDecimail(System.String)">
            <summary>
            Get To Decimal
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.IDbReader.GetAsDouble(System.String)">
            <summary>
            Get To Double
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.IDbReader.GetAsSByte(System.String)">
            <summary>
            Get To SByte
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.IDbReader.GetAsString(System.String)">
            <summary>
            Get To String
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.Db.IDbReader.NameIndex">
            <summary>
            name index
            </summary>
        </member>
        <member name="P:Adf.Db.IDbReader.Reader">
            <summary>
            get reader object
            </summary>
        </member>
        <member name="M:Adf.Db.DbReader.#ctor(System.Data.IDataReader)">
            <summary>
            initialize new instance
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Adf.Db.DbReader.Get``1(System.String)">
            <summary>
            get value
            </summary>
            <typeparam name="T">value type</typeparam>
            <param name="name">field name</param>
            <returns>is T type value</returns>
        </member>
        <member name="M:Adf.Db.DbReader.Get(System.String)">
            <summary>
            get value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbReader.GetAsInt16(System.String)">
            <summary>
            Get To Int16
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbReader.GetAsInt32(System.String)">
            <summary>
            Get To Int32
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbReader.GetAsInt64(System.String)">
            <summary>
            Get To Int64
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbReader.GetAsUInt16(System.String)">
            <summary>
            Get To Uint16
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbReader.GetAsUInt32(System.String)">
            <summary>
            Get To Uint32
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbReader.GetAsUInt64(System.String)">
            <summary>
            Get To Uint64
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbReader.GetAsDateTime(System.String)">
            <summary>
            Get To DateTime
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbReader.GetAsBoolean(System.String)">
            <summary>
            Get To Boolean
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbReader.GetAsByte(System.String)">
            <summary>
            Get To Byte
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbReader.GetAsDecimail(System.String)">
            <summary>
            Get To Decimal
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbReader.GetAsDouble(System.String)">
            <summary>
            Get To Double
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbReader.GetAsSByte(System.String)">
            <summary>
            Get To SByte
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbReader.GetAsString(System.String)">
            <summary>
            Get To String
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.Db.DbReader.NameIndex">
            <summary>
            data
            </summary>
        </member>
        <member name="P:Adf.Db.DbReader.Reader">
            <summary>
            get reader object
            </summary>
        </member>
        <member name="T:Adf.Config.SmtpConfig">
            <summary>
            Smtp Config Handler
            </summary>
        </member>
        <member name="F:Adf.Config.SmtpConfig.Instance">
            <summary>
            get default instance, for smtp.config
            </summary>
        </member>
        <member name="M:Adf.Config.SmtpConfig.#ctor">
            <summary>
            initialize new smtp.config instance
            </summary>
        </member>
        <member name="P:Adf.Config.SmtpConfig.Host">
            <summary>
            host, config:SmtpHost
            </summary>
        </member>
        <member name="P:Adf.Config.SmtpConfig.Port">
            <summary>
            port, config:SmtpPort
            </summary>
        </member>
        <member name="P:Adf.Config.SmtpConfig.Sender">
            <summary>
            Sender, config:SmtpSender
            </summary>
        </member>
        <member name="P:Adf.Config.SmtpConfig.Name">
            <summary>
            Sender Name ,config: SmtpName
            </summary>
        </member>
        <member name="P:Adf.Config.SmtpConfig.Account">
            <summary>
            Account ,config:SmtpAccount
            </summary>
        </member>
        <member name="P:Adf.Config.SmtpConfig.Password">
            <summary>
            Password, config:SmtpPassword
            </summary>
        </member>
        <member name="P:Adf.Config.SmtpConfig.Enabled">
            <summary>
            Enable,config:SmtpEnabled
            </summary>
            <returns></returns>
        </member>
        <member name="P:Adf.Config.SmtpConfig.SSLEnabled">
            <summary>
            SSL Enable,config:SmtpSSLEnabled
            </summary>
            <returns></returns>
        </member>
        <member name="P:Adf.Config.SmtpConfig.TLSEnabled">
            <summary>
            TLS Enable,config:SmtpTLSEnable, default true
            </summary>
            <returns></returns>
        </member>
        <member name="T:Adf.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:Adf.LogLevel.None">
            <summary>
            未指定
            </summary>
        </member>
        <member name="F:Adf.LogLevel.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="F:Adf.LogLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Adf.LogLevel.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:Adf.LogLevel.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:Adf.HostHelper">
            <summary>
            主机助手
            </summary>
        </member>
        <member name="M:Adf.HostHelper.Parse(System.String)">
            <summary>
            将主机与端口分开解析
            </summary>
            <param name="hostAndPort"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HostHelper.Parse(System.String,System.String@,System.Int32@)">
            <summary>
            将主机与端口分开解析
            </summary>
            <param name="hostAndPort"></param>
            <param name="host"></param>
            <param name="port">0-65535</param>
            <returns></returns>
        </member>
        <member name="M:Adf.HostHelper.Combine(System.String,System.Int32)">
            <summary>
            合并主机端口为单一字符串
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <returns>host:port</returns>
        </member>
        <member name="T:Adf.ISmtp">
            <summary>
            Smtp Helper
            </summary>
        </member>
        <member name="M:Adf.ISmtp.Send(System.Net.Mail.MailMessage)">
            <summary>
            发送邮件
            </summary>
            <param name="message">消息体，若未填充From属性，则将以配置填充</param>
            <returns></returns>
        </member>
        <member name="P:Adf.ISmtp.Host">
            <summary>
            host
            </summary>
        </member>
        <member name="P:Adf.ISmtp.Port">
            <summary>
            port
            </summary>
        </member>
        <member name="P:Adf.ISmtp.Sender">
            <summary>
            Sender
            </summary>
        </member>
        <member name="P:Adf.ISmtp.Name">
            <summary>
            Sender Name
            </summary>
        </member>
        <member name="P:Adf.ISmtp.Account">
            <summary>
            Account
            </summary>
        </member>
        <member name="P:Adf.ISmtp.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:Adf.ISmtp.Enabled">
            <summary>
            是否启用
            </summary>
            <returns></returns>
        </member>
        <member name="P:Adf.ISmtp.SSLEnabled">
            <summary>
            是否启用SSL
            </summary>
        </member>
        <member name="T:Adf.HttpServerRequestType">
            <summary>
            HttpServerRequestType
            </summary>
        </member>
        <member name="F:Adf.HttpServerRequestType.Http">
            <summary>
            Http
            </summary>
        </member>
        <member name="F:Adf.HttpServerRequestType.WebSocket">
            <summary>
            Web Socket
            </summary>
        </member>
        <member name="T:Adf.PoolException">
            <summary>
            Pool Item Info
            </summary>
        </member>
        <member name="M:Adf.PoolException.#ctor(System.String)">
            <summary>
            initialize
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Adf.PoolAbandonException">
            <summary>
            pool member abandon exception
            </summary>
        </member>
        <member name="M:Adf.PoolAbandonException.#ctor(System.String)">
            <summary>
            initialize
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Adf.SocketHelper">
            <summary>
            Socket
            </summary>
        </member>
        <member name="M:Adf.SocketHelper.Receive(System.Net.Sockets.Socket,System.Int32,System.Int32)">
            <summary>
            读取
            </summary>
            <param name="socket"></param>
            <param name="readSize"></param>
            <param name="bufferSize"></param>
            <exception cref="T:System.Net.Sockets.SocketException">errorCode= SocketError.Shutdown</exception>
        </member>
        <member name="M:Adf.SocketHelper.Receive(System.IO.MemoryStream,System.Net.Sockets.Socket,System.Int32,System.Int32)">
            <summary>
            读取
            </summary>
            <param name="memoryStream"></param>
            <param name="socket"></param>
            <param name="readSize"></param>
            <param name="bufferSize"></param>
            <exception cref="T:System.Net.Sockets.SocketException">errorCode= SocketError.Shutdown</exception>
        </member>
        <member name="M:Adf.SocketHelper.Receive(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            读取指定字节数
            </summary>
            <param name="socket"></param>
            <param name="readSize"></param>
            <exception cref="T:System.Net.Sockets.SocketException">errorCode= SocketError.Shutdown</exception>
        </member>
        <member name="M:Adf.SocketHelper.Receive(System.Net.Sockets.Socket,System.Int32,System.Byte[],System.Int32)">
            <summary>
            读取指定字节数填充至缓冲区指定位置
            </summary>
            <param name="socket"></param>
            <param name="readSize"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <exception cref="T:System.Net.Sockets.SocketException">errorCode= SocketError.Shutdown</exception>
        </member>
        <member name="M:Adf.SocketHelper.ReadLine(System.Net.Sockets.Socket,System.Text.Encoding)">
            <summary>
            reads a line
            </summary>
            <param name="socket"></param>
            <param name="encoding"></param>
            <returns>String that was read in</returns>
        </member>
        <member name="M:Adf.SocketHelper.ReadLine(System.Net.Sockets.Socket)">
            <summary>
            reads a line
            </summary>
            <returns>String that was read in</returns>
        </member>
        <member name="M:Adf.SocketHelper.ReadSegment(System.Net.Sockets.Socket)">
            <summary>
            read segment for \0
            </summary>
            <param name="socket"></param>
            <returns>String that was read in</returns>
        </member>
        <member name="M:Adf.SocketHelper.ReadSegment(System.IO.Stream,System.Net.Sockets.Socket)">
            <summary>
            read segment for \0
            </summary>
            <param name="socket"></param>
            <param name="output"></param>
            <returns>String that was read in</returns>
        </member>
        <member name="M:Adf.SocketHelper.IsClose(System.Net.Sockets.SocketException)">
            <summary>
            是否为关闭
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.SocketHelper.TryClose(System.Net.Sockets.Socket)">
            <summary>
            尝试关闭一个连接
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:Adf.SocketHelper.Connect(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            connect to host
            </summary>
            <param name="socket"></param>
            <param name="timeout"></param>
            <param name="port"></param>
            <param name="addr"></param>
            <exception cref="T:System.TimeoutException">connect timeout</exception>
        </member>
        <member name="M:Adf.SocketHelper.Connect(System.Net.Sockets.Socket,System.String,System.Int32,System.Int32)">
            <summary>
            connect to host
            </summary>
            <param name="socket"></param>
            <param name="timeout"></param>
            <param name="host"></param>
            <param name="port"></param>
            <exception cref="T:System.TimeoutException">connect timeout</exception>
        </member>
        <member name="T:Adf.RedisKeyType">
            <summary>
            Redis 键类型
            </summary>
        </member>
        <member name="T:Adf.JsonBinarySerializable">
            <summary>
            Json 二进制序列化实例
            </summary>
        </member>
        <member name="F:Adf.JsonBinarySerializable.DefaultInstance">
            <summary>
            获取以UTF-8编码的默认实例对象
            </summary>
        </member>
        <member name="M:Adf.JsonBinarySerializable.#ctor(System.Text.Encoding)">
            <summary>
            初始化新实例
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:Adf.JsonBinarySerializable.Serialize(System.Object)">
            <summary>
            将指定对象转换为JSON字节码
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.JsonBinarySerializable.Deserialize(System.Type,System.Byte[])">
            <summary>
            返序列化JSON字节码为对象
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.JsonBinarySerializable.Encoding">
            <summary>
            获取编码字符集
            </summary>
        </member>
        <member name="T:Adf.Db.Access">
            <summary>
            Access数据库操作对象
            </summary>
        </member>
        <member name="T:Adf.Db.DbFactory">
            <summary>
            数据操作基类
            </summary>
        </member>
        <member name="T:Adf.Db.IDbFactory">
            <summary>
            数据工厂接口
            </summary>
        </member>
        <member name="M:Adf.Db.IDbFactory.ToSafeString(System.Object)">
            <summary>
            根据数据类型返回一个可以直接应用于SQL语句的安全字符串
            </summary>
            <param name="value">要添加的值</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.ToSafeString(System.Object,System.Type)">
            <summary>
            根据数据类型返回一个可以直接应用于SQL语句的安全字符串
            </summary>
            <param name="value">要添加的值</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.InjectReplace(System.String)">
            <summary>
            SQL注入过滤
            </summary>
            <param name="input">要过滤的数据</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.CreateCommand(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            根据指定数据返回Command对象,所有的数据操作均应执行此方法来获取Command对象
            </summary>
            <param name="sqlString">执行串</param>
            <param name="storedProcedure">是否以存储过程执行</param>
            <param name="parames">参数列表</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.TransactionBegin">
            <summary>
            开始一个事务,可通过属性 <see cref="P:Adf.Db.IDbFactory.Transaction"/> 获取已开启的事务
            </summary>
        </member>
        <member name="M:Adf.Db.IDbFactory.TransactionRollback">
            <summary>
            回滚当前事务
            </summary>
        </member>
        <member name="M:Adf.Db.IDbFactory.TransactionCommit">
            <summary>
            提交当前事务
            </summary>
        </member>
        <member name="M:Adf.Db.IDbFactory.Execute(System.String)">
            <summary>
            执行一个语句或过程
            </summary>
            <param name="sqlString">要执行的操作语句</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.Execute(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            执行一个语句或过程
            </summary>
            <param name="sqlString">要执行的操作语句</param>
            <param name="storedProcedure">是否以存储过程执行</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.Execute(Adf.Db.DbEntity,System.String)">
            <summary>
            执行一个语句或过程
            </summary>
            <param name="entity">实体</param>
            <param name="storedProcedure">存储过程名</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.Insert(Adf.Db.DbEntity)">
            <summary>
            执行数据对象插入请求
            </summary>
            <param name="entity">数据对象</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.Delete(Adf.Db.DbEntity)">
            <summary>
            执行数据对象删除处理
            </summary>
            <param name="where">对象</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.Update(Adf.Db.DbEntity,Adf.Db.DbEntity)">
            <summary>
            执行数据对象修改
            </summary>
            <param name="update">数据对象</param>
            <param name="where">更新条件</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetIdentity``1">
            <summary>
            获取上一执行语句所产生的自增值(此功能不一定支持所有数据库服务器)，如果有误，返回为结果类型初始值
            </summary>
            <typeparam name="T">返回的数据类型</typeparam>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetIdentity">
            <summary>
            返回最后一次产生的键值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetDataSet(Adf.Db.DbEntity)">
            <summary>
            返回一个数据集
            </summary>
            <param name="entity">数据对象</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetDataSet(Adf.Db.DbEntity,System.String)">
            <summary>
            返回一个数据集
            </summary>
            <param name="entity">数据对象</param>
            <param name="storedProcedure">存储过程名</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetDataSet(System.String)">
            <summary>
            返回一个数据集
            </summary>
            <param name="sqlString">要执行的语句</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetDataSet(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            返回一个数据集
            </summary>
            <param name="sqlString">要执行的语句或过程</param>
            <param name="storedProcedure">是否为存储过程</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetDataTable(Adf.Db.DbEntity)">
            <summary>
            返回一个数据表
            </summary>
            <param name="entity">数据对象</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetDataTable(Adf.Db.DbEntity,System.String)">
            <summary>
            返回一个数据表
            </summary>
            <param name="entity">数据对象</param>
            <param name="storedProcedure">存储过程名</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetDataTable(System.String)">
            <summary>
            返回一个数据表
            </summary>
            <param name="sqlString">要执行的语句</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetDataTable(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            返回一个数据表
            </summary>
            <param name="sqlString">要执行的语句或过程</param>
            <param name="storedProcedure">是否为存储过程</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetScalar(System.String)">
            <summary>
            获取第一行第一列的数据
            </summary>
            <param name="sqlString">要执行的语句</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetScalar(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            获取第一行第一列的数据
            </summary>
            <param name="sqlString">要执行的语句</param>
            <param name="storedProcedure">是否为存储过程</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetScalar(Adf.Db.DbEntity)">
            <summary>
            获取第一行第一列的数据
            </summary>
            <param name="Object">对象</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetScalar(Adf.Db.DbEntity,System.String)">
            <summary>
            获取第一行第一列的数据
            </summary>
            <param name="Object">对象</param>
            <param name="storedProcedure">存储过程名</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetScalar``1(System.String)">
            <summary>
            获取第一行第一列的数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sqlString">要执行的语句</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetScalar``1(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            获取第一行第一列的数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sqlString">要执行的语句</param>
            <param name="storedProcedure">是否为存储过程</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetScalar``1(Adf.Db.DbEntity)">
            <summary>
            获取第一行第一列的数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">对象</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetScalar``1(Adf.Db.DbEntity,System.String)">
            <summary>
            获取第一行第一列的数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">对象</param>
            <param name="storedProcedure">存储过程名</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetCount(System.String,System.String)">
            <summary>
            根据表与条件返回一个COUNT值
            </summary>
            <param name="tablename">表名</param>
            <param name="condition">条件</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetCount(Adf.Db.DbEntity)">
            <summary>
            获取指定对象的记录数
            </summary>
            <param name="entity">对象</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetCount(Adf.Db.DbEntity,System.String)">
            <summary>
            获取指定对象的记录数
            </summary>
            <param name="entity">对象</param>
            <param name="storedProcedure">存储过程名</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetList``1(System.String)">
            <summary>
            返回一个数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sqlString">查询语句</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetList``1(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            返回一个数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sqlString">查询语句</param>
            <param name="storedProcedure">是否为存储过程</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetList``1(Adf.Db.DbEntity)">
            <summary>
            返回一个数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">查询条件对象</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetList``1(Adf.Db.DbEntity,System.String)">
            <summary>
            返回一个数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">查询条件对象</param>
            <param name="storedProcedure">存储过程名</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetLists``1(System.String)">
            <summary>
            返回一个多数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sqlString">查询语句</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetLists``1(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            返回一个多数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sqlString">查询语句</param>
            <param name="storedProcedure">是否为存储过程</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetLists``1(Adf.Db.DbEntity,System.String)">
            <summary>
            返回一个多数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">查询条件对象</param>
            <param name="storedProcedure">存储过程名</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetRow``1(System.String)">
            <summary>
            返回一个数据对象
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <param name="sqlString">查询语句</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetRow``1(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            返回一个数据对象
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <param name="sqlString">查询语句或过程</param>
            <param name="storedProcedure">是否以存储过程执行</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetRow``1(Adf.Db.DbEntity,System.String)">
            <summary>
            返回一个数据对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">查询对象</param>
            <param name="storedProcedure">存储过程名</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.GetRow``1(Adf.Db.DbEntity)">
            <summary>
            返回一个数据对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">查询对象</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.CreateParameter(System.String,System.Object,System.Int32)">
            <summary>
            创建一个参数
            </summary>
            <param name="Name">参数</param>
            <param name="Value">参数值</param>
            <param name="length">长度 >0 有效</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            创建一个参数
            </summary>
            <param name="Name">参数</param>
            <param name="Value">参数值</param>
            <param name="dbType">参数类型</param>
            <param name="length">长度 >0 有效</param>
        </member>
        <member name="M:Adf.Db.IDbFactory.PageSql``1(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            返回一个分页列表对象
            </summary>
            <param name="fields">字段值,前后不带空格,位于 Select 与 From 之间的字段部表示</param>
            <param name="tablename">要进行查询的数据表,可为多个</param>
            <param name="condition">要进行查询的查询串,Where的后缀,如果未有,请设置为 null</param>
            <param name="orderby">排序方法,如果未有排序则为null</param>
            <param name="groupby">分组,分组请设置为null</param>
            <param name="pageindex">页序</param>
            <param name="pagesize">页大小</param>
            <param name="key">键</param>
            <param name="distinct"></param>
            <returns>返回生成后的Sql语句</returns>
        </member>
        <member name="M:Adf.Db.IDbFactory.PageSql``1(System.Data.IDbDataParameter[],System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            返回一个分页列表对象
            </summary>
            <param name="parameters">参数</param>
            <param name="fields">字段值,前后不带空格,位于 Select 与 From 之间的字段部表示</param>
            <param name="tablename">要进行查询的数据表,可为多个</param>
            <param name="condition">要进行查询的查询串,Where的后缀,如果未有,请设置为 null</param>
            <param name="orderby">排序方法,如果未有排序则为null</param>
            <param name="groupby">分组,分组请设置为null</param>
            <param name="pageindex">页序</param>
            <param name="pagesize">页大小</param>
            <param name="key">键</param>
            <param name="distinct"></param>
            <returns>返回生成后的Sql语句</returns>
        </member>
        <member name="P:Adf.Db.IDbFactory.Name">
            <summary>
            获取当前工厂名称描述
            </summary>
        </member>
        <member name="P:Adf.Db.IDbFactory.LastSql">
            <summary>
            最后一个Command SQL
            </summary>
        </member>
        <member name="P:Adf.Db.IDbFactory.SqlBuilder">
            <summary>
            返回可用的<see cref="P:Adf.Db.IDbFactory.SqlBuilder"/>对象
            </summary>
        </member>
        <member name="P:Adf.Db.IDbFactory.CommandCount">
            <summary>
            获取Command数，间接反应了执行了多少次数据操作
            </summary>
        </member>
        <member name="P:Adf.Db.IDbFactory.Connection">
            <summary>
            获取当前数据库连接串
            </summary>
        </member>
        <member name="P:Adf.Db.IDbFactory.Transaction">
            <summary>
            获取当前正在执行的事务
            </summary>
        </member>
        <member name="P:Adf.Db.IDbFactory.CreateParameterCallback">
            <summary>
            参数创建时回调
            </summary>
        </member>
        <member name="F:Adf.Db.DbFactory.CALLBACK_LIST_CAPACITY">
            <summary>
            默认的LIST返回集合大小
            </summary>
        </member>
        <member name="F:Adf.Db.DbFactory.SAFESTRING_DEFAULT">
            <summary>
            SafeString 默认值
            </summary>
        </member>
        <member name="F:Adf.Db.DbFactory.LOG_ENABLE">
            <summary>
            是否开启日志，配置名：Adf:Db:LogEnable
            </summary>
        </member>
        <member name="M:Adf.Db.DbFactory.Call``1(System.Action{``0})">
            <summary>
            调用一个对象实例，并在执行完成后并闭连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
        </member>
        <member name="M:Adf.Db.DbFactory.#ctor(System.Data.Common.DbProviderFactory,System.Data.IDbConnection)">
            <summary>
            initialize
            </summary>
            <param name="connection">对象连接</param>
            <param name="factory">工厂</param>
        </member>
        <member name="M:Adf.Db.DbFactory.CreateLogWriter">
            <summary>
            创建日志书写实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Db.DbFactory.LoggerInitialize">
            <summary>
            日志书写器初始化
            </summary>
        </member>
        <member name="M:Adf.Db.DbFactory.ToSafeString(System.Object)">
            <summary>
            根据数据类型返回一个可以直接应用于SQL语句的安全字符串
            </summary>
            <param name="value">要添加的值</param>
        </member>
        <member name="M:Adf.Db.DbFactory.ToSafeString(System.Object,System.Type)">
            <summary>
            根据数据类型返回一个可以直接应用于SQL语句的安全字符串
            </summary>
            <param name="value">要添加的值</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Adf.Db.DbFactory.InjectReplace(System.String)">
            <summary>
            SQL注入过滤
            </summary>
            <param name="input">要过滤的数据</param>
        </member>
        <member name="M:Adf.Db.DbFactory.CreateCommand(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            根据指定数据返回Command对象,所有的数据操作均应执行此方法来获取Command对象
            </summary>
            <param name="sqlString">执行串</param>
            <param name="storedProcedure">是否以存储过程执行</param>
            <param name="parames">参数列表</param>
        </member>
        <member name="M:Adf.Db.DbFactory.TransactionBegin">
            <summary>
            事务开始,可通过属性 <see cref="P:Adf.Db.DbFactory.Transaction"/> 获取已开启的事务
            </summary>
        </member>
        <member name="M:Adf.Db.DbFactory.TransactionCommit">
            <summary>
            提交当前事务
            </summary>
        </member>
        <member name="M:Adf.Db.DbFactory.TransactionRollback">
            <summary>
            回滚当前事务
            </summary>
        </member>
        <member name="M:Adf.Db.DbFactory.Execute(System.String)">
            <summary>
            执行一个语句或过程
            </summary>
            <param name="sqlString">要执行的操作语句</param>
        </member>
        <member name="M:Adf.Db.DbFactory.Execute(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            执行一个语句或过程
            </summary>
            <param name="sqlString">要执行的操作语句</param>
            <param name="storedProcedure">是否以存储过程执行</param>
            <param name="parames">参数列表</param>
        </member>
        <member name="M:Adf.Db.DbFactory.Execute(Adf.Db.DbEntity,System.String)">
            <summary>
            执行一个语句或过程
            </summary>
            <param name="entity">实体</param>
            <param name="storedProcedure">存储过程名</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Adf.Db.DbFactory.Insert(Adf.Db.DbEntity)">
            <summary>
            执行数据对象插入请求
            </summary>
            <param name="entity">数据对象</param>
        </member>
        <member name="M:Adf.Db.DbFactory.Delete(Adf.Db.DbEntity)">
            <summary>
            执行数据对象删除处理
            </summary>
            <param name="where">对象</param>
        </member>
        <member name="M:Adf.Db.DbFactory.Update(Adf.Db.DbEntity,Adf.Db.DbEntity)">
            <summary>
            执行数据对象修改
            </summary>
            <param name="update">数据对象</param>
            <param name="where">条件对像</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetIdentity``1">
            <summary>
            获取上一执行语句所产生的自增值(此功能不一定支持所有数据库服务器)，如果有误，返回为结果类型初始值
            </summary>
            <typeparam name="T">返回的数据类型</typeparam>
        </member>
        <member name="M:Adf.Db.DbFactory.GetIdentity">
            <summary>
            获取上一执行语句所产生的自增值(此功能不一定支持所有数据库服务器)，如果有误，返回为结果类型初始值
            </summary>
        </member>
        <member name="M:Adf.Db.DbFactory.GetDataSet(Adf.Db.DbEntity)">
            <summary>
            返回一个数据集
            </summary>
            <param name="entity">数据对象</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetDataSet(Adf.Db.DbEntity,System.String)">
            <summary>
            返回一个数据集
            </summary>
            <param name="entity">数据对象</param>
            <param name="storedProcedure">要执行的存储过程名</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetDataSet(System.String)">
            <summary>
            返回一个数据集
            </summary>
            <param name="sqlString">要执行的语句</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetDataSet(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            返回一个数据集
            </summary>
            <param name="sqlString">要执行的语句或过程</param>
            <param name="storedProcedure">是否为存储过程</param>
            <param name="parames">参数列表</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetDataTable(Adf.Db.DbEntity)">
            <summary>
            返回一个数据表
            </summary>
            <param name="entity">数据对象</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetDataTable(Adf.Db.DbEntity,System.String)">
            <summary>
            返回一个数据表
            </summary>
            <param name="entity">数据对象</param>
            <param name="storedProcedure">要执行的存储过程名</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetDataTable(System.String)">
            <summary>
            返回一个数据表
            </summary>
            <param name="sqlString">要执行的语句</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetDataTable(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            返回一个数据表
            </summary>
            <param name="sqlString">要执行的语句或过程</param>
            <param name="storedProcedure">是否为存储过程</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetScalar(System.String)">
            <summary>
            获取第一行第一列的数据
            </summary>
            <param name="sqlString">要执行的语句</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetScalar(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            获取第一行第一列的数据
            </summary>
            <param name="sqlString">要执行的语句</param>
            <param name="storedProcedure">是否为存储过程</param>
            <param name="parames">参数列表</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetScalar(Adf.Db.DbEntity)">
            <summary>
            获取第一行第一列的数据
            </summary>
            <param name="entity">对象</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetScalar(Adf.Db.DbEntity,System.String)">
            <summary>
            获取第一行第一列的数据
            </summary>
            <param name="entity">对象</param>
            <param name="storedProcedure">要执行的存储过程名</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetScalar``1(System.String)">
            <summary>
            获取第一行第一列的数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sqlString">要执行的语句</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetScalar``1(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            获取第一行第一列的数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sqlString">要执行的语句</param>
            <param name="storedProcedure">是否为存储过程</param>
            <param name="parames">参数列表</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetScalar``1(Adf.Db.DbEntity)">
            <summary>
            获取第一行第一列的数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">对象</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetScalar``1(Adf.Db.DbEntity,System.String)">
            <summary>
            获取第一行第一列的数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">对象</param>
            <param name="storedProcedure">要执行的存储过程名</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetCount(Adf.Db.DbEntity)">
            <summary>
            获取指定对象的记录数
            </summary>
            <param name="entity">对象</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetCount(Adf.Db.DbEntity,System.String)">
            <summary>
            获取指定对象的记录数
            </summary>
            <param name="entity">对象</param>
            <param name="storedProcedure">要执行的存储过程名</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetList``1(System.String)">
            <summary>
            返回一个数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sqlString">查询语句</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetList``1(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            返回一个数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sqlString">查询语句</param>
            <param name="storedProcedure">是否为存储过程</param>
            <param name="parames">参数列表</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetList``1(Adf.Db.DbEntity,System.String)">
            <summary>
            返回一个数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">查询条件对象</param>
            <param name="storedProcedure">要执行的存储过程名</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetList``1(Adf.Db.DbEntity)">
            <summary>
            返回一个数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">查询条件对象</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetLists``1(System.String)">
            <summary>
            返回一个数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sqlString">查询语句</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetLists``1(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            返回一个数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sqlString">查询语句</param>
            <param name="storedProcedure">是否为存储过程</param>
            <param name="parames">参数列表</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetLists``1(Adf.Db.DbEntity,System.String)">
            <summary>
            返回一个数据对象集
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">查询条件对象</param>
            <param name="storedProcedure">要执行的存储过程名</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetRow``1(System.String)">
            <summary>
            返回一个数据对象
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <param name="SqlString">查询语句</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetRow``1(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            返回一个数据对象
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <param name="sqlString">查询语句或过程</param>
            <param name="storedProcedure">是否以存储过程执行</param>
            <param name="parames">参数列表</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetRow``1(Adf.Db.DbEntity,System.String)">
            <summary>
            返回一个数据对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">查询对象</param>
            <param name="storedProcedure">要执行的存储过程名</param>
        </member>
        <member name="M:Adf.Db.DbFactory.GetRow``1(Adf.Db.DbEntity)">
            <summary>
            返回一个数据对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">查询对象</param>
        </member>
        <member name="M:Adf.Db.DbFactory.CreateParameter(System.String,System.Object,System.Int32)">
            <summary>
            创建一个参数
            </summary>
            <param name="name">参数</param>
            <param name="value">参数值</param>
            <param name="length">长度 >0 有效</param>
        </member>
        <member name="M:Adf.Db.DbFactory.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            创建一个参数
            </summary>
            <param name="name">参数</param>
            <param name="value">参数值</param>
            <param name="dbType">参数类型</param>
            <param name="length">长度 >0 有效</param>
        </member>
        <member name="M:Adf.Db.DbFactory.CreateParameter(Adf.Db.DbEntity)">
            <summary>
            根据对象创建参数列表,使用<see cref="P:Adf.Db.DbFactory.ParameterChar"/>所指定的参数前缀
            </summary>
            <param name="entity">对象</param>
        </member>
        <member name="M:Adf.Db.DbFactory.LogBuilder(System.Data.IDbCommand)">
            <summary>
            一个操作命令的日志构建
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Adf.Db.DbFactory.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="M:Adf.Db.DbFactory.GetCount(System.String,System.String)">
            <summary>
            根据表与条件返回一个COUNT值
            </summary>
            <param name="tablename">表名</param>
            <param name="condition">条件</param>
        </member>
        <member name="M:Adf.Db.DbFactory.PageSql``1(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            返回一个分页列表对象
            </summary>
            <param name="fields">字段值,前后不带空格,位于 Select 与 From 之间的字段部表示</param>
            <param name="tablename">要进行查询的数据表,可为多个</param>
            <param name="condition">要进行查询的查询串,Where的后缀,如果未有,请设置为 null</param>
            <param name="orderby">排序方法,如果未有排序则为null</param>
            <param name="groupby">分组,分组请设置为null</param>
            <param name="pageindex">页序</param>
            <param name="pagesize">页大小</param>
            <param name="key">键</param>
            <param name="distinct"></param>
            <returns>返回生成后的Sql语句</returns>
        </member>
        <member name="M:Adf.Db.DbFactory.PageSql``1(System.Data.IDbDataParameter[],System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            返回一个分页列表对象
            </summary>
            <param name="parameters">参数</param>
            <param name="fields">字段值,前后不带空格,位于 Select 与 From 之间的字段部表示</param>
            <param name="tablename">要进行查询的数据表,可为多个</param>
            <param name="condition">要进行查询的查询串,Where的后缀,如果未有,请设置为 null</param>
            <param name="orderby">排序方法,如果未有排序则为null</param>
            <param name="groupby">分组,分组请设置为null</param>
            <param name="pageindex">页序</param>
            <param name="pagesize">页大小</param>
            <param name="key">键</param>
            <param name="distinct"></param>
            <returns>返回生成后的Sql语句</returns>
        </member>
        <member name="P:Adf.Db.DbFactory.Name">
            <summary>
            获取当前操作对象的名称描述
            </summary>
        </member>
        <member name="P:Adf.Db.DbFactory.Logger">
            <summary>
            日志撰写器
            若启用日志,默认的日志管理实例受FlushInterval影响，若配置该值则应在程序执行结束后进行相应的Flush操作，Factory不会进行默认缓冲刷新
            </summary>
        </member>
        <member name="P:Adf.Db.DbFactory.SqlBuilder">
            <summary>
            返回可用的<see cref="P:Adf.Db.DbFactory.SqlBuilder"/>对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:Adf.Db.DbFactory.CommandCount">
            <summary>
            获取Command数，间接反应了执行了多少次数据操作
            </summary>
        </member>
        <member name="P:Adf.Db.DbFactory.DbProviderFactory">
            <summary>
            获取当前数据数据处理方法集
            </summary>
        </member>
        <member name="P:Adf.Db.DbFactory.LastSql">
            <summary>
            获取最后一个查询SQL
            </summary>
        </member>
        <member name="P:Adf.Db.DbFactory.Transaction">
            <summary>
            获取当前正在执行的事务
            </summary>
        </member>
        <member name="P:Adf.Db.DbFactory.Connection">
            <summary>
            获取当前数据库连接串
            </summary>
        </member>
        <member name="P:Adf.Db.DbFactory.ParameterChar">
            <summary>
            获取创建参数时,使用的前缀,默认使用@符,如果当前操作引擎不是,请重写该属性
            </summary>
        </member>
        <member name="P:Adf.Db.DbFactory.CreateParameterCallback">
            <summary>
            参数创建时回调
            </summary>
        </member>
        <member name="M:Adf.Db.Access.#ctor(System.String)">
            <summary>
            根据数据连接字符串创建一个新的数据实列
            </summary>
            <param name="connectionstring">数据连接字符串</param>
        </member>
        <member name="M:Adf.Db.Access.#ctor(System.Data.OleDb.OleDbConnection)">
            <summary>
            创建新的实例
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Adf.Db.Access.ToSafeString(System.Object,System.Type)">
            <summary>
            根据类型返回可直接用于SQL语句的安全字符串
            </summary>
            <param name="value">数据</param>
            <param name="type">类型</param>
        </member>
        <member name="P:Adf.Db.Access.Connection">
            <summary>
            获取数据库连接
            </summary>
        </member>
        <member name="P:Adf.Db.Access.SqlBuilder">
            <summary>
            已重载
            </summary>
            <returns></returns>
        </member>
        <member name="T:Adf.ByteHelper">
            <summary>
            字节助手
            </summary>
        </member>
        <member name="M:Adf.ByteHelper.FormatBytes(System.Int32)">
            <summary>
            格式化字节数字符串为K/M/G
            </summary>
            <param name="bytes">字节数</param>
        </member>
        <member name="T:Adf.Mail.MailPriority">
            <summary>
            指定邮件优先级。
            </summary>
        </member>
        <member name="F:Adf.Mail.MailPriority.Normal">
            <summary>
            此电子邮件具有正常优先级。
            </summary>
        </member>
        <member name="F:Adf.Mail.MailPriority.Low">
            <summary>
            此电子邮件具有低优先级。
            </summary>
        </member>
        <member name="F:Adf.Mail.MailPriority.High">
            <summary>
            此电子邮件具有高优先级。
            </summary>
        </member>
        <member name="T:Adf.IHttpServerHandler">
            <summary>
            http server handler
            </summary>
        </member>
        <member name="M:Adf.IHttpServerHandler.Process(Adf.HttpServerContext)">
            <summary>
            process
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="T:Adf.ActionResult">
            <summary>
            常规请求结果对象
            </summary>
        </member>
        <member name="M:Adf.ActionResult.#ctor">
            <summary>
            <para>初始化新实例</para>
            <para>initialize a new instance</para>
            </summary>
        </member>
        <member name="M:Adf.ActionResult.#ctor(System.Int32,System.String)">
            <summary>
            <para>初始化新实例</para>
            <para>initialize a new instance</para>
            <param name="code"></param>
            <param name="message"></param>
            </summary>
        </member>
        <member name="M:Adf.ActionResult.#ctor(System.Int32,System.Object)">
            <summary>
            <para>初始化新实例</para>
            <para>initialize a new instance</para>
            <param name="code"></param>
            <param name="data"></param>
            </summary>
        </member>
        <member name="P:Adf.ActionResult.Message">
            <summary>
            <para>获取或设置消息</para>
            <para>get or set action message</para>
            </summary>
        </member>
        <member name="P:Adf.ActionResult.Code">
            <summary>
            <para>获取或设置请求结果编号</para>
            <para>get or set action code</para>
            </summary>
        </member>
        <member name="P:Adf.ActionResult.Data">
            <summary>
            <para>获取或设置请求结果数据</para>
            <para>get or set action data</para>
            </summary>
        </member>
        <member name="T:Adf.ActionResult`1">
            <summary>
            常规请求结果对象
            </summary>
        </member>
        <member name="M:Adf.ActionResult`1.#ctor">
            <summary>
            <para>初始化新实例</para>
            <para>initialize a new instance</para>
            </summary>
        </member>
        <member name="M:Adf.ActionResult`1.#ctor(System.Int32,System.String)">
            <summary>
            <para>初始化新实例</para>
            <para>initialize a new instance</para>
            <param name="code"></param>
            <param name="message"></param>
            </summary>
        </member>
        <member name="M:Adf.ActionResult`1.#ctor(System.Int32,`0)">
            <summary>
            <para>初始化新实例</para>
            <para>initialize a new instance</para>
            <param name="code"></param>
            <param name="data"></param>
            </summary>
        </member>
        <member name="P:Adf.ActionResult`1.Message">
            <summary>
            <para>获取或设置消息</para>
            <para>get or set action message</para>
            </summary>
        </member>
        <member name="P:Adf.ActionResult`1.Code">
            <summary>
            <para>获取或设置请求结果编号</para>
            <para>get or set action code</para>
            </summary>
        </member>
        <member name="P:Adf.ActionResult`1.Data">
            <summary>
            <para>获取或设置请求结果数据</para>
            <para>get or set action data</para>
            </summary>
        </member>
        <member name="T:Adf.XmlHelper">
            <summary>
            XML Helper
            </summary>
        </member>
        <member name="M:Adf.XmlHelper.FromFile``1(System.String)">
            <summary>
            Object From XML File
            </summary>
            <param name="xmlfilepath"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.XmlHelper.FromStream``1(System.IO.Stream)">
            <summary>
            Object From XML Stream
            </summary>
            <param name="xmlStream"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.XmlHelper.ToStream(System.Object,System.IO.Stream)">
            <summary>
            Object To XML Stream
            </summary>
            <param name="obj"></param>
            <param name="xmlStream"></param>
        </member>
        <member name="M:Adf.XmlHelper.ToFile(System.Object,System.String)">
            <summary>
            Object To File
            </summary>
            <param name="obj"></param>
            <param name="xmlFilePath"></param>
        </member>
        <member name="M:Adf.XmlHelper.GetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            get xmlnode attribute
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.WebSocketDataFrameHeader">
            <summary>
            WebSocket  DataFrame  Header
            数据头
            </summary>
        </member>
        <member name="M:Adf.WebSocketDataFrameHeader.#ctor(System.Byte[])">
            <summary>
            根据字节组初始头
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Adf.WebSocketDataFrameHeader.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.SByte,System.Boolean,System.Int32)">
            <summary>
            初始并封装一个数据头
            </summary>
            <param name="fin"></param>
            <param name="rsv1"></param>
            <param name="rsv2"></param>
            <param name="rsv3"></param>
            <param name="opcode"></param>
            <param name="hasmask"></param>
            <param name="length"></param>
        </member>
        <member name="M:Adf.WebSocketDataFrameHeader.GetBytes">
            <summary>
            返回当前帧字节
            </summary>
            <returns></returns>
        </member>
        <member name="T:Adf.NumberHelper">
            <summary>
            数字助手
            </summary>
        </member>
        <member name="M:Adf.NumberHelper.GetRating(System.Single,System.Int32@,System.Int32@)">
            <summary>
            获得分数的整数部分和小数部分
            </summary>
            <param name="rating"></param>
            <param name="bigInt"></param>
            <param name="smallInt"></param>
        </member>
        <member name="M:Adf.NumberHelper.HexToBytes(System.String)">
            <summary>
            将16进制数值转换为Byte数组
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.NumberHelper.BytesToHex(System.Byte[])">
            <summary>
            将Byte数组转换为16进制字符串
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.RedisClientPoolMember">
            <summary>
            Redis 池成员
            </summary>
        </member>
        <member name="M:Adf.RedisClientPoolMember.#ctor(System.String,System.Int32)">
            <summary>
            初始一个新实例
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:Adf.RedisClientPoolMember.CreatePoolInstance">
            <summary>
            创建一个实例
            </summary>
            <returns></returns>
        </member>
        <member name="P:Adf.RedisClientPoolMember.Host">
            <summary>
            获取主机名
            </summary>
        </member>
        <member name="P:Adf.RedisClientPoolMember.Port">
            <summary>
            获取主机端口
            </summary>
        </member>
        <member name="P:Adf.RedisClientPoolMember.PoolActive">
            <summary>
            成员是否可用
            </summary>
        </member>
        <member name="P:Adf.RedisClientPoolMember.PoolMemberId">
            <summary>
            池成员标识
            </summary>
        </member>
        <member name="T:Adf.ListHash">
            <summary>
            哈希数组查找
            </summary>
        </member>
        <member name="M:Adf.ListHash.#ctor(System.Collections.IList,System.Converter{System.Object,System.Object})">
            <summary>
            初始化一个新实例
            </summary>
            <param name="array"></param>
            <param name="converter"></param>
        </member>
        <member name="M:Adf.ListHash.Exists(System.Object)">
            <summary>
            判断一个键是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.ListHash.List">
            <summary>
            列表对象
            </summary>
        </member>
        <member name="P:Adf.ListHash.Item(System.Object)">
            <summary>
            根据键查找一个数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.ListHash`2">
            <summary>
            哈希数组查找
            </summary>
        </member>
        <member name="M:Adf.ListHash`2.#ctor(System.Collections.Generic.IList{`0},System.Converter{`0,`1})">
            <summary>
            初始化一个新实例
            </summary>
            <param name="array"></param>
            <param name="converter"></param>
        </member>
        <member name="M:Adf.ListHash`2.Exists(`1)">
            <summary>
            判断一个键是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.ListHash`2.List">
            <summary>
            列表对象
            </summary>
        </member>
        <member name="P:Adf.ListHash`2.Item(`1)">
            <summary>
            根据键查找一个数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.DynamicInvoke">
            <summary>
            快速方法调用
            </summary>
        </member>
        <member name="M:Adf.DynamicInvoke.#ctor(System.Reflection.MethodInfo)">
            <summary>
            初始实例
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Adf.DynamicInvoke.Invoke(System.Object,System.Object[])">
            <summary>
            调用
            </summary>
            <param name="target">目标对象</param>
            <param name="parameters">方法参数</param>
            <returns></returns>
        </member>
        <member name="P:Adf.DynamicInvoke.MethodInfo">
            <summary>
            获取函数对象
            </summary>
        </member>
        <member name="P:Adf.DynamicInvoke.Parameters">
            <summary>
            获取函数对象参数列表
            </summary>
        </member>
        <member name="T:Adf.Db.MySql">
            <summary>
            MySql 数据操作类
            </summary>
        </member>
        <member name="M:Adf.Db.MySql.#ctor(System.Data.Common.DbProviderFactory,System.Data.IDbConnection)">
            <summary>
            初始化操作类型
            </summary>
            <param name="connection">对象连接</param>
            <param name="factory">工厂</param>
        </member>
        <member name="M:Adf.Db.MySql.GetIdentity``1">
            <summary>
            获取上一执行语句所产生的自增值(此功能不一定支持所有数据库服务器)，如果有误，返回为结果类型初始值
            </summary>
            <typeparam name="T">返回的数据类型</typeparam>
        </member>
        <member name="P:Adf.Db.MySql.SqlBuilder">
            <summary>
            已重载,语句创建
            </summary>
        </member>
        <member name="P:Adf.Db.MySql.ParameterChar">
            <summary>
            获取创建参数时,使用的前缀,默认使用@符,如果当前操作引擎不是,请重写该属性
            </summary>
        </member>
        <member name="T:Adf.Db.AccessSqlBuilder">
            <summary>
            ACCESS 资源产生类
            </summary>
        </member>
        <member name="M:Adf.Db.AccessSqlBuilder.#ctor(Adf.Db.DbFactory)">
            <summary>
            初始化新对象
            </summary>
            <param name="factory">当前操作对象</param>
        </member>
        <member name="M:Adf.Db.AccessSqlBuilder.GetWhere(Adf.Db.DbEntity,System.Data.IDbDataParameter[]@)">
            <summary>
            获取查询条件
            </summary>
            <param name="where">指定的条件生成对象</param>
            <param name="parameters"></param>
        </member>
        <member name="M:Adf.Db.AccessSqlBuilder.GetInsert(Adf.Db.DbEntity,System.Data.IDbDataParameter[]@)">
            <summary>
            get insert sql
            </summary>
            <param name="entity"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Adf.Db.AccessSqlBuilder.GetUpdate(Adf.Db.DbEntity,Adf.Db.DbEntity,System.Data.IDbDataParameter[]@)">
            <summary>
            get update sql
            </summary>
            <param name="where">更新条件</param>
            <param name="update"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Adf.Db.AccessSqlBuilder.PageSql(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            生成分页用Sql语句
            </summary>
            <param name="fields">字段值,前后不带空格,位于 Select 与 From 之间的字段部表示</param>
            <param name="tablename">要进行查询的数据表,可为多个</param>
            <param name="condition">要进行查询的查询串,Where的后缀,如果未有,请设置为 null</param>
            <param name="orderby">排序方法,如果未有排序则为null</param>
            <param name="groupby">分组,分组请设置为null</param>
            <param name="pageindex">页序</param>
            <param name="pagesize">页大小</param>
            <param name="key">键</param>
            <param name="distinct"></param>
            <returns>返回生成后的Sql语句</returns>
        </member>
        <member name="T:Adf.StreamReadState">
            <summary>
            stream read state
            </summary>
        </member>
        <member name="F:Adf.StreamReadState.Buffer">
            <summary>
            get reader bufer
            </summary>
        </member>
        <member name="F:Adf.StreamReadState.BufferSize">
            <summary>
            get buffer size
            </summary>
        </member>
        <member name="F:Adf.StreamReadState.Stream">
            <summary>
            base stream;
            </summary>
        </member>
        <member name="F:Adf.StreamReadState.Callback">
            <summary>
            read completed callback
            </summary>
        </member>
        <member name="F:Adf.StreamReadState.ReadLength">
            <summary>
            completed read length
            </summary>
        </member>
        <member name="F:Adf.StreamReadState.ReadSize">
            <summary>
            wait read size
            </summary>
        </member>
        <member name="F:Adf.StreamReadState.Success">
            <summary>
            Indicates whether the execution succeeded
            </summary>
        </member>
        <member name="F:Adf.StreamReadState.UserState">
            <summary>
            user state
            </summary>
        </member>
        <member name="F:Adf.StreamReadState.Exception">
            <summary>
            failure exception, success is null
            </summary>
        </member>
        <member name="M:Adf.StreamReadState.#ctor(System.IO.Stream,System.Byte[],System.Action{Adf.StreamReadState})">
            <summary>
            initialize new instance
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Adf.StreamReadState.Reset">
            <summary>
            reset variable, and read length zero, and set read size to buffer size
            </summary>
        </member>
        <member name="M:Adf.StreamReadState.Reset(System.Int32)">
            <summary>
            reset variable, and read length zero.
            </summary>
            <param name="readSize">set wait read size</param>
        </member>
        <member name="M:Adf.StreamReadState.Reset(System.Int32,System.Int32)">
            <summary>
            reset variable
            </summary>
            <param name="readLength">set completed read length</param>
            <param name="readSize">set wait read size</param>
        </member>
        <member name="T:Adf.SessionManager">
            <summary>
            session manager, default use <see cref="F:Adf.SessionClient.Instance"/>. configuration SessionServer
            </summary>
        </member>
        <member name="F:Adf.SessionManager.Now">
            <summary>
            instance create time
            </summary>
        </member>
        <member name="M:Adf.SessionManager.#ctor">
            <summary>
            create new instance
            </summary>
        </member>
        <member name="M:Adf.SessionManager.IsSessionId(System.String)">
            <summary>
            判断是否符合会话标识(数字与小写字母)
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.SessionManager.VerifyLogin">
            <summary>
            verify login
            </summary>
        </member>
        <member name="M:Adf.SessionManager.CreateChannel">
            <summary>
            create channel instance, default use <see cref="F:Adf.SessionClient.Instance"/>. use configuration SessionServer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.SessionManager.Login(System.Int64)">
            <summary>
            login a user ,use global ttl
            </summary>
            <param name="uid"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">id no allow zero</exception>
            <returns></returns>
        </member>
        <member name="M:Adf.SessionManager.Login(System.Int64,System.String)">
            <summary>
            login a user ,use global ttl, override please ensure callbacks
            </summary>
            <param name="uid"></param>
            <param name="userToken">define user token, the value keep current session, usertoken可在会话中保持，通过UserToken属性获取</param>
            <exception cref="T:System.ArgumentOutOfRangeException">id no allow zero</exception>
            <exception cref="T:System.ArgumentNullException">user token allow empty, but not equal null.</exception>
            <returns></returns>
        </member>
        <member name="M:Adf.SessionManager.LoginBefore(System.String,System.Int64,System.String,System.String)">
            <summary>
            on login before
            </summary>
            <param name="sid"></param>
            <param name="uid"></param>
            <param name="token"></param>
            <param name="userToken"></param>
            <returns>is allow login</returns>
        </member>
        <member name="M:Adf.SessionManager.LoginAfter(System.String,System.Int64,System.String,System.String)">
            <summary>
            on login after
            </summary>
            <param name="sid"></param>
            <param name="uid"></param>
            <param name="token"></param>
            <param name="userToken"></param>
        </member>
        <member name="M:Adf.SessionManager.Logout">
            <summary>
            Logout, override please ensure callbacks
            </summary>
            <returns>is logout success</returns>
        </member>
        <member name="M:Adf.SessionManager.LogoutBefore(System.String,System.Int64,System.String,System.String)">
            <summary>
            on logout before
            </summary>
            <param name="sid"></param>
            <param name="uid"></param>
            <param name="token"></param>
            <param name="userToken"></param>
            <returns>return is allow logout</returns>
        </member>
        <member name="M:Adf.SessionManager.LogoutAfter(System.String,System.Int64,System.String,System.String)">
            <summary>
            on logout after
            </summary>
            <param name="sid"></param>
            <param name="uid"></param>
            <param name="token"></param>
            <param name="userToken"></param>
        </member>
        <member name="M:Adf.SessionManager.GetUserKey(System.String)">
            <summary>
            get a propose user key name, 获取一个建议的用户键名
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.SessionManager.Call(System.Action{Adf.Memcache})">
            <summary>
            call for session, must set sid, 为会话调用请求,调用此方法必需已设置Sid
            </summary>
            <param name="action"></param>
            <exception cref="T:Adf.SessionException">no set sid</exception>
        </member>
        <member name="P:Adf.SessionManager.SessionClient">
            <summary>
            get session channel, default use <see cref="F:Adf.SessionClient.Instance"/>. configuration SessionServer
            </summary>
        </member>
        <member name="P:Adf.SessionManager.TTL">
            <summary>
            get or set time of live, unit seconds, default 30m, max 30day, set zero for no expired, 
            configuration: SessionManager:TTL=1800
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">value must 1s - 30 day</exception>
        </member>
        <member name="P:Adf.SessionManager.Sid">
            <summary>
            get or set session id
            </summary>
        </member>
        <member name="P:Adf.SessionManager.Uid">
            <summary>
            get or set login user id
            </summary>
        </member>
        <member name="P:Adf.SessionManager.Token">
            <summary>
            get or set session token
            </summary>
        </member>
        <member name="P:Adf.SessionManager.UserToken">
            <summary>
            get or set user defined token
            </summary>
        </member>
        <member name="P:Adf.SessionManager.IsLogin">
            <summary>
            get or set login status
            </summary>
        </member>
        <member name="P:Adf.SessionManager.Data">
            <summary>
            get session data
            </summary>
        </member>
        <member name="T:Adf.HttpServerAction">
            <summary>
            Http Server Action
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.HttpServerActionHandler">
            <summary>
            http server action route
            </summary>
        </member>
        <member name="M:Adf.HttpServerActionHandler.#ctor">
            <summary>
            initialize new instance
            </summary>
        </member>
        <member name="M:Adf.HttpServerActionHandler.#ctor(System.Object)">
            <summary>
            initialize action instance
            </summary>
            <param name="actionInstance"></param>
        </member>
        <member name="M:Adf.HttpServerActionHandler.NotFoundAction(Adf.HttpServerContext)">
            <summary>
            not found action
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpServerActionHandler.DefaultAction(Adf.HttpServerContext)">
            <summary>
            default action
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpServerActionHandler.GetAction(System.String)">
            <summary>
            get http action
            </summary>
            <param name="action"></param>
            <returns>not find is null</returns>
        </member>
        <member name="M:Adf.HttpServerActionHandler.Process(Adf.HttpServerContext)">
            <summary>
            process
            </summary>
            <param name="httpContext"></param>
            <exception cref="T:System.ArgumentNullException">path is null</exception>
            <exception cref="T:System.ArgumentException">path only allow contain a-z0-9</exception>
            <returns></returns>
        </member>
        <member name="T:Adf.LogAgentWriter">
            <summary>
            日志代理书写器
            </summary>
        </member>
        <member name="M:Adf.LogAgentWriter.#ctor(Adf.LogLevel,System.String)">
            <summary>
            初始化新实例
            </summary>
            <param name="name"></param>
            <param name="level"></param>
        </member>
        <member name="M:Adf.LogAgentWriter.#ctor(Adf.LogLevel)">
            <summary>
            初始化新实例
            </summary>
            <param name="level"></param>
        </member>
        <member name="E:Adf.LogAgentWriter.Writing">
            <summary>
            日志写入事件
            </summary>
        </member>
        <member name="E:Adf.LogAgentWriter.Disposed">
            <summary>
            资源释放完成事件
            </summary>
        </member>
        <member name="P:Adf.LogAgentWriter.Level">
            <summary>
            获取当前日志书写器级别
            </summary>
        </member>
        <member name="P:Adf.LogAgentWriter.Name">
            <summary>
            获取日志名
            </summary>
        </member>
        <member name="P:Adf.LogAgentWriter.Enable">
            <summary>
            获取或设置当前日志书写器的启用状态
            </summary>
        </member>
        <member name="T:Adf.IO.BinaryWriterLE">
            <summary>
            字节写书器(Little Endian)
            </summary>
        </member>
        <member name="M:Adf.IO.IBinaryWriter.Write(System.Byte[])">
            <summary>
            写入一组字节内容
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Adf.IO.IBinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从字节组中指定位置处写入指定长度的字节内容
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:Adf.IO.BinaryWriterLE.Dispose">
            <summary>
            清理资源（不会清理初始传入的流）
            </summary>
        </member>
        <member name="P:Adf.IO.BinaryWriterLE.Stream">
            <summary>
            get stream
            </summary>
        </member>
        <member name="P:Adf.IO.BinaryWriterLE.Encoding">
            <summary>
            get encoding
            </summary>
        </member>
        <member name="T:Adf.Smtp">
            <summary>
            Smtp Helper
            </summary>
            <remarks>
            默认实例可通过Smtp.Config,  Global.Config, AppSetting 配置,优先级以 AppSetting->Global.Config->Smtp.Config
            参考： http://www.xiaobo.li/adf/527.html
            </remarks>
        </member>
        <member name="F:Adf.Smtp.Instance">
            <summary>
            默认实例
            </summary>
        </member>
        <member name="F:Adf.Smtp.noProxyStmp">
            <summary>
            无代理发送器
            </summary>
        </member>
        <member name="F:Adf.Smtp.senderRandom">
            <summary>
            发送者地址随机发生器
            </summary>
        </member>
        <member name="M:Adf.Smtp.#ctor">
            <summary>
            初始一个新实例
            </summary>
        </member>
        <member name="M:Adf.Smtp.InitConfig">
            <summary>
            初始化配置
            </summary>
        </member>
        <member name="M:Adf.Smtp.GetSenderAddress">
            <summary>
            获取根据规则处理后的发送者地址
            </summary>
            <exception cref="T:Adf.ConfigException">No configuration or set smtp sender</exception>
            <returns></returns>
        </member>
        <member name="M:Adf.Smtp.Send(System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="subject"></param>
            <param name="to"></param>
            <param name="content"></param>
            <param name="ishtml"></param>
            <exception cref="T:Adf.ConfigException">No configuration or set smtp sender</exception>
            <exception cref="T:Adf.SmtpException"></exception>
        </member>
        <member name="M:Adf.Smtp.Send(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            发送邮件
            </summary>
            <param name="subject"></param>
            <param name="tos"></param>
            <param name="content"></param>
            <param name="ishtml"></param>
            <exception cref="T:Adf.ConfigException">No configuration or set smtp sender</exception>
            <exception cref="T:Adf.SmtpException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">tos is empty</exception>
        </member>
        <member name="M:Adf.Smtp.Send(System.Net.Mail.MailMessage)">
            <summary>
            发送邮件
            </summary>
            <param name="message">消息体，若未填充From属性，则将以配置填充</param>
            <exception cref="T:Adf.SmtpException"></exception>
            <exception cref="T:Adf.ConfigException">No configuration or set smtp sender</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">tos is empty</exception>
            <exception cref="T:System.ArgumentException">No set receiver</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:Adf.Smtp.Send(Adf.Mail.MailMessage)">
            <summary>
            发送邮件
            </summary>
            <param name="message">消息体，若未填充From属性，则将以配置填充</param>
            <exception cref="T:Adf.SmtpException"></exception>
            <exception cref="T:Adf.ConfigException">No configuration or set smtp sender</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">tos is empty</exception>
            <exception cref="T:System.ArgumentException">No set receiver</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:Adf.Smtp.CheckAuth">
            <summary>
            验证授权是否通过
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Smtp.CheckAuth(System.String@)">
            <summary>
            验证授权是否通过
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Smtp.SendNoPorxy(System.Net.Mail.MailMessage)">
            <summary>
            无代理发送（暂不支持一个Message多域发送）
            </summary>
            <param name="message"></param>
            <exception cref="T:Adf.SmtpException"></exception>
        </member>
        <member name="M:Adf.Smtp.SendNoPorxy(Adf.Mail.MailMessage)">
            <summary>
            无代理发送（暂不支持一个Message多域发送）
            </summary>
            <param name="message"></param>
            <exception cref="T:Adf.SmtpException"></exception>
        </member>
        <member name="P:Adf.Smtp.IsSenderRandom">
            <summary>
            发送者地址是否随机
            </summary>
        </member>
        <member name="P:Adf.Smtp.SenderRandomDomain">
            <summary>
            发送者地址随机域名,config:SmtpSenderRandomDomain
            </summary>
        </member>
        <member name="P:Adf.Smtp.Host">
            <summary>
            host, config:SmtpHost
            </summary>
        </member>
        <member name="P:Adf.Smtp.Port">
            <summary>
            port, config:SmtpPort
            </summary>
        </member>
        <member name="P:Adf.Smtp.Sender">
            <summary>
            Sender, config:SmtpSender
            </summary>
        </member>
        <member name="P:Adf.Smtp.Name">
            <summary>
            Sender Name ,config: SmtpName
            </summary>
        </member>
        <member name="P:Adf.Smtp.Account">
            <summary>
            Account ,config:SmtpAccount
            </summary>
        </member>
        <member name="P:Adf.Smtp.Password">
            <summary>
            Password, config:SmtpPassword
            </summary>
        </member>
        <member name="P:Adf.Smtp.Enabled">
            <summary>
            是否可用,config:SmtpEnabled
            </summary>
            <returns></returns>
        </member>
        <member name="P:Adf.Smtp.SSLEnabled">
            <summary>
            是否启用SSL,SSL Enabled ,config: SmtpSSLEnabled
            </summary>
        </member>
        <member name="F:Adf.Smtp.NoProxyStmp.mxrecords">
            <summary>
            mx record. domain,exchange
            </summary>
        </member>
        <member name="M:Adf.Smtp.NoProxyStmp.SendNoPorxy(System.Net.Mail.MailMessage)">
            <summary>
            无代理发送
            </summary>
            <param name="message"></param>
            <exception cref="T:Adf.SmtpException"></exception>
        </member>
        <member name="M:Adf.Smtp.NoProxyStmp.SendNoPorxy(System.String,System.Net.Mail.MailMessage)">
            <summary>
            按域进行无代理发送
            </summary>
            <param name="domain"></param>
            <param name="message"></param>
            <exception cref="T:Adf.SmtpException"></exception>
        </member>
        <member name="F:Adf.Smtp.MXRecordItem.recordList">
            <summary>
            所有DNS列表
            </summary>
        </member>
        <member name="F:Adf.Smtp.MXRecordItem.index">
            <summary>
            当前使用的索引序号
            </summary>
        </member>
        <member name="T:Adf.SmtpException">
            <summary>
            Smtp Exception
            </summary>
        </member>
        <member name="M:Adf.SmtpException.#ctor(System.String)">
            <summary>
            initialize
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Adf.CacheValue`1">
            <summary>
            实例Cache类型
            </summary>
        </member>
        <member name="M:Adf.CacheValue`1.#ctor">
            <summary>
            实始化实例
            </summary>
        </member>
        <member name="M:Adf.CacheValue`1.GetValue(System.Boolean)">
            <summary>
            获取值并指定是否验证过期
            </summary>
            <param name="isValidExpire">是否验证过期</param>
        </member>
        <member name="M:Adf.CacheValue`1.Remove">
            <summary>
            移除实例值
            </summary>
        </member>
        <member name="M:Adf.CacheValue`1.OnInit">
            <summary>
            触发初始化
            </summary>
        </member>
        <member name="M:Adf.CacheValue`1.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="P:Adf.CacheValue`1.Expire">
            <summary>
            获取或设置失效时间
            </summary>
        </member>
        <member name="P:Adf.CacheValue`1.InitTime">
            <summary>
            获取数据初始时间
            </summary>
        </member>
        <member name="P:Adf.CacheValue`1.IsNull">
            <summary>
            获取结果是否为Null
            </summary>
        </member>
        <member name="P:Adf.CacheValue`1.Value">
            <summary>
            获取值
            </summary>
        </member>
        <member name="T:Adf.Pager">
            <summary>
            页序处理
            </summary>
        </member>
        <member name="M:Adf.Pager.#ctor">
            <summary>
            初始化新实例
               --用法:
               var pager = new Pager();
               --数据处理
               pager.Compute('总数');
               --获取值
            </summary>
        </member>
        <member name="M:Adf.Pager.#ctor(System.Int32)">
            <summary>
            初始化新实例
            </summary>
            <param name="pagesize">页大小</param>
        </member>
        <member name="M:Adf.Pager.Compute(System.Int32)">
            <summary>
            计算页序
            </summary>
            <param name="totalcount">总页数</param>
        </member>
        <member name="P:Adf.Pager.TotalCount">
            <summary>
            获取总数
            </summary>
        </member>
        <member name="P:Adf.Pager.PageSize">
            <summary>
            获取或设置页大小
            </summary>
        </member>
        <member name="P:Adf.Pager.PageIndex">
            <summary>
            获取或设置索引
            </summary>
        </member>
        <member name="P:Adf.Pager.LastIndex">
            <summary>
            获取总页数
            </summary>
        </member>
        <member name="P:Adf.Pager.NextIndex">
            <summary>
            获取下一页索引
            </summary>
        </member>
        <member name="P:Adf.Pager.PrevIndex">
            <summary>
            获取上一页索引
            </summary>
        </member>
        <member name="P:Adf.Pager.RecordIndex">
            <summary>
            获取索引开始记录数
            </summary>
        </member>
        <member name="T:Adf.DnsHelper">
            <summary>
            DNS HELPER
            </summary>
        </member>
        <member name="F:Adf.DnsHelper.CACHE_ENABL">
            <summary>
            是否启用缓存
            </summary>
        </member>
        <member name="F:Adf.DnsHelper.QUERY_TIMEOUT">
            <summary>
            查询超时时间（毫秒）
            </summary>
        </member>
        <member name="M:Adf.DnsHelper.GetMXRecordList(System.String)">
            <summary>
            获取MX记录列表
            </summary>
            <param name="domain"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>dns failure, return null , else return values,结果已按优先级排序</returns>
        </member>
        <member name="M:Adf.DnsHelper.ClearCache">
            <summary>
            清理缓存数据
            </summary>
        </member>
        <member name="T:Adf.DnsQuery">
            <summary>
            DNS Query Handler
            </summary>
        </member>
        <member name="M:Adf.DnsQuery.#ctor(System.String)">
            <summary>
            initialize new instance
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:Adf.DnsQuery.QueryMX(System.String)">
            <summary>
            query mx
            </summary>
            <param name="domain"></param>
            <returns>failure reutrn null</returns>
        </member>
        <member name="P:Adf.DnsQuery.Server">
            <summary>
            name server address
            </summary>
        </member>
        <member name="P:Adf.DnsQuery.QueryTimeout">
            <summary>
            set or get query timeout (milliseconds), default 2000
            </summary>
        </member>
        <member name="T:Adf.DnsQuery.DnsQueryType">
            <summary>
            RFC 1035 (https://tools.ietf.org/html/rfc1035#section-3.2.2)
            </summary>
        </member>
        <member name="T:Adf.DnsRecord">
            <summary>
            DNS Record
            </summary>
        </member>
        <member name="F:Adf.DnsRecord.EMPTY">
            <summary>
            空值
            </summary>
        </member>
        <member name="P:Adf.DnsRecord.Value">
            <summary>
            记录值
            </summary>
        </member>
        <member name="P:Adf.DnsRecord.TTL">
            <summary>
            TTL
            </summary>
        </member>
        <member name="P:Adf.DnsRecord.Preference">
            <summary>
            优先级
            </summary>
        </member>
        <member name="P:Adf.DnsRecord.Expired">
            <summary>
            过期时间，Environment.TickCount 值
            </summary>
        </member>
        <member name="T:Adf.Db.WhereRelation">
            <summary>
            查询关系
            </summary>
        </member>
        <member name="F:Adf.Db.WhereRelation.AND">
            <summary>
            AND 关系
            </summary>
        </member>
        <member name="F:Adf.Db.WhereRelation.OR">
            <summary>
            OR 关系
            </summary>
        </member>
        <member name="T:Adf.ConvertHelper">
            <summary>
            convert helper, the convert is safe
            </summary>
        </member>
        <member name="M:Adf.ConvertHelper.StringToArray(System.String,System.Char)">
            <summary>
            string to array
            </summary>
            <param name="ids"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConvertHelper.StringToArray``1(System.String,System.Converter{System.String,``0},System.Char)">
            <summary>
            string to array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids"></param>
            <param name="convert"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConvertHelper.ArrayToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            可列表对象转换为以指定字符分隔的字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputs"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConvertHelper.ArrayToString``1(System.Collections.IEnumerable,System.String,System.Converter{``0,System.String})">
            <summary>
            列表对象以指定方式转换为按指定分隔符分隔的字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputs"></param>
            <param name="separator"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConvertHelper.ArrayToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Converter{``0,System.String})">
            <summary>
            列表对象以指定方式转换为按指定分隔符分隔的字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputs"></param>
            <param name="separator"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConvertHelper.ArrayToDictionary``2(System.Collections.Generic.IEnumerable{``1},System.Converter{``1,``0})">
            <summary>
            将一组对象数组转换为以对象某种规则排列的字曲， 要求列表中生成键值的规则不重复
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TItem"></typeparam>
            <param name="array"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConvertHelper.ArrayCompart``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            数组转换为逗号单条限4000长度分隔字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputs"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConvertHelper.ArrayCompartToString``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            数组转换为逗号限定长度分隔字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputs"></param>
            <param name="itemMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConvertHelper.ArrayCompartToString``1(System.Collections.Generic.IEnumerable{``0},System.Char,System.Int32)">
            <summary>
            数组转换为限定长度分隔字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputs"></param>
            <param name="compart"></param>
            <param name="itemMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConvertHelper.ListCompartToString``2(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            将参数列表转换为单项院4000字符串数组
            </summary>
            <param name="list">列表</param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConvertHelper.ListCompartToString``2(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{``0,``1}},System.Int32)">
            <summary>
            将参数列表转换为字符串数组
            </summary>
            <param name="list">列表</param>
            <param name="itemMaxLength">列表串单项最大长度</param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToInt(System.Object,System.Int32)">
            <summary>
            将类型装换为int类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToInt32(System.Object,System.Int32)">
            <summary>
            将类型装换为int类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToUInt32(System.Object,System.UInt32)">
            <summary>
            将类型装换为int类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToInt16(System.Object,System.Int16)">
            <summary>
            将类型装换为int16类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToUInt16(System.Object,System.UInt16)">
            <summary>
            将类型装换为uint16类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToUInt64(System.Object,System.UInt64)">
            <summary>
            将类型装换为uint64类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToInt64(System.Object,System.Int64)">
            <summary>
            将类型装换为int64类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToString(System.Object,System.String)">
            <summary>
            安全将类型装换为字符串
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToGuid(System.Object,System.Guid)">
            <summary>
            将类型装换为Guid类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值,若无请输入 <see cref="F:System.Guid.Empty"/></param>
            <returns>int类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToDouble(System.Object,System.Double)">
            <summary>
            将类型装换为double类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值</param>
            <returns>double类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToBool(System.Object,System.Boolean)">
            <summary>
            将类型装换为bool类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值</param>
            <returns>bool类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToDecimal(System.Object,System.Decimal)">
            <summary>
            将类型装换为decimal类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值</param>
            <returns>decimal类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToFloat(System.Object,System.Single)">
            <summary>
            将类型装换为float类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值</param>
            <returns>float类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将类型装换为DateTime类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值,若无默认值可设置为 <see cref="F:System.DateTime.MinValue"/></param>
            <returns>DateTime类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToByte(System.Object,System.Byte)">
            <summary>
            将类型转换为byte类型
            </summary>
            <param name="obj">object类型</param>
            <param name="defaultValue">默认值</param>
            <returns>byte类型</returns>
        </member>
        <member name="M:Adf.ConvertHelper.ToEnum``1(System.String,``0,System.Boolean)">
            <summary>
            转换为枚举
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumName"></param>
            <param name="ignoreCase"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConvertHelper.BinToHex(System.Byte[])">
            <summary>
            将字符数组转换成16进制字符串 bin2hex
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConvertHelper.HexToBin(System.String)">
            <summary>
            将16进制字符串转换成字符数组 hex2bin
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.Config.RegularConfig">
            <summary>
            正则配置
            </summary>
        </member>
        <member name="F:Adf.Config.RegularConfig.Instance">
            <summary>
            获取配置实例
            </summary>
        </member>
        <member name="M:Adf.Config.RegularConfig.#ctor">
            <summary>
            初始化新实例
            </summary>
        </member>
        <member name="T:Adf.BinarySerializable">
            <summary>
            二进制序例化处理器
            </summary>
        </member>
        <member name="F:Adf.BinarySerializable.Instance">
            <summary>
            默认的实例
            </summary>
        </member>
        <member name="M:Adf.BinarySerializable.Serialize(System.Object)">
            <summary>
            将对象序例化为二进制
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BinarySerializable.Deserialize(System.Type,System.Byte[])">
            <summary>
            将数组反序例化为对象
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.IntervalLoop">
            <summary>
            interval loop
            </summary>
        </member>
        <member name="M:Adf.IntervalLoop.#ctor">
            <summary>
            initialize new instance, init internval 60s
            </summary>
        </member>
        <member name="M:Adf.IntervalLoop.#ctor(System.Int32)">
            <summary>
            initialize new instance
            </summary>
            <param name="interval">inteval</param>
        </member>
        <member name="M:Adf.IntervalLoop.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="E:Adf.IntervalLoop.Arrived">
            <summary>
            time arrived
            </summary>
        </member>
        <member name="P:Adf.IntervalLoop.Interval">
            <summary>
            get or set interval,  value must than or equal zero, unit seconds, default 60s
            </summary>
        </member>
        <member name="P:Adf.IntervalLoop.IsDisposed">
            <summary>
            get is disposed
            </summary>
        </member>
        <member name="T:Adf.QueueTasks`1">
            <summary>
            队列任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Adf.QueueTasks`1.#ctor(System.Action{`0},System.Int32)">
            <summary>
            初始化新实例
            </summary>
            <param name="action"></param>
            <param name="maxThreadCount">max run thread size,proposal less than or equal 64</param>
            <exception cref="T:System.ArgumentNullException">action is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">maxTaskThreadCount Less than zero</exception>
        </member>
        <member name="M:Adf.QueueTasks`1.Add(`0)">
            <summary>
            添加新任务
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Adf.QueueTasks`1.Clear">
            <summary>
            清空未执行完成的任务
            </summary>
        </member>
        <member name="M:Adf.QueueTasks`1.WaitCompleted">
            <summary>
            等待所有任务完成
            </summary>
        </member>
        <member name="M:Adf.QueueTasks`1.WaitCompleted(System.Int32)">
            <summary>
            等待所有任务完成
            </summary>
            <param name="millisecondsTimeout">超时时间</param>
            <returns>是否已完成</returns>
        </member>
        <member name="M:Adf.QueueTasks`1.Dispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="P:Adf.QueueTasks`1.Count">
            <summary>
            get wait action count
            </summary>
        </member>
        <member name="P:Adf.QueueTasks`1.MaxTaskThreadCount">
            <summary>
            get or set max task thread count
            </summary>
        </member>
        <member name="P:Adf.QueueTasks`1.MaxThreadCount">
            <summary>
            get max thread count
            </summary>
        </member>
        <member name="P:Adf.QueueTasks`1.RunningThreadCount">
            <summary>
            get current running thread count
            </summary>
        </member>
        <member name="P:Adf.QueueTasks`1.CompletedWaitHandle">
            <summary>
            get completed wait handle
            </summary>
        </member>
        <member name="T:Adf.PathRoute`1">
            <summary>
            path route handler
            </summary>
        </member>
        <member name="M:Adf.PathRoute`1.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            initialize new type namespace instance
            </summary>
            <param name="assembly"></param>
            <param name="typeNamespace"></param>
        </member>
        <member name="M:Adf.PathRoute`1.GetType(System.String)">
            <summary>
            get map type of path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.PathRoute`1.GetInstance(System.String)">
            <summary>
            get path instance
            </summary>
            <param name="path">ex: /path,   /part1/part2,   /part1/part2/.../partN</param>
            <exception cref="T:System.ArgumentNullException">path is null</exception>
            <exception cref="T:System.ArgumentException">path only allow contain a-z0-9</exception>
            <returns></returns>
        </member>
        <member name="M:Adf.PathRoute`1.BuildTypeName(System.String)">
            <summary>
            build type name
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.PathRoute`1.TypeNamespace">
            <summary>
            get type namespace
            </summary>
        </member>
        <member name="P:Adf.PathRoute`1.Assembly">
            <summary>
            get assembly
            </summary>
        </member>
        <member name="T:Adf.HttpServerFileParameter">
            <summary>
            HTTP 文件参数
            </summary>
        </member>
        <member name="M:Adf.HttpServerFileParameter.#ctor(System.String,System.String,System.String)">
            <summary>
            妆始化新实例
            </summary>
            <param name="name"></param>
            <param name="fileName"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Adf.HttpServerFileParameter.CreateStream">
            <summary>
            创建文件接收流
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpServerFileParameter.Save(System.String)">
            <summary>
            将数据存储至文件
            </summary>
            <param name="savePath"></param>
        </member>
        <member name="M:Adf.HttpServerFileParameter.Finalize">
            <summary>
            class destroy
            </summary>
        </member>
        <member name="P:Adf.HttpServerFileParameter.Name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:Adf.HttpServerFileParameter.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Adf.HttpServerFileParameter.ContentType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:Adf.HttpServerFileParameter.Stream">
            <summary>
            获取当前文件流对象
            </summary>
        </member>
        <member name="T:Adf.HttpServerMultipartReceiver">
            <summary>
            HTTP 内容分析器
            </summary>
        </member>
        <member name="M:Adf.HttpServerMultipartReceiver.Receive">
            <summary>
            receive
            </summary>
            <exception cref="T:System.IO.InvalidDataException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <returns>is success</returns>
        </member>
        <member name="T:Adf.Config.NameValue">
            <summary>
            字符K-V型配置项
            </summary>
        </member>
        <member name="M:Adf.Config.NameValue.GetConfiguration(System.String)">
            <summary>
            通过单例模式获取一个配置实例
            </summary>
            <param name="fileName">配置文件名称,区分大小写</param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.NameValue.#ctor(System.String)">
            <summary>
            初始化新实例
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:Adf.AESHelper">
            <summary>
            编码助手
            使用此助手建议配置： AESHelper:Key  与 AESHelper:IV ,此两配置均为32位长度字符串
            </summary>
        </member>
        <member name="F:Adf.AESHelper.Encoding">
            <summary>
            默认字符编码, 配置：AESHelper:Encoding，默认为 ASCII
            </summary>
        </member>
        <member name="F:Adf.AESHelper.Key">
            <summary>
            AES 通用加密密钥, 配置：AESHelper:Key
            </summary>
        </member>
        <member name="F:Adf.AESHelper.IV">
            <summary>
            AES 加密向量, 配置：AESHelper:IV
            </summary>
        </member>
        <member name="F:Adf.AESHelper.SIZE">
            <summary>
            AES 加密块大小, 配置：AESHelper:Size，默认为 256
            </summary>
        </member>
        <member name="M:Adf.AESHelper.Encrypt(System.String)">
            <summary>
            使用默认值或配置进行AES 加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.Encrypt(System.String,System.String)">
            <summary>
            AES 加密 (CBC - PCKS7)
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            AES 加密 (CBC - PCKS7)
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.Encrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            AES 加密 (CBC - PCKS7)
            </summary>
            <param name="input"></param>
            <param name="iv"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.Encrypt(System.String,System.Byte[],System.Byte[],System.Text.Encoding)">
            <summary>
            AES 加密  (CBC - PCKS7)
            </summary>
            <param name="input"></param>
            <param name="iv"></param>
            <param name="key"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.Encrypt(System.Int32,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            AES 加密  (CBC - PCKS7)
            </summary>
            <param name="input"></param>
            <param name="iv"></param>
            <param name="key"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.Decrypt(System.String,System.String)">
            <summary>
            AES 解密
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.Decrypt(System.String)">
            <summary>
            使用默认值或配置进行AES 解密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            AES 解密
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.Decrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            AES 解密
            </summary>
            <param name="input"></param>
            <param name="iv"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.Decrypt(System.String,System.Byte[],System.Byte[],System.Text.Encoding)">
            <summary>
            AES 解密 (CBC - PCKS7)
            </summary>
            <param name="input"></param>
            <param name="iv"></param>
            <param name="key"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.Decrypt(System.Int32,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            AES 解密 (CBC - PCKS7)
            </summary>
            <param name="input"></param>
            <param name="iv"></param>
            <param name="key"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.EncryptUrl(System.String)">
            <summary>
            AES 加密，输出成URL友好格式
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.EncryptUrl(System.String,System.String)">
            <summary>
            AES 加密，输出成URL友好格式
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.DecryptUrl(System.String)">
            <summary>
            AES 解密（注意，只能对用EncryptUrl方法进行加密的字符串使用）
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.AESHelper.DecryptUrl(System.String,System.String)">
            <summary>
            AES 解密（注意，只能对用EncryptUrl方法进行加密的字符串使用）
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.PasswordHelper">
            <summary>
            编码助手
            </summary>
        </member>
        <member name="F:Adf.PasswordHelper.IV_CHARS">
            <summary>
            IV CHARS
            </summary>
        </member>
        <member name="F:Adf.PasswordHelper.IV_CHARS_LENGTH">
            <summary>
            IV CHARS LENGTH
            </summary>
        </member>
        <member name="M:Adf.PasswordHelper.MD5Strong(System.String)">
            <summary>
            MD5 encodes the passed string
            </summary>
            <param name="input">The string to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Adf.PasswordHelper.MD5Slat(System.String,System.String)">
            <summary>
            MD5 encodes the passed string
            </summary>
            <param name="input">The string to encode.</param>
            <param name="salt"></param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Adf.PasswordHelper.AES(System.String,System.String)">
            <summary>
            AES Password, Charset UTF8
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.PasswordHelper.AES(System.String,System.String,System.Text.Encoding)">
            <summary>
            AES Password
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.Regular">
            <summary>
            常规正常表达式
            </summary>
        </member>
        <member name="F:Adf.Regular.IS_EMAIL">
            <summary>
            is email
            </summary>
        </member>
        <member name="F:Adf.Regular.HAS_EMAIL">
            <summary>
            has email
            </summary>
        </member>
        <member name="F:Adf.Regular.IS_IPV4">
            <summary>
            is ipv4
            </summary>
        </member>
        <member name="F:Adf.Regular.HAS_IPV4">
            <summary>
            has ipv4
            </summary>
        </member>
        <member name="F:Adf.Regular.IS_IPV6">
            <summary>
            is ipv6
            </summary>
        </member>
        <member name="F:Adf.Regular.HAS_IPV6">
            <summary>
            has ipv6
            </summary>
        </member>
        <member name="F:Adf.Regular.IS_MOBILEOFCHINA">
            <summary>
            is mobile of china
            </summary>
        </member>
        <member name="F:Adf.Regular.IS_CHINESESTRING">
            <summary>
            has mobile of china
            </summary>
        </member>
        <member name="F:Adf.Regular.HAS_CHINESESTRING">
            <summary>
            has chinese language
            </summary>
        </member>
        <member name="F:Adf.Regular.IS_POSTCODEOFCHINA">
            <summary>
            is post code of china
            </summary>
        </member>
        <member name="F:Adf.Regular.IS_NORMAL">
            <summary>
            is normal chr
            </summary>
        </member>
        <member name="F:Adf.Regular.IS_PHONEOFCHINA">
            <summary>
            is phone of china
            </summary>
        </member>
        <member name="F:Adf.Regular.IS_NUMBER">
            <summary>
            is all number
            </summary>
        </member>
        <member name="F:Adf.Regular.IS_NUMBERORFLOAT">
            <summary>
            is number or float number
            </summary>
        </member>
        <member name="T:Adf.TimeIdGenerator">
            <summary>
            time id generate
            </summary>
        </member>
        <member name="M:Adf.TimeIdGenerator.#ctor(System.String,System.UInt16)">
            <summary>
            New Instance
            </summary>
            <param name="key">key ,length 16 bit</param>
            <param name="nodeId"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">key length invalid</exception>
        </member>
        <member name="M:Adf.TimeIdGenerator.Generate">
            <summary>
            generate
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.TimeIdGenerator.GenerateId">
            <summary>
            generate id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.TimeIdGenerator.GenerateHexId">
            <summary>
            generate hex id
            </summary>
            <returns></returns>
        </member>
        <member name="T:Adf.MqReceive`1">
            <summary>
            任务队列接收器
            </summary>
        </member>
        <member name="M:Adf.MqReceive`1.#ctor(System.String,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="name"></param>
            <param name="maxThreadSize"></param>
        </member>
        <member name="M:Adf.MqReceive`1.#ctor(System.String,System.Int32,Adf.LogManager)">
            <summary>
            初始化
            </summary>
            <param name="name"></param>
            <param name="maxThreadSize"></param>
            <param name="logManager"></param>
        </member>
        <member name="M:Adf.MqReceive`1.New(`0)">
            <summary>
            新项
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Adf.MqReceive`1.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="P:Adf.MqReceive`1.Mq">
            <summary>
            MQ
            </summary>
        </member>
        <member name="P:Adf.MqReceive`1.Logger">
            <summary>
            管理器
            </summary>
        </member>
        <member name="P:Adf.MqReceive`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Adf.MemcacheDefault">
            <summary>
            以 MemcacheCache 为配置的默认单例实例
            </summary>
        </member>
        <member name="F:Adf.MemcacheDefault.Instance">
            <summary>
            一个 MemcacheCache 实例
            </summary>
        </member>
        <member name="T:Adf.CompressHelper">
            <summary>
            压缩助手
            </summary>
        </member>
        <member name="M:Adf.CompressHelper.Compress(System.Byte[])">
            <summary>
            压缩
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.CompressHelper.Decompress(System.Byte[])">
            <summary>
            解压
            </summary>
            <param name="gzBuffer"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.Base64Helper">
            <summary>
            Base64 Helper
            </summary>
        </member>
        <member name="F:Adf.Base64Helper.DefaultEncoding">
            <summary>
            默认的字符编码,默认为ASCII
            </summary>
            <remarks>可通过配置 Base64Helper:DefaultEncoding 设置 </remarks>
        </member>
        <member name="M:Adf.Base64Helper.EncodeUrl(System.String)">
            <summary>
            使用默认的Base64编码可用的URL字符串
            </summary>
            <param name="inputString"></param>
        </member>
        <member name="M:Adf.Base64Helper.EncodeUrl(System.String,System.Text.Encoding)">
            <summary>
            使用Base64编码可用的URL字符串
            </summary>
            <param name="encoding"></param>
            <param name="inputString"></param>
        </member>
        <member name="M:Adf.Base64Helper.DecodeUrl(System.String)">
            <summary>
            使用默认编码将UrlBase64编码串转换为源字符串
            </summary>
            <param name="urlString"></param>
        </member>
        <member name="M:Adf.Base64Helper.DecodeUrl(System.String,System.Text.Encoding)">
            <summary>
            将UrlBase64编码串转换为源字符串
            </summary>
            <param name="encoding"></param>
            <param name="urlString"></param>
        </member>
        <member name="T:Adf.NativeBinarySerializable">
            <summary>
            本地数据二进制处理
            </summary>
        </member>
        <member name="F:Adf.NativeBinarySerializable.encoding">
            <summary>
            获取当前正使用的编码
            </summary>
        </member>
        <member name="M:Adf.NativeBinarySerializable.#ctor(System.Text.Encoding)">
            <summary>
            初始化
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:Adf.NativeBinarySerializable.IsHandled(System.Object)">
            <summary>
            是否为可直接处理数据类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.LogException">
            <summary>
            日志相关异常
            </summary>
        </member>
        <member name="M:Adf.LogException.#ctor(System.String)">
            <summary>
            初始化新实例
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Adf.LogException.Manager">
            <summary>
            获取或设置引发异常的日志管理器
            </summary>
        </member>
        <member name="P:Adf.LogException.Writer">
            <summary>
            获取或设置引发异常的写书器
            </summary>
        </member>
        <member name="T:Adf.HttpStatusHelper">
            <summary>
            HTTP 状态描述
            </summary>
        </member>
        <member name="M:Adf.HttpStatusHelper.GetStatusDescription(System.Net.HttpStatusCode)">
            <summary>
            获取指定状态描述
            </summary>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpStatusHelper.GetStatusDescription(System.Int32)">
            <summary>
            获取指定状态描述
            </summary>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.SocketConnection.SocketListenerException">
            <summary>
            socket listener exception
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketListenerException.#ctor(System.String)">
            <summary>
            init new instance
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketListenerException.#ctor(System.String,System.Exception)">
            <summary>
            init new instance
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:Adf.SocketConnection.IConnectionHandler">
            <summary>
            connection handler interface
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.IConnectionHandler.Parse(Adf.SocketConnection.SocketConnection,System.Byte)">
            <summary>
            parse message 
            </summary>
            <param name="connection"></param>
            <param name="firstByte"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.LogAgent">
            <summary>
            日志代理器
            </summary>
        </member>
        <member name="F:Adf.LogAgent.Default">
            <summary>
            default instance
            </summary>
        </member>
        <member name="M:Adf.LogAgent.#ctor">
            <summary>
            初始化新实例
            </summary>
        </member>
        <member name="M:Adf.LogAgent.ForEach(System.Action{Adf.ILogWriter})">
            <summary>
            遍历当前代理的所有书写器的
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Adf.LogAgent.GetWriter(Adf.LogLevel,System.String)">
            <summary>
            get a writer
            </summary>
            <param name="level"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LogAgent.SetLevelFlags(System.Int32)">
            <summary>
            set level flags
            </summary>
            <param name="levelFlags"></param>
        </member>
        <member name="E:Adf.LogAgent.Writing">
            <summary>
            新的日志事件
            </summary>
        </member>
        <member name="P:Adf.LogAgent.WriterCount">
            <summary>
            get writer count
            </summary>
        </member>
        <member name="P:Adf.LogAgent.Message">
            <summary>
            get message writer
            </summary>
        </member>
        <member name="P:Adf.LogAgent.Debug">
            <summary>
            get debug writer
            </summary>
        </member>
        <member name="P:Adf.LogAgent.Warning">
            <summary>
            get warning writer
            </summary>
        </member>
        <member name="P:Adf.LogAgent.Error">
            <summary>
            get error writer
            </summary>
        </member>
        <member name="P:Adf.LogAgent.LevelFlags">
            <summary>
            get level flags
            </summary>
        </member>
        <member name="T:Adf.QueueTask`1">
            <summary>
            队列任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Adf.QueueTask`1.#ctor(System.Action{`0})">
            <summary>
            初始化新实例
            </summary>
            <param name="action"></param>
            <exception cref="T:System.ArgumentNullException">action is null</exception>
        </member>
        <member name="M:Adf.QueueTask`1.Add(`0)">
            <summary>
            添加新任务
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Adf.QueueTask`1.Clear">
            <summary>
            清空未执行完成的任务
            </summary>
        </member>
        <member name="M:Adf.QueueTask`1.WaitCompleted">
            <summary>
            等待所有任务完成
            </summary>
        </member>
        <member name="M:Adf.QueueTask`1.WaitCompleted(System.Int32)">
            <summary>
            等待所有任务完成
            </summary>
            <param name="millisecondsTimeout">超时时间</param>
            <returns>是否已完成</returns>
        </member>
        <member name="M:Adf.QueueTask`1.Dispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="P:Adf.QueueTask`1.Count">
            <summary>
            get wait action count
            </summary>
        </member>
        <member name="T:Adf.RedisConnection">
            <summary>
            Redis 客户端
            </summary>
        </member>
        <member name="F:Adf.RedisConnection.CRLF">
            <summary>
            CRLF
            </summary>
        </member>
        <member name="M:Adf.RedisConnection.#ctor(Adf.RedisClient)">
            <summary>
            client
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:Adf.WebSocketCloseEventArgs">
            <summary>
            关闭事件
            </summary>
        </member>
        <member name="M:Adf.WebSocketCloseEventArgs.#ctor(Adf.WebSocketCloseReason)">
            <summary>
            初始化新实例
            </summary>
            <param name="reason"></param>
        </member>
        <member name="P:Adf.WebSocketCloseEventArgs.Reason">
            <summary>
            关闭原因
            </summary>
        </member>
        <member name="T:Adf.WebSocketMessageEventArgs">
            <summary>
            WebSocketMessageEvent Args
            </summary>
        </member>
        <member name="M:Adf.WebSocketMessageEventArgs.#ctor(Adf.WebSocketOpcode)">
            <summary>
            初始数据
            </summary>
            <param name="opcode"></param>
        </member>
        <member name="P:Adf.WebSocketMessageEventArgs.Message">
            <summary>
            获取消息体
            </summary>
        </member>
        <member name="P:Adf.WebSocketMessageEventArgs.Buffer">
            <summary>
            获取二进制传输时的二进制数据
            </summary>
        </member>
        <member name="P:Adf.WebSocketMessageEventArgs.Opcode">
            <summary>
            获取消息体 Opcode
            </summary>
        </member>
        <member name="T:Adf.WebSocketErrorEventArgs">
            <summary>
            错误事件参数
            </summary>
        </member>
        <member name="M:Adf.WebSocketErrorEventArgs.#ctor(System.Exception)">
            <summary>
            初始化新实例
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:Adf.WebSocketErrorEventArgs.Exception">
            <summary>
            获取引发事件的异常
            </summary>
        </member>
        <member name="T:Adf.WebSocketSendEventArgs">
            <summary>
            异步发送完成事件数据
            </summary>
        </member>
        <member name="M:Adf.WebSocketSendEventArgs.#ctor(System.Object)">
            <summary>
            初始化新实例，置状态为成功
            </summary>
            <param name="userState"></param>
        </member>
        <member name="M:Adf.WebSocketSendEventArgs.#ctor(System.Exception,System.Object)">
            <summary>
            初始化新实例，置状态为失败
            </summary>
            <param name="userState"></param>
            <param name="exception"></param>
        </member>
        <member name="P:Adf.WebSocketSendEventArgs.Exception">
            <summary>
            获取或设置异常信息
            </summary>
        </member>
        <member name="P:Adf.WebSocketSendEventArgs.IsSuccess">
            <summary>
            获取或设置一个值表示发送是否成功
            </summary>
        </member>
        <member name="P:Adf.WebSocketSendEventArgs.UserState">
            <summary>
            获取用户请求时状态保持数据
            </summary>
        </member>
        <member name="T:Adf.WaitTable">
            <summary>
            wait table
            </summary>
        </member>
        <member name="M:Adf.WaitTable.#ctor">
            <summary>
            initialize new instance
            </summary>
        </member>
        <member name="M:Adf.WaitTable.NewIdentity">
            <summary>
            create a new identity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.WaitTable.Remove(Adf.WaitTableHandle)">
            <summary>
            craete a handle
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.WaitTable.Add(Adf.WaitTableHandle)">
            <summary>
            join a handle
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.WaitTable.Create">
            <summary>
            craete a wait table handle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.WaitTable.GetHandle(System.Int64)">
            <summary>
            get handle
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.WaitTable.GetHandles">
            <summary>
            get all handles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.WaitTable.Dispose">
            <summary>
            clean resource
            </summary>
        </member>
        <member name="T:Adf.WaitTableHandle">
            <summary>
            wait table handle
            </summary>
        </member>
        <member name="M:Adf.WaitTableHandle.#ctor(Adf.WaitTable)">
            <summary>
            initialize new instance
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Adf.WaitTableHandle.Dispose(System.Boolean)">
            <summary>
            在派生类中被重写时，释放由当前 System.Threading.WaitHandle 持有的所有资源。
            </summary>
            <param name="explicitDisposing"></param>
        </member>
        <member name="P:Adf.WaitTableHandle.UserState">
            <summary>
            user state
            </summary>
        </member>
        <member name="P:Adf.WaitTableHandle.UserIdentity">
            <summary>
            user identity state
            </summary>
        </member>
        <member name="P:Adf.WaitTableHandle.Identity">
            <summary>
            identity
            </summary>
        </member>
        <member name="P:Adf.WaitTableHandle.Table">
            <summary>
            table
            </summary>
        </member>
        <member name="T:Adf.Image.ImageMarkPosition">
            <summary>
            水印图片位置说明
            </summary>
        </member>
        <member name="F:Adf.Image.ImageMarkPosition.Bottom_Right">
            <summary>
            右下角，可设置margin属性以设置边距
            </summary>
        </member>
        <member name="F:Adf.Image.ImageMarkPosition.Bottom_Left">
            <summary>
            左下角，可设置margin属性以设置边距
            </summary>
        </member>
        <member name="F:Adf.Image.ImageMarkPosition.Top_Right">
            <summary>
            右上角，可设置margin属性以设置边距
            </summary>
        </member>
        <member name="F:Adf.Image.ImageMarkPosition.Top_Left">
            <summary>
            左上角，可设置margin属性以设置边距
            </summary>
        </member>
        <member name="F:Adf.Image.ImageMarkPosition.Center">
            <summary>
            正中间
            </summary>
        </member>
        <member name="F:Adf.Image.ImageMarkPosition.Custom">
            <summary>
            定制，以Top与Left设置为准
            </summary>
        </member>
        <member name="T:Adf.RedisClientPool">
            <summary>
            Redis Cache 管理器
            </summary>
        </member>
        <member name="M:Adf.RedisClientPool.#ctor">
            <summary>
            初始化新实例
            </summary>
        </member>
        <member name="M:Adf.RedisClientPool.#ctor(System.String)">
            <summary>
            初始化新实例
            </summary>
            <param name="configName"></param>
        </member>
        <member name="M:Adf.RedisClientPool.Init(System.String)">
            <summary>
            初始化
            </summary>
            <param name="configName"></param>
        </member>
        <member name="M:Adf.RedisClientPool.Set(System.String,System.String,System.Int32)">
            <summary>
            设置一个字符值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires"></param>
        </member>
        <member name="M:Adf.RedisClientPool.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置一个字符值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires"></param>
        </member>
        <member name="M:Adf.RedisClientPool.Get(System.String)">
            <summary>
            获取一个字符值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClientPool.Get``1(System.String)">
            <summary>
            获取一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClientPool.Get(System.String,System.Type)">
            <summary>
            获取一个对象
            </summary>
            <param name="type"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisClientPool.Delete(System.String)">
            <summary>
            移除一个键
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Adf.RedisClientPool.Pool">
            <summary>
            获取池管理对象
            </summary>
        </member>
        <member name="P:Adf.RedisClientPool.Name">
            <summary>
            配置节点名
            </summary>
        </member>
        <member name="P:Adf.RedisClientPool.MemberPoolSize">
            <summary>
            获取每成员的最大实例数
            </summary>
        </member>
        <member name="T:Adf.RedisClientDefault">
            <summary>
            以 RedisCache 为配置的默认单例实例
            </summary>
        </member>
        <member name="F:Adf.RedisClientDefault.Instance">
            <summary>
            一个 RedisCache 实例
            </summary>
        </member>
        <member name="T:Adf.JsonHelper">
            <summary>
            Json Helper
            </summary>
        </member>
        <member name="M:Adf.JsonHelper.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.JsonHelper.Serialize(System.Object,System.Boolean)">
            <summary>
            序列化
            </summary>
            <param name="value"></param>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.JsonHelper.DeserializeBase(System.String)">
            <summary>
            将JSON字符串解码为一个基础类型对象
            </summary>
            <param name="json"></param>
            <returns>An ArrayList, a Hashtable, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:Adf.JsonHelper.Deserialize(System.String)">
            <summary>
            将JSON字符串解码
            </summary>
            <param name="json"></param>
            <returns>An ArrayList, a Dictionary&gt;string,object&lt;, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:Adf.JsonHelper.Deserialize(System.Type,System.String)">
            <summary>
            返序列化为一个对象
            </summary>
            <param name="json"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.JsonHelper.Deserialize``1(System.String)">
            <summary>
            返序列化为一个对象
            </summary>
            <param name="json"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Adf.JsonHelper.ConvertValueCustom(System.Object,System.Type,System.Object@)">
            <summary>
            转换值时的自处理回调
            </summary>
            <param name="value"></param>
            <param name="objectType"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.JsonHelper.EncodeValue(System.Object,System.Boolean)">
            <summary>
            编码一个值,仅支持基础数据类型
            </summary>
            <param name="value"></param>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.JsonHelper.EncodeValue(System.String,System.Boolean)">
            <summary>
            编码字符串
            </summary>
            <param name="inputString"></param>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.Config.ServerConfigItem">
            <summary>
            Server Config Item
            </summary>
        </member>
        <member name="P:Adf.Config.ServerConfigItem.Ip">
            <summary>
            Ip Address
            </summary>
        </member>
        <member name="P:Adf.Config.ServerConfigItem.Port">
            <summary>
            port
            </summary>
        </member>
        <member name="P:Adf.Config.ServerConfigItem.Level">
            <summary>
            config level
            </summary>
        </member>
        <member name="P:Adf.Config.ServerConfigItem.Description">
            <summary>
            description
            </summary>
        </member>
        <member name="T:Adf.ObjectCache`1">
            <summary>
            Object Object
            对象缓存器, 将一组对象拆分为: 盒(box)与单个对象(object)，进行缓存
            此方法不适合一组对象过大的情况
            </summary>
        </member>
        <member name="M:Adf.ObjectCache`1.#ctor">
            <summary>
            初始新实例
            </summary>
        </member>
        <member name="M:Adf.ObjectCache`1.GetObjectSource(System.String)">
            <summary>
            根据缓存键从数据源获取单项数据
            </summary>
            <param name="objectCacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ObjectCache`1.GetObjectListSource(System.String[])">
            <summary>
            根据缓存键从数据源获取多项数据
            </summary>
            <param name="objectCacheKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ObjectCache`1.BuildObjectCacheKey(`0)">
            <summary>
            生成单项缓存键
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ObjectCache`1.SaveBox(System.String,System.Collections.IEnumerable)">
            <summary>
            根据数据存储该数据缓存盒
            </summary>
            <param name="data">数据</param>
            <param name="boxCacheKey">缓存盒键</param>
            <returns></returns>
        </member>
        <member name="M:Adf.ObjectCache`1.GetData(System.String)">
            <summary>
            执行一个缓存处理
            </summary>
            <param name="boxCacheKey">缓存盒键</param>
            <returns>null is not exist</returns>
        </member>
        <member name="M:Adf.ObjectCache`1.GetObjectList(System.String[])">
            <summary>
            根据缓存值获取数据
            </summary>
            <param name="objectCacheKeys"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">data no match parameters objectCacheKeys</exception>
        </member>
        <member name="M:Adf.ObjectCache`1.GetObject(System.String)">
            <summary>
            根据缓存键获取单项数据
            </summary>
            <param name="objectCacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ObjectCache`1.BuildObjectCacheKey(System.Object)">
            <summary>
            生成单项缓存键
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.ObjectCache`1.ThreadCount">
            <summary>
            支持同时获取缓存的线程数，默认： 5
            </summary>
        </member>
        <member name="P:Adf.ObjectCache`1.MultiThreadThreshold">
            <summary>
            进行多线程处理时的数据值阀值,默认：3
            </summary>
        </member>
        <member name="P:Adf.ObjectCache`1.ObjectExpires">
            <summary>
            单个对象过期时间,默认：300秒
            </summary>
        </member>
        <member name="P:Adf.ObjectCache`1.BoxExpires">
            <summary>
            盒子储过期时间,默认：300秒
            </summary>
        </member>
        <member name="P:Adf.ObjectCache`1.Cache">
            <summary>
            获取缓存实例
            </summary>
        </member>
        <member name="P:Adf.ObjectCache`1.KeepGanged">
            <summary>
            联动保持，当为true时确保任一对象失效时盒子也失效, 默认 false
            启用此值在会导致缓存对象写入频率增加，应谨慎设置
            </summary>
        </member>
        <member name="T:Adf.SocketReader">
            <summary>
            Socket 读取器
            </summary>
        </member>
        <member name="M:Adf.SocketReader.#ctor(System.Net.Sockets.Socket,System.Text.Encoding,System.Int32)">
            <summary>
            initialize new instance
            </summary>
            <param name="socket"></param>
            <param name="encoding"></param>
            <param name="maxLength"></param>
        </member>
        <member name="M:Adf.SocketReader.Read">
            <summary>
            read a byte from Socket
            </summary>
            <returns></returns>
            <exception cref="T:System.Net.Sockets.SocketException">remote host has been closed</exception>
            <exception cref="T:System.InvalidOperationException">exceed the permitted maximum length</exception>
        </member>
        <member name="M:Adf.SocketReader.ReadByteLine">
            <summary>
            read a bytes for a line
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">remote host has been closed</exception>
            <exception cref="T:System.InvalidOperationException">request entity exceed the permitted maximum length</exception>
            <returns></returns>
        </member>
        <member name="M:Adf.SocketReader.ReadStringLine">
            <summary>
            read a string for a line
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">remote host has been closed</exception>
            <exception cref="T:System.InvalidOperationException">request entity exceed the permitted maximum length</exception>
            <returns></returns>
        </member>
        <member name="P:Adf.SocketReader.MaxLength">
            <summary>
            get max read length
            </summary>
        </member>
        <member name="P:Adf.SocketReader.Socket">
            <summary>
            get current socket
            </summary>
        </member>
        <member name="P:Adf.SocketReader.Encoding">
            <summary>
            get encoding
            </summary>
        </member>
        <member name="P:Adf.SocketReader.ReadAllLength">
            <summary>
            get all read length
            </summary>
        </member>
        <member name="T:Adf.Skip32Cipher">
            <summary>
            Skip32 C# implementation.
            32-bit block cipher based on Skipjack.
            
            Adaptation of the skip32 C implementation:
            http://www.qualcomm.com.au/PublicationsDocs/skip32.c
            
            Heavily influenced by the php adaptation
            https://github.com/nlenepveu/Skip32
            </summary>
        </member>
        <member name="M:Adf.Skip32Cipher.Encrypt(System.Int32)">
            <summary>
            Encrypts a 32-bit integer.
            </summary>
            <param name="value">Value to encrypt.</param>
            <returns>Encrypted value.</returns>
        </member>
        <member name="M:Adf.Skip32Cipher.Encrypt(System.Int64)">
            <summary>
            Encrypts a 64-bit integer.
            </summary>
            <param name="value">Value to encrypt.</param>
            <returns>Encrypted value.</returns>
        </member>
        <member name="M:Adf.Skip32Cipher.Encrypt(System.Byte[])">
            <summary>
            Encrypts a 4-byte array.
            </summary>
            <param name="value">Byte array to encrypt.  Must be 4 bytes.</param>
            <returns>4-byte encrypted array.</returns>
        </member>
        <member name="M:Adf.Skip32Cipher.Encrypt(System.Byte[],System.Int32)">
            <summary>
            Encrypts a 4-byte portion of an array.
            </summary>
            <param name="value">Byte array to encrypt.</param>
            <param name="start">Index into the byte array to start encrypting.  Only the 4 bytes starting at this index will be encrypted.</param>
            <returns>4-byte encrypted array.</returns>
        </member>
        <member name="M:Adf.Skip32Cipher.Decrypt(System.Int32)">
            <summary>
            Decrypts a 32-bit integer.
            </summary>
            <param name="value">Value to decrypt.</param>
            <returns>Decrypted value.</returns>
        </member>
        <member name="M:Adf.Skip32Cipher.Decrypt(System.UInt32)">
            <summary>
            Decrypts a 32-bit integer.
            </summary>
            <param name="value">Value to decrypt.</param>
            <returns>Decrypted value.</returns>
        </member>
        <member name="M:Adf.Skip32Cipher.Decrypt(System.Int64)">
            <summary>
            Decrypts a 64-bit integer.
            </summary>
            <param name="value">Value to decrypt.</param>
            <returns>Decrypted value.</returns>
        </member>
        <member name="M:Adf.Skip32Cipher.Decrypt(System.Byte[])">
            <summary>
            Decrypts a 4-byte array.
            </summary>
            <param name="value">Byte array to decrypt.  Must be 4 bytes.</param>
            <returns>4-byte decrypted array.</returns>
        </member>
        <member name="M:Adf.Skip32Cipher.Decrypt(System.Byte[],System.Int32)">
            <summary>
            Decrypts a 4-byte portion of an array.
            </summary>
            <param name="value">Byte array to decrypt.</param>
            <param name="start">Index into the byte array to start decrypting.  Only the 4 bytes starting at this index will be decrypted.</param>
            <returns>4-byte decrypted array.</returns>
        </member>
        <member name="T:Adf.Mail.SmtpClient">
            <summary>
            使用简单邮件传输协议 (SMTP) 发送电子邮件。
            </summary>
        </member>
        <member name="M:Adf.Mail.SmtpClient.#ctor">
            <summary>
            使用配置文件设置初始化新实例,并指定主机
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">port 不能小于 0</exception>
        </member>
        <member name="M:Adf.Mail.SmtpClient.#ctor(System.String,System.Int32)">
            <summary>
            使用配置文件设置初始化新实例,并指定主机
            </summary>
            <param name="host">System.String，包含用于 SMTP 事务的主机的名称或 IP 地址。</param>
            <param name="port">大于 0 的 System.Int32，包含要在 host 上使用的端口。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">port 不能小于 0</exception>
        </member>
        <member name="M:Adf.Mail.SmtpClient.Send(Adf.Mail.MailMessage)">
            <summary>
            send a message
            </summary>
            <param name="message"></param>
            <exception cref="T:Adf.SmtpException">send failure</exception>
            <exception cref="T:System.ArgumentNullException">message is null</exception>
            <exception cref="T:System.ArgumentException">no recipients or no from in message</exception>
            <exception cref="T:System.ObjectDisposedException">instance is disposed</exception>
            <exception cref="T:System.IO.IOException">network error</exception>
        </member>
        <member name="M:Adf.Mail.SmtpClient.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="M:Adf.Mail.SmtpClient.ReceiveResponse">
            <summary>
            接收SMTP服务器回应
            </summary>
        </member>
        <member name="M:Adf.Mail.SmtpClient.Write(System.String)">
            <summary>
            写入内容
            </summary>
            <param name="input">要写入的字符串</param>
        </member>
        <member name="M:Adf.Mail.SmtpClient.Dialog(System.String,System.String,System.String)">
            <summary>
            与服务器交互，发送一条命令并接收回应，并返回网络操作是否正确。
            </summary>
            <param name="request">一个要发送的命令</param>
            <param name="successCode">要与服务器端所返回的代码进行验证的代码值</param>
            <param name="description">请求描述</param>
        </member>
        <member name="M:Adf.Mail.SmtpClient.CheckError(System.String,System.String)">
            <summary>
            验证正确性
            </summary>
            <param name="successCode"></param>
            <param name="description"></param>
        </member>
        <member name="P:Adf.Mail.SmtpClient.MaxSize">
            <summary>
            获取当前连接支持的最大尺寸，为0则表示不支持该属性对比
            </summary>
        </member>
        <member name="P:Adf.Mail.SmtpClient.EnableSsl">
            <summary>
            指定是否使用安全套接字层 (SSL) 加密连接。
            </summary>
        </member>
        <member name="P:Adf.Mail.SmtpClient.EnableTls">
            <summary>
            指定允许使用安全套接字层 (STARTSSL) 加密连接。
            </summary>
        </member>
        <member name="P:Adf.Mail.SmtpClient.LocalEndPoint">
            <summary>
            获取或设置应用连接的本地接口
            </summary>
            <exception cref="T:System.ArgumentNullException">value is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="P:Adf.Mail.SmtpClient.Host">
            <summary>
            获取主机的名称或 IP 地址。
            </summary>
        </member>
        <member name="P:Adf.Mail.SmtpClient.Port">
            <summary>
            获取主机端口
            </summary>
        </member>
        <member name="P:Adf.Mail.SmtpClient.Timeout">
            <summary>
            获取或设置一个值，该值指定同步发送超时时间（以毫秒为单位）
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than zero.</exception>
        </member>
        <member name="P:Adf.Mail.SmtpClient.Password">
            <summary>
            获取或设置与凭据关联的用户名的密码。
            </summary>
        </member>
        <member name="P:Adf.Mail.SmtpClient.UserName">
            <summary>
            获取或设置与凭据关联的用户名。
            </summary>
        </member>
        <member name="P:Adf.Mail.SmtpClient.LogWriter">
            <summary>
            获取或设置日志书写器,禁用则设置为null
            </summary>
        </member>
        <member name="P:Adf.Mail.SmtpClient.SelfHost">
            <summary>
            获取或设置当前发送域主机名称，设置为你当前主机的公网域名，建议设置该值, 默认为当前主机名
            </summary>
        </member>
        <member name="P:Adf.Mail.SmtpClient.Connected">
            <summary>
            获取是否已连接
            </summary>
        </member>
        <member name="T:Adf.Mail.MailAddress">
            <summary>
            邮件用户
            </summary>
        </member>
        <member name="M:Adf.Mail.MailAddress.#ctor(System.String)">
            <summary>
            使用指定的地址初始化新实例。
            </summary>
            <param name="mailAddress">包含电子邮件地址。</param>
            <exception cref="T:System.ArgumentException">address invalid</exception>
        </member>
        <member name="M:Adf.Mail.MailAddress.#ctor(System.String,System.String)">
            <summary>
            使用指定的地址初始化新实例。
            </summary>
            <param name="name">邮件显示名</param>
            <param name="mailAddress">包含电子邮件地址。</param>
            <exception cref="T:System.ArgumentException">address invalid</exception>
        </member>
        <member name="P:Adf.Mail.MailAddress.Address">
            <summary>
            获取创建此实例时指定的电子邮件地址。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailAddress.Host">
            <summary>
            获取创建此实例时指定的地址的主机部分。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailAddress.User">
            <summary>
            获取创建此实例时指定的地址中的用户信息。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailAddress.Name">
            <summary>
            获取创建此实例时指定的地址中的用户显示名。
            </summary>
        </member>
        <member name="T:Adf.Config.LogConfig">
            <summary>
            日志配置
            </summary>
        </member>
        <member name="F:Adf.Config.LogConfig.Instance">
            <summary>
            获取配置实例
            </summary>
        </member>
        <member name="T:Adf.Config.ConfigWatcher">
            <summary>
            配置文件监控
            </summary>
        </member>
        <member name="F:Adf.Config.ConfigWatcher.INTERVAL_MILLISECONDS">
            <summary>
            check interval, default 30000(30s)
            </summary>
        </member>
        <member name="F:Adf.Config.ConfigWatcher.Watcher">
            <summary>
            get watcher instance
            </summary>
        </member>
        <member name="M:Adf.Config.ConfigWatcher.AddConfig(System.String,Adf.Config.IConfig)">
            <summary>
            添加一个配置文件监控，注意： 若同名则会使用新对象覆盖旧有
            </summary>
            <param name="filename">文件名不区分大小写</param>
            <param name="config"></param>
        </member>
        <member name="M:Adf.Config.ConfigWatcher.Exists(System.String)">
            <summary>
            指定的文件是否已被配置
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigWatcher.GetFileNames">
            <summary>
            返回已配置文件清单
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ConfigWatcher.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="T:Adf.IO.BinaryReaderBE">
            <summary>
            字节读取器(Big Endian)
            </summary>
            <exception cref="T:System.IO.IOException">全系列读取方法均有可能引发此异常。</exception>
        </member>
        <member name="M:Adf.IO.BinaryReaderBE.Dispose">
            <summary>
            清理资源（不会清理初始传入的流）
            </summary>
        </member>
        <member name="P:Adf.IO.BinaryReaderBE.Stream">
            <summary>
            get stream
            </summary>
        </member>
        <member name="P:Adf.IO.BinaryReaderBE.Encoding">
            <summary>
            get encoding
            </summary>
        </member>
        <member name="T:Adf.Counter">
            <summary>
            计数器
            </summary>
        </member>
        <member name="M:Adf.Counter.#ctor">
            <summary>
            initialze new instance
            </summary>
        </member>
        <member name="M:Adf.Counter.#ctor(System.Int64)">
            <summary>
            initialze new instance
            </summary>
            <param name="init"></param>
        </member>
        <member name="M:Adf.Counter.Reset">
            <summary>
            以原子操作的形式，将值设置为初始值并返回原始值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Counter.Set(System.Int64)">
            <summary>
            以原子操作的形式，将值设置为指定值并返回原始值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Adf.Counter.Increment">
            <summary>
            值增量
            </summary>
        </member>
        <member name="M:Adf.Counter.Decrement">
            <summary>
            值减量
            </summary>
        </member>
        <member name="M:Adf.Counter.Increment(System.Int64)">
            <summary>
            值增量
            </summary>
            <param name="incrValue"></param>
        </member>
        <member name="M:Adf.Counter.Decrement(System.Int64)">
            <summary>
            值减量
            </summary>
            <param name="decrValue"></param>
        </member>
        <member name="P:Adf.Counter.Init">
            <summary>
            get counter init value
            </summary>
        </member>
        <member name="P:Adf.Counter.Value">
            <summary>
            get counter value
            </summary>
        </member>
        <member name="T:Adf.BaseDataConverter">
            <summary>
            基础数据类型与字节数组相互转换工具, 此转换工具中数值转换序列以Big Endian方式进行
            </summary>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Int64)">
            <summary>
            Int64 to Bytes , Big Endian
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.Int64)">
            <summary>
            Int64 to Bytes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Int64 to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Int64 to Bytes
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToInt64(System.Byte[])">
            <summary>
            To Int64 ,Big Endian
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToInt64LE(System.Byte[])">
            <summary>
            To Int64
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            To Int64 ,Big Endian
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToInt64LE(System.Byte[],System.Int32)">
            <summary>
            To Int64
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.UInt64)">
            <summary>
            Int64 to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.UInt64)">
            <summary>
            Int64 to Bytes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Int64 to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Int64 to Bytes
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToUInt64(System.Byte[])">
            <summary>
            To UInt64 ,Big Endian
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToUInt64LE(System.Byte[])">
            <summary>
            To UInt64
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            To UInt64 ,Big Endian
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToUInt64LE(System.Byte[],System.Int32)">
            <summary>
            To UInt64
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Int32)">
            <summary>
            Int32 to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.Int32)">
            <summary>
            Int32 to Bytes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Int32 to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Int32 to Bytes
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToInt32(System.Byte[])">
            <summary>
            To Int32 ,Big Endian
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToInt32LE(System.Byte[])">
            <summary>
            To Int32
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            To Int32 ,Big Endian
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToInt32LE(System.Byte[],System.Int32)">
            <summary>
            To Int32
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.UInt32)">
            <summary>
            UInt32 to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.UInt32)">
            <summary>
            UInt32 to Bytes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            UInt32 to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            UInt32 to Bytes
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToUInt32(System.Byte[])">
            <summary>
            To UInt32 ,Big Endian
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToUInt32LE(System.Byte[])">
            <summary>
            To UInt32
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            To UInt32 ,Big Endian
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToUInt32LE(System.Byte[],System.Int32)">
            <summary>
            To UInt32
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Int16)">
            <summary>
            Int16 to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.Int16)">
            <summary>
            Int16 to Bytes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Int16 to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Int16 to Bytes
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToInt16(System.Byte[])">
            <summary>
            To Int16 ,Big Endian
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToInt16LE(System.Byte[])">
            <summary>
            To Int16
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            To Int16 ,Big Endian
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToInt16LE(System.Byte[],System.Int32)">
            <summary>
            To Int16
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.UInt16)">
            <summary>
            UInt16 to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.UInt16)">
            <summary>
            UInt16 to Bytes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            UInt16 to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            UInt16 to Bytes
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToUInt16(System.Byte[])">
            <summary>
            To UInt16 ,Big Endian
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToUInt16LE(System.Byte[])">
            <summary>
            To UInt16
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            To UInt16 ,Big Endian
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToUInt16LE(System.Byte[],System.Int32)">
            <summary>
            To UInt16
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Char)">
            <summary>
            Char to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Char to Bytes
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToChar(System.Byte[])">
            <summary>
            To Char ,Big Endian
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            To Char
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Double)">
            <summary>
            Double to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.Double)">
            <summary>
            Double to Bytes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Double to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.Double,System.Byte[],System.Int32)">
            <summary>
            Double to Bytes
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToDouble(System.Byte[])">
            <summary>
            To Double ,Big Endian
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToDoubleLE(System.Byte[])">
            <summary>
            To Double
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            To Double ,Big Endian
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToDoubleLE(System.Byte[],System.Int32)">
            <summary>
            To Double
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Single)">
            <summary>
            Float to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.Single)">
            <summary>
            Float to Bytes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Float to Bytes ,Big Endian
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.Single,System.Byte[],System.Int32)">
            <summary>
            Float to Bytes
            </summary>
            <param name="value"></param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToSingle(System.Byte[])">
            <summary>
            To Single ,Big Endian
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToSingleLE(System.Byte[])">
            <summary>
            To Single
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            To Single ,Big Endian
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToSingleLE(System.Byte[],System.Int32)">
            <summary>
            To Single
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Decimal)">
            <summary>
            将<c>Decimal</c>对象转换为字节数组 ,Big Endian
            </summary>
            <param name="value">要转换的对象。</param>
            <returns>表示<c>Decimal</c>对象的字节数组。</returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.Decimal)">
            <summary>
            将<c>Decimal</c>对象转换为字节数组
            </summary>
            <param name="value">要转换的对象。</param>
            <returns>表示<c>Decimal</c>对象的字节数组。</returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            将<c>Decimal</c>对象转换为字节数组 ,Big Endian
            </summary>
            <param name="value">要转换的对象。</param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns>表示<c>Decimal</c>对象的字节数组。</returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToBytesLE(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            将<c>Decimal</c>对象转换为字节数组。
            </summary>
            <param name="value">要转换的对象。</param>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns>表示<c>Decimal</c>对象的字节数组。</returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToDecimal(System.Byte[])">
            <summary>
            将字节数组转换为<c>Decimal</c>对象 ,Big Endian
            </summary>
            <param name="array">要转换的字节数组。</param>
            <returns>所转换的<c>Decimal</c>对象。</returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToDecimalLE(System.Byte[])">
            <summary>
            将字节数组转换为<c>Decimal</c>对象。
            </summary>
            <param name="array">要转换的字节数组。</param>
            <returns>所转换的<c>Decimal</c>对象。</returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            将字节数组转换为<c>Decimal</c>对象 ,Big Endian
            </summary>
            <param name="array">要转换的字节数组。</param>
            <param name="offset"></param>
            <returns>所转换的<c>Decimal</c>对象。</returns>
        </member>
        <member name="M:Adf.BaseDataConverter.ToDecimalLE(System.Byte[],System.Int32)">
            <summary>
            将字节数组转换为<c>Decimal</c>对象。
            </summary>
            <param name="array">要转换的字节数组。</param>
            <param name="offset"></param>
            <returns>所转换的<c>Decimal</c>对象。</returns>
        </member>
        <member name="M:Adf.BaseDataConverter.Bits31(System.Int32)">
            <summary>
            lower 31 bits
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.ConfigHelper">
            <summary>
            Setting Helper
            </summary>
        </member>
        <member name="F:Adf.ConfigHelper.PATH_ROOT">
            <summary>
            配置文件根目录
            </summary>
        </member>
        <member name="F:Adf.ConfigHelper.PATH_APP_ROOT">
            <summary>
            应用根目录
            </summary>
        </member>
        <member name="M:Adf.ConfigHelper.GetSetting(System.String,System.String)">
            <summary>
            获取一项配置，若未配置则返回默认值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConfigHelper.GetSettingAsInt(System.String,System.Int32)">
            <summary>
            获取一项配置，若未配置则返回默认值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConfigHelper.GetSettingAsUInt(System.String,System.UInt32)">
            <summary>
            获取一项配置，若未配置则返回默认值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConfigHelper.GetSettingAsInt64(System.String,System.Int64)">
            <summary>
            获取一项配置，若未配置则返回默认值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConfigHelper.GetSettingAsUInt64(System.String,System.UInt64)">
            <summary>
            获取一项配置，若未配置则返回默认值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConfigHelper.GetSettingAsInt16(System.String,System.Int16)">
            <summary>
            获取一项配置，若未配置则返回默认值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConfigHelper.GetSettingAsUInt16(System.String,System.UInt16)">
            <summary>
            获取一项配置，若未配置则返回默认值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConfigHelper.GetSettingAsByte(System.String,System.Byte)">
            <summary>
            获取一项配置，若未配置则返回默认值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConfigHelper.GetSettingAsBoolean(System.String,System.Boolean)">
            <summary>
            获取一项配置，若未配置则返回默认值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.ConfigHelper.GetSection``1(System.String)">
            <summary>
            获取一个配置节
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.ConfigHelper.AppName">
            <summary>
            获取应用名称,配置名：AppName
            </summary>
        </member>
        <member name="T:Adf.UUIDEncoder">
            <summary>
            UUID Base58 编码器
            </summary>
        </member>
        <member name="M:Adf.UUIDEncoder.IsMatch(System.String)">
            <summary>
            是否符合编码字符串格式
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.UUIDEncoder.NewID">
            <summary>
            编码
            </summary>
            <returns>返回22位长度字符串</returns>
        </member>
        <member name="M:Adf.UUIDEncoder.Encode(System.String)">
            <summary>
            编码
            </summary>
            <param name="guid"></param>
            <returns>返回22位长度字符串</returns>
        </member>
        <member name="M:Adf.UUIDEncoder.Encode(System.Guid)">
            <summary>
            编码
            </summary>
            <param name="guid"></param>
            <returns>返回22位长度字符串</returns>
        </member>
        <member name="M:Adf.UUIDEncoder.Decode(System.String)">
            <summary>
            解码器
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.UUIDEncoder.DecodeToGuid(System.String)">
            <summary>
            解码器
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.RandomHelper">
            <summary>
            随机数
            </summary>
        </member>
        <member name="M:Adf.RandomHelper.Make(System.Char[],System.Int32)">
            <summary>
            创建一个随机数，随机数据根据传入值与长度决定结果
            </summary>
            <param name="chars">随机数的字符数组</param>
            <param name="size">随机字符串长度</param>
            <returns>返回生成的随机数</returns>
        </member>
        <member name="M:Adf.RandomHelper.Number(System.Int32)">
            <summary>
            生成指定位数的随机0-9数字字符串
            </summary>
            <param name="size">随机字符串长度</param>
            <returns>返回生成的字符串</returns>
        </member>
        <member name="M:Adf.RandomHelper.LetterAndNumber(System.Int32)">
            <summary>
            生成一个字母与数字随机字符串
            </summary>
            <param name="size">随机字符串长度</param>
            <returns>返回生成的字符串</returns>
        </member>
        <member name="M:Adf.RandomHelper.LowerLetterAndNumber(System.Int32)">
            <summary>
            生成一个小写字母与数字随机字符串
            </summary>
            <param name="size">随机字符串长度</param>
            <returns>返回生成的字符串</returns>
        </member>
        <member name="M:Adf.RandomHelper.UpperLetterAndNumber(System.Int32)">
            <summary>
            生成一个大写字母与数字随机字符串
            </summary>
            <param name="size">随机字符串长度</param>
            <returns>返回生成的字符串</returns>
        </member>
        <member name="M:Adf.RandomHelper.LowerLetter(System.Int32)">
            <summary>
            生成一个小写字母组成的随机字符串
            </summary>
            <param name="size">随机字符串长度</param>
            <returns>返回生成的字符串</returns>
        </member>
        <member name="M:Adf.RandomHelper.Letter(System.Int32)">
            <summary>
            生成字母组成的随机字符串
            </summary>
            <param name="size">随机字符串长度</param>
            <returns>返回生成的字符串</returns>
        </member>
        <member name="T:Adf.RetryAction">
            <summary>
            Retry Action
            </summary>
        </member>
        <member name="T:Adf.RetryHelper">
            <summary>
            Retry Helper
            </summary>
        </member>
        <member name="M:Adf.RetryHelper.Retry(System.Int32,System.TimeSpan,System.Boolean,Adf.RetryAction)">
            <summary>
            Retry
            </summary>
            <param name="retryCount"></param>
            <param name="interval"></param>
            <param name="throwIfFail"></param>
            <param name="action"></param>
        </member>
        <member name="T:Adf.Arguments">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:Adf.Arguments.AddOption(System.String)">
            <summary>
            添加一个选项
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Adf.Arguments.Add(System.String)">
            <summary>
            添加一个参数
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Adf.Arguments.Add(System.String,System.String)">
            <summary>
            添加一个参数
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Adf.Arguments.AddWithQuote(System.String,System.String,System.Char)">
            <summary>
            添加一个带符号包含的参数
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="quoteChar"></param>
        </member>
        <member name="M:Adf.Arguments.GetHashCode">
            <summary>
            Get Hash Code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.Arguments.Parse(System.String[])">
            <summary>
            参数转换
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Arguments.ToString">
            <summary>
            获取实例字符串形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:Adf.CFunc`1">
            <summary>
            带返回值的调用
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Adf.CFunc`2">
            <summary>
            带返回值的调用
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.CFunc`3">
            <summary>
            带返回值的调用
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.CFunc`4">
            <summary>
            带返回值的调用
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.SocketConnection.SocketConnectionException">
            <summary>
            socket connection exception
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnectionException.#ctor(System.String)">
            <summary>
            init new instance
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            init new instance
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:Adf.Mail.MailMessage">
            <summary>
            Mail entity class
            </summary>
        </member>
        <member name="M:Adf.Mail.MailMessage.AddBcc(System.String)">
            <summary>
            添加密件抄送
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:Adf.Mail.MailMessage.AddBcc(System.String,System.String)">
            <summary>
            添加密件抄送
            </summary>
            <param name="name"></param>
            <param name="address"></param>
        </member>
        <member name="M:Adf.Mail.MailMessage.AddCC(System.String)">
            <summary>
            添加抄送地址
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:Adf.Mail.MailMessage.AddCC(System.String,System.String)">
            <summary>
            添加抄送地址
            </summary>
            <param name="name"></param>
            <param name="address"></param>
        </member>
        <member name="M:Adf.Mail.MailMessage.AddTo(System.String)">
            <summary>
            添加接收者地址
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:Adf.Mail.MailMessage.AddTo(System.String,System.String)">
            <summary>
            添加接收者地址
            </summary>
            <param name="name"></param>
            <param name="address"></param>
        </member>
        <member name="M:Adf.Mail.MailMessage.#ctor">
            <summary>
            初始化邮件体
            </summary>
        </member>
        <member name="M:Adf.Mail.MailMessage.GetHead">
            <summary>
            获取邮件头，并填充 OutputHeaders
            </summary>
            <exception cref="T:System.InvalidOperationException">message.From invalid or message.To is empty or subject is empty</exception>
            <returns></returns>
        </member>
        <member name="M:Adf.Mail.MailMessage.GetBody">
            <summary>
            获取邮件体
            </summary>
            <exception cref="T:System.InvalidOperationException">message.Body is empty</exception>
            <returns></returns>
        </member>
        <member name="M:Adf.Mail.MailMessage.Save(System.IO.Stream)">
            <summary>
            将邮件内容存储至指定流
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:Adf.Mail.MailMessage.Save(System.String)">
            <summary>
            将邮件邮件存储至指定路径
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="P:Adf.Mail.MailMessage.Bcc">
            <summary>
            获取包含此电子邮件的密件抄送 (BCC) 收件人的地址列表。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.CC">
            <summary>
            获取包含此电子邮件的抄送 (CC) 收件人的地址列表。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.To">
            <summary>
            获取包含此电子邮件的收件人的地址列表.
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.ReplyTo">
            <summary>
            获取或设置邮件的回复地址。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.Sender">
            <summary>
            获取或设置此电子邮件实际的发件人地址 （此属性当前未被使用，预留未来版本） 。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.From">
            <summary>
            获取或设置此电子邮件显示的发信人地址。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.Body">
            <summary>
            获取或设置邮件正文。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.Encoding">
            <summary>
            获取或设置用于邮件的编码。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.Headers">
            <summary>
            获取与此电子邮件一起传输的自定义电子邮件标头。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.OutputHeaders">
            <summary>
            获取此邮件构建的输出标头集合。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.IsBodyHtml">
            <summary>
            获取或设置指示邮件正文是否为 Html 格式的值。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.Priority">
            <summary>
            获取或设置此电子邮件的优先级
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.Subject">
            <summary>
            获取或设置此电子邮件的主题行。
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.Boundary">
            <summary>
            获取该邮件的段落分隔符
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.MessageId">
            <summary>
            获取为此邮件分配的ID
            </summary>
        </member>
        <member name="P:Adf.Mail.MailMessage.Dkim">
            <summary>
            获取或设置当前邮件DKIM对象，若不进行DKIM则设置为null, 参考： http://www.xiaobo.li/?p=828
            </summary>
        </member>
        <member name="T:Adf.HttpServerEventArgs">
            <summary>
            HTTP服务事件数据
            </summary>
        </member>
        <member name="M:Adf.HttpServerEventArgs.#ctor(Adf.HttpServerContext)">
            <summary>
            初始化新实例
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Adf.HttpServerEventArgs.Context">
            <summary>
            上下文对象
            </summary>
        </member>
        <member name="T:Adf.Config.ConfigException">
            <summary>
            配置错误, configuraion error
            </summary>
        </member>
        <member name="M:Adf.Config.ConfigException.#ctor(System.String)">
            <summary>
            initialzie new instance
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Adf.Config.ConfigException.#ctor(System.String,System.Exception)">
            <summary>
            initialzie new instance
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Adf.QueueServerBase">
            <summary>
            队列服务终端基础类， 此业务更建议应用于队列监听，非高性能要求情况下，建议使用HTTP方式进行PUSH, 参考: http://www.xiaobo.li/?p=805
            </summary>
        </member>
        <member name="M:Adf.QueueServerBase.#ctor(Adf.LogManager)">
            <summary>
            初始化新实例
            </summary>
            <remarks>使用本类需配置同类名相同的服务器配置节点</remarks>
            <param name="logManager"></param>
        </member>
        <member name="M:Adf.QueueServerBase.GenerateID">
            <summary>
            创建一个当前实例递增的标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.QueueServerBase.Start">
            <summary>
            启动客户端监听
            </summary>
            <exception cref="T:Adf.QueueServerException">No active client or no configuration servers.</exception>
        </member>
        <member name="M:Adf.QueueServerBase.Stop">
            <summary>
            终止客户端监听
            </summary>
        </member>
        <member name="M:Adf.QueueServerBase.InitializeQueue">
            <summary>
            初始化队列
            </summary>
        </member>
        <member name="M:Adf.QueueServerBase.OnInitializeQueueClient(Adf.WebSocketClient)">
            <summary>
            当初始化客户端时
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Adf.QueueServerBase.QueueClientClosed(System.Object,Adf.WebSocketCloseEventArgs)">
            <summary>
            队列已关闭事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Adf.QueueServerBase.QueueClientConnectioned(System.Object,System.EventArgs)">
            <summary>
            队列成功连接事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Adf.QueueServerBase.Connectioned(Adf.WebSocketClient)">
            <summary>
            队列成功连接事件
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Adf.QueueServerBase.QueueClientMessage(System.Object,Adf.WebSocketMessageEventArgs)">
            <summary>
            队列新消息事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Adf.QueueServerBase.Message(Adf.WebSocketClient,Adf.QueueServerActionResult)">
            <summary>
            收到队列消息
            </summary>
            <param name="client"></param>
            <param name="result"></param>
        </member>
        <member name="M:Adf.QueueServerBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:Adf.QueueServerBase.LogWriter">
            <summary>
            获取当前实例日志书写器
            </summary>
        </member>
        <member name="P:Adf.QueueServerBase.LogManager">
            <summary>
            获取日志管理器
            </summary>
        </member>
        <member name="P:Adf.QueueServerBase.Keepalive">
            <summary>
            获取或设置持续保持或重连间隔，单位：秒, 此设置对新连接有效，已有连接不应用。
            </summary>
        </member>
        <member name="P:Adf.QueueServerBase.Servers">
            <summary>
            获取服务器列表
            </summary>
        </member>
        <member name="P:Adf.QueueServerBase.QueueClients">
            <summary>
            获取队列连接客户端
            </summary>
        </member>
        <member name="T:Adf.SocketConnection.MessageEventArgs">
            <summary>
            on  new message event
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.MessageEventArgs.#ctor(System.Object)">
            <summary>
            message event args
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Adf.SocketConnection.MessageEventArgs.Message">
            <summary>
            get event content
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.MessageEventArgs.IsContinue">
            <summary>
            is continue read next message, set flase for need manual call read method. default true.
            </summary>
        </member>
        <member name="T:Adf.LRUCache`2">
            <summary>
            LRU缓存处理项（无线程安全，若需要则使用时处理）lru cache handler
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Adf.LRUCache`2.#ctor(System.Int32)">
            <summary>
            初始化新的实例，initialize lru cache
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Adf.LRUCache`2.Get(`0)">
            <summary>
            获取一个缓存项，get a item
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LRUCache`2.TryGet(`0,`1@)">
            <summary>
            获取一个缓存项，get a item
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LRUCache`2.Exists(`0)">
            <summary>
            判断一个缓存项是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LRUCache`2.Add(`0,`1,System.Int32)">
            <summary>
            添加一个缓存项，若键已存在则添加失败，add a new item,  if exists to failure
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="ttl">缓存时间，零值永不过期,单位：秒 <para>ttl, zero is no expired, unit: seconds.</para></param>
            <returns>success: true, ,key exists: false </returns>
        </member>
        <member name="M:Adf.LRUCache`2.Set(`0,`1,System.Int32)">
            <summary>
            设置一个缓存项，若键已存在则将覆盖，add a new item
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="ttl">缓存时间，零值永不过期,单位：秒 <para>ttl, zero is no expired, unit: seconds.</para></param>
        </member>
        <member name="M:Adf.LRUCache`2.Delete(`0)">
            <summary>
            移去一个缓存项 remove a item
            </summary>
            <param name="key"></param>
            <returns>找到并成功移除返回true, 否则返回 false, success: true, not exists: false</returns>
        </member>
        <member name="M:Adf.LRUCache`2.Clear">
            <summary>
            清空所有项存项 clear all items
            </summary>
        </member>
        <member name="P:Adf.LRUCache`2.Capacity">
            <summary>
            获取或设置缓存最大项数，最小值 10
            <para>Get or set the maximum number of entries in the cache. min value 10</para>
            </summary>
        </member>
        <member name="P:Adf.LRUCache`2.Count">
            <summary>
            获取当前缓存中的项（若有具备TTL的项时该值为参考值，可能包含部份已过期项）
            <para>Get all cache item count.</para>
            </summary>
        </member>
        <member name="T:Adf.LRUCache">
            <summary>
            LRU缓存处理项（无线程安全，若需要则使用时处理）lru cache handler
            </summary>
        </member>
        <member name="M:Adf.LRUCache.#ctor(System.Int32)">
            <summary>
            初始化新的实例，initialize lru cache
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Adf.LRUCache.Get(System.String)">
            <summary>
            获取一个缓存项，get a item
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LRUCache.TryGet(System.String,System.Object@)">
            <summary>
            获取一个缓存项，get a item
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LRUCache.Exists(System.String)">
            <summary>
            判断一个缓存项是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LRUCache.Add(System.String,System.Object,System.Int32)">
            <summary>
            添加一个缓存项，若键已存在则添加失败，add a new item,  if exists to failure
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="ttl">缓存时间，零值永不过期,单位：秒 <para>ttl, zero is no expired, unit: seconds.</para></param>
            <returns>success: true, ,key exists: false </returns>
        </member>
        <member name="M:Adf.LRUCache.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置一个缓存项，若键已存在则将覆盖，add a new item
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="ttl">缓存时间，零值永不过期,单位：秒 <para>ttl, zero is no expired, unit: seconds.</para></param>
        </member>
        <member name="M:Adf.LRUCache.Delete(System.String)">
            <summary>
            移去一个缓存项 remove a item
            </summary>
            <param name="key"></param>
            <returns>找到并成功移除返回true, 否则返回 false, success: true, not exists: false</returns>
        </member>
        <member name="M:Adf.LRUCache.Clear">
            <summary>
            清空所有项存项 clear all items
            </summary>
        </member>
        <member name="M:Adf.LRUCache.Adf#ICache#Get(System.String,System.Type)">
            <summary>
            获取指定类型的缓存对象(此对象不支持该方法)
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.LRUCache.Get``1(System.String)">
            <summary>
            获取指定类型的缓存对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.LRUCache.Capacity">
            <summary>
            获取或设置缓存最大项数，值不能小于10
            <para>Get or set the maximum number of entries in the cache. min value 10</para>
            </summary>
        </member>
        <member name="P:Adf.LRUCache.Count">
            <summary>
            获取当前缓存中的项（若有具备TTL的项时该值为参考值，可能包含部份已过期项）
            <para>Get all cache item count.</para>
            </summary>
        </member>
        <member name="T:Adf.ICreater`1">
            <summary>
            object creater
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Adf.ICreater`1.Create">
            <summary>
            create new object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Adf.HttpClient">
            <summary>
            http client
            </summary>
        </member>
        <member name="F:Adf.HttpClient.Instance">
            <summary>
            default instance
            </summary>
        </member>
        <member name="M:Adf.HttpClient.#ctor">
            <summary>
            initiaize a new instance
            </summary>
        </member>
        <member name="M:Adf.HttpClient.GetString(System.String[],System.String)">
            <summary>
            invoke a get request
            </summary>
            <param name="path">ex: /user/register</param>
            <param name="hosts">ex: https://example.com,http://192.168.1.100, http://example.com:8080, http://192.168.1.100:8080</param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpClient.GetString(System.String)">
            <summary>
            invoke a get request
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpClient.Get(System.String[],System.String)">
            <summary>
            invoke a get request
            </summary>
            <param name="path">ex: /user/register</param>
            <param name="hosts">ex: https://example.com,http://192.168.1.100, http://example.com:8080, http://192.168.1.100:8080</param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpClient.TryGet(System.String[],System.String)">
            <summary>
            invoke a get request
            </summary>
            <param name="path">ex: /user/register</param>
            <param name="hosts">ex: https://example.com,http://192.168.1.100, http://example.com:8080, http://192.168.1.100:8080</param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpClient.Get(System.String)">
            <summary>
            invoke a get request
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpClient.Post(System.String[],System.String,System.String)">
            <summary>
            invoke a post request
            </summary>
            <param name="path">ex: /user/register</param>
            <param name="hosts">ex: https://example.com,http://192.168.1.100, http://example.com:8080, http://192.168.1.100:8080</param>
            <param name="formdata"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpClient.Post(System.String,System.String)">
            <summary>
            invoke a post request
            </summary>
            <param name="url"></param>
            <param name="formdata"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpClient.Post(System.String,System.String,System.String)">
            <summary>
            invoke a post request
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpClient.Post(System.String[],System.String,System.String,System.String)">
            <summary>
            invoke a post request
            </summary>
            <param name="path">ex: /user/register</param>
            <param name="hosts">ex: https://example.com,http://192.168.1.100, http://example.com:8080, http://192.168.1.100:8080</param>
            <param name="data"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpClient.Post(System.String[],System.String,System.Byte[],System.String)">
            <summary>
            invoke a post request
            </summary>
            <param name="path">ex: /user/register</param>
            <param name="hosts">ex: https://example.com,http://192.168.1.100, http://example.com:8080, http://192.168.1.100:8080</param>
            <param name="data"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpClient.TryPost(System.String[],System.String,System.Byte[],System.String)">
            <summary>
            invoke a post request
            </summary>
            <param name="path">ex: /user/register</param>
            <param name="hosts">ex: https://example.com,http://192.168.1.100, http://example.com:8080, http://192.168.1.100:8080</param>
            <param name="data"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpClient.Post(System.String,System.Byte[],System.String)">
            <summary>
            invoke a post request
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.HttpClient.Encoding">
            <summary>
            get or set encoding
            </summary>
        </member>
        <member name="P:Adf.HttpClient.UserAgent">
            <summary>
            get or set user-agent
            </summary>
        </member>
        <member name="P:Adf.HttpClient.Timeout">
            <summary>
            get or set timeout , default 60 seconds
            </summary>
        </member>
        <member name="T:Adf.HttpServerRouteHandler">
            <summary>
            http server route handler
            </summary>
        </member>
        <member name="M:Adf.HttpServerRouteHandler.#ctor">
            <summary>
            initialize new instance
            </summary>
        </member>
        <member name="M:Adf.HttpServerRouteHandler.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            initialize action instance
            </summary>
            <param name="assembly"></param>
            <param name="handlersNamespace"></param>
        </member>
        <member name="M:Adf.HttpServerRouteHandler.NotFoundAction(Adf.HttpServerContext)">
            <summary>
            not found action
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpServerRouteHandler.DefaultAction(Adf.HttpServerContext)">
            <summary>
            default action
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpServerRouteHandler.Process(Adf.HttpServerContext)">
            <summary>
            process
            </summary>
            <param name="httpContext"></param>
            <exception cref="T:System.ArgumentNullException">path is null</exception>
            <exception cref="T:System.ArgumentException">path only allow contain a-z0-9</exception>
            <returns></returns>
        </member>
        <member name="T:Adf.ExceptionMail">
            <summary>
            异常邮件发送器
            </summary>
            <remarks>
            配置： ExceptionMailRecipients, 以分号分隔的邮件接收人
            配置： ExceptionMailSmtp, 指定发送邮件实例，此实例实现, ISmtp接口
            </remarks>
        </member>
        <member name="F:Adf.ExceptionMail.Instance">
            <summary>
            默认实例
            </summary>
        </member>
        <member name="M:Adf.ExceptionMail.#ctor">
            <summary>
            初始新实例
            配置：ExceptionMailRecipients, 邮件地址，以逗号分隔
            配置：ExceptionMailSmtp, 实现 ISmtp接口类型
            </summary>
        </member>
        <member name="M:Adf.ExceptionMail.SendMail(System.Exception)">
            <summary>
            发送邮件
            </summary>
            <param name="exception"></param>
            <returns>返回是否执行了邮件发送</returns>
            <exception cref="T:System.ArgumentNullException">exception</exception>
        </member>
        <member name="P:Adf.ExceptionMail.MailRecipients">
            <summary>
            异常邮件接收人,配置： ExceptionMailRecipients, 以分号分隔的邮件接收人
            </summary>
        </member>
        <member name="P:Adf.ExceptionMail.Available">
            <summary>
            是否可用
            </summary>
        </member>
        <member name="P:Adf.ExceptionMail.Smtp">
            <summary>
            获取当前发送SMTP实例, 通过ExceptionMailSmtp配置初始实例
            </summary>
        </member>
        <member name="T:Adf.WindowsEventLog">
            <summary>
            Windows Event Log
            </summary>
        </member>
        <member name="M:Adf.WindowsEventLog.NewLog(System.Diagnostics.EventLogEntryType,System.String,System.Object[])">
            <summary>
            New Log
            </summary>
            <param name="type"></param>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="T:Adf.UnixTimestampHelper">
            <summary>
            UNIX 时间戳
            </summary>
        </member>
        <member name="F:Adf.UnixTimestampHelper.UNIXTIMESTAMP_BASE">
            <summary>
            UNIX TIMESTAMP
            </summary>
        </member>
        <member name="F:Adf.UnixTimestampHelper.UNIXTIMESTAMP_BASETICK">
            <summary>
            UNIX TIMESTAMP TICK
            </summary>
        </member>
        <member name="F:Adf.UnixTimestampHelper.UNIXTIMESTAMP_BASESECONDS">
            <summary>
            1970, 1, 1, 0, 0, 0 seconds
            </summary>
        </member>
        <member name="M:Adf.UnixTimestampHelper.ToTimestamp">
            <summary>
            返回当前时间的Unix Timestamp
            </summary>
        </member>
        <member name="M:Adf.UnixTimestampHelper.ToTimestamp(System.DateTime)">
            <summary>
            返回指定时间的Unix Timestamp
            </summary>
            <param name="time">要返回的基础时间</param>
        </member>
        <member name="M:Adf.UnixTimestampHelper.ToTimestamp(System.Int64)">
            <summary>
            将.net时间戳转为Unix Timestamp
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.UnixTimestampHelper.ToDateTime(System.Int32)">
            <summary>
            将Unix Timestamp转换为时间对象
            </summary>
            <param name="timestamp">时间戳</param>
        </member>
        <member name="M:Adf.UnixTimestampHelper.ToInt64Timestamp">
            <summary>
            返回当前时间的Unix Timestamp
            </summary>
        </member>
        <member name="M:Adf.UnixTimestampHelper.ToInt64Timestamp(System.DateTime)">
            <summary>
            返回指定时间的Unix Timestamp
            </summary>
            <param name="time">要返回的基础时间</param>
        </member>
        <member name="M:Adf.UnixTimestampHelper.ToInt64Timestamp(System.Int64)">
            <summary>
            将.net时间戳转为Unix Timestamp
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.UnixTimestampHelper.ToDateTime(System.Int64)">
            <summary>
            将Unix Timestamp转换为时间对象
            </summary>
            <param name="timestamp">时间戳</param>
        </member>
        <member name="T:Adf.TypeHelper">
            <summary>
            公用类型引用
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.CHAR">
            <summary>
            CHAR类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.BYTE">
            <summary>
            Byte类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.SBYTE">
            <summary>
            SByte类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.BOOLEAN">
            <summary>
            Boolean类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.INT16">
            <summary>
            INT16类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.INT32">
            <summary>
            INT32类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.INT64">
            <summary>
            INT64类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.UINT16">
            <summary>
            UINT16类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.UINT32">
            <summary>
            UINT32类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.UINT64">
            <summary>
            UINT64类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.DOUBLE">
            <summary>
            Double类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.SINGLE">
            <summary>
            Single类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.DATETIME">
            <summary>
            DateTime类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.STRING">
            <summary>
            String类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.GUID">
            <summary>
            GUID类型
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.IENUMERABLE">
            <summary>
            玫举项, IEnumerable
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.ILIST">
            <summary>
            列表项, ILIST
            </summary>
        </member>
        <member name="F:Adf.TypeHelper.IDICTIONARY">
            <summary>
            字曲项，IDictionary
            </summary>
        </member>
        <member name="M:Adf.TypeHelper.GetGenericCollectionType(System.Type)">
            <summary>
            获取泛型集合的元素类型
            </summary>
            <param name="type"></param>
            <returns>非泛型将返回NULL</returns>
        </member>
        <member name="M:Adf.TypeHelper.GetGenericDictionaryTypes(System.Type)">
            <summary>
            获取泛型字典元素类型
            </summary>
            <param name="type"></param>
            <returns>类型数组,0:key,1:value, 非泛型字典返回null</returns>
        </member>
        <member name="M:Adf.TypeHelper.IsNumber(System.Object)">
            <summary>
            是否为数值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.TypeHelper.IsNumber(System.Type)">
            <summary>
            是否为数值
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.HttpServerCallback">
            <summary>
            Http Server Callback
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.HttpServerContext">
            <summary>
            Http Server Context
            </summary>
        </member>
        <member name="M:Adf.HttpServerContext.#ctor(System.Net.Sockets.Socket,System.Collections.Specialized.NameValueCollection,Adf.HttpServer,System.String,System.String,System.String,System.Int32,Adf.IHttpServerFileHandler)">
            <summary>
            initialize new instance
            </summary>
            <param name="socket"></param>
            <param name="header"></param>
            <param name="server"></param>
            <param name="url"></param>
            <param name="method"></param>
            <param name="protocol"></param>
            <param name="maxRequestContentLength"></param>
            <param name="fileHandler"></param>
        </member>
        <member name="M:Adf.HttpServerContext.BeginWrite">
            <summary>
            Begin Async And Chunk Write, You Need Invoke EndWrite
            </summary>
            <exception cref="T:System.InvalidOperationException">Has been invoked</exception>
        </member>
        <member name="M:Adf.HttpServerContext.Write(System.String,System.Object[])">
            <summary>
            Write Chunk Content
            </summary>
            <param name="content"></param>
            <param name="args"></param>
            <exception cref="T:System.InvalidOperationException">No Invoke BeginWrite / Has Been Invoked EndWrite / Write Chunk failure</exception>
            <exception cref="T:System.ArgumentNullException">contentBuffer</exception>
        </member>
        <member name="M:Adf.HttpServerContext.Write(System.Byte[])">
            <summary>
            Write Chunk Content
            </summary>
            <param name="contentBuffer"></param>
            <exception cref="T:System.InvalidOperationException">No Invoke BeginWrite / Has Been Invoked EndWrite / Write Chunk failure</exception>
            <exception cref="T:System.ArgumentNullException">contentBuffer</exception>
        </member>
        <member name="M:Adf.HttpServerContext.Chunk(System.Byte[])">
            <summary>
            Write Chunk Content
            </summary>
            <param name="contentBuffer"></param>
        </member>
        <member name="M:Adf.HttpServerContext.EndWrite">
            <summary>
            End Write
            </summary>
            <exception cref="T:System.InvalidOperationException">No Invoke BeginWrite / Has Been Invoked EndWrite</exception>
        </member>
        <member name="M:Adf.HttpServerContext.CreateResponseHeader(System.Net.HttpStatusCode)">
            <summary>
            创建响应头
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpServerContext.Response(System.Text.StringBuilder,System.Net.HttpStatusCode)">
            <summary>
            响应客户端
            </summary>
            <param name="build"></param>
            <param name="status"></param>
        </member>
        <member name="M:Adf.HttpServerContext.Clear">
            <summary>
            进行必要的资源清理，此方法仅供系统调用， 不允许使用者直接调用
            </summary>
        </member>
        <member name="P:Adf.HttpServerContext.MaxRequestContentLength">
            <summary>
            获取或设置当前请求允许的最大内容体长度，默认 <see cref="P:Adf.HttpServer.MaxRequestContentLength"/>.
            实际判断时的误差值为<see cref="P:Adf.HttpServer.BufferSize"/>
            </summary>
        </member>
        <member name="P:Adf.HttpServerContext.UploadedLength">
            <summary>
            获取或设置当前连接的内容已上传的长度，此值不表示整个请求体，仅在请求为POST且模式为multipart/form-data时描述具体内容已上传的长度，此属性与Content-Length配合可用于上传进度的查询
            </summary>
        </member>
        <member name="P:Adf.HttpServerContext.Socket">
            <summary>
            当前连接对象
            </summary>
        </member>
        <member name="P:Adf.HttpServerContext.KeepAlive">
            <summary>
            获取或设备是否保持连接
            </summary>
            <exception cref="T:System.NotSupportedException">post method not support Keep-Alive</exception>
        </member>
        <member name="P:Adf.HttpServerContext.Form">
            <summary>
            POST Parameters
            </summary>
        </member>
        <member name="P:Adf.HttpServerContext.Files">
            <summary>
            get file list
            </summary>
        </member>
        <member name="P:Adf.HttpServerContext.FileHandler">
            <summary>
            get or set file handler
            </summary>
        </member>
        <member name="P:Adf.HttpServerContext.Status">
            <summary>
            get or set http status
            </summary>
        </member>
        <member name="P:Adf.HttpServerContext.Content">
            <summary>
            Result
            </summary>
        </member>
        <member name="P:Adf.HttpServerContext.PostData">
            <summary>
            post data for request content-type no application/x-www-form-urlencoded and multipart/form-data
            </summary>
        </member>
        <member name="P:Adf.HttpServerContext.ContentBuffer">
            <summary>
            Result, override content
            </summary>
        </member>
        <member name="P:Adf.HttpServerContext.ChunkWriteStatus">
            <summary>
            获取当前是否以区块输出
            </summary>
        </member>
        <member name="P:Adf.HttpServerContext.GzipThreshold">
            <summary>
            get or set gzip enable threshold, default 512, chunked mode no limit, zero to disabled
            </summary>
        </member>
        <member name="T:Adf.Db.Sqlite">
            <summary>
            Sqlite 数据操作类
            </summary>
        </member>
        <member name="M:Adf.Db.Sqlite.#ctor(System.Data.Common.DbProviderFactory,System.Data.IDbConnection)">
            <summary>
            初始化操作类型
            </summary>
            <param name="connection">对象连接</param>
            <param name="factory">工厂</param>
        </member>
        <member name="M:Adf.Db.Sqlite.GetIdentity``1">
            <summary>
            获取上一执行语句所产生的自增值(此功能不一定支持所有数据库服务器)，如果有误，返回为结果类型初始值
            </summary>
            <typeparam name="T">返回的数据类型</typeparam>
        </member>
        <member name="P:Adf.Db.Sqlite.SqlBuilder">
            <summary>
            已重载,语句创建
            </summary>
        </member>
        <member name="T:Adf.Db.SqlServer">
            <summary>
            MSSQL数据库基础操作
            </summary>
        </member>
        <member name="M:Adf.Db.SqlServer.#ctor(System.String)">
            <summary>
            根据数据连接字符串创建一个新的数据实列
            </summary>
            <param name="connectionstring">数据连接字符串</param>
        </member>
        <member name="M:Adf.Db.SqlServer.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            创建新的实例
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="P:Adf.Db.SqlServer.Connection">
            <summary>
            获取数据库连接
            </summary>
        </member>
        <member name="T:Adf.Db.DbException">
            <summary>
            异常基础类
            </summary>
        </member>
        <member name="M:Adf.Db.DbException.#ctor(System.String)">
            <summary>
            初始化新的异常实体
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="T:Adf.SyncQueue">
            <summary>
            线程安全队列
            </summary>
        </member>
        <member name="M:Adf.SyncQueue.#ctor">
            <summary>
            初始化新实例
            </summary>
        </member>
        <member name="M:Adf.SyncQueue.Dequeue">
            <summary>
            从队列取出一个值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.SyncQueue.Enqueue(System.Object)">
            <summary>
            压入队列一个值
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Adf.SyncQueue.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="P:Adf.SyncQueue.Count">
            <summary>
            当前队列数
            </summary>
        </member>
        <member name="T:Adf.RedisHyperLogLog">
            <summary>
            HyperLogLog
            Redis 在 2.8.9 版本添加了该结构。
            </summary>
        </member>
        <member name="M:Adf.RedisHyperLogLog.PFADD(System.String,System.String[])">
            <summary>
            将所有元素参数添加到 HyperLogLog 数据结构中
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>"OK" 添加成功</returns>
        </member>
        <member name="M:Adf.RedisHyperLogLog.PFCOUNT(System.String)">
            <summary>
            返回给定 HyperLogLog 的基数估算值。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisHyperLogLog.PFMERGE(System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog ，合并后的 HyperLogLog 的基数估算值.
            </summary>
            <param name="destkey"></param>
            <param name="sourcekeys"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisHyperLogLog.PFMERGE(System.String,System.String,System.String)">
            <summary>
            将俩个 HyperLogLog 合并为一个 HyperLogLog ，合并后的 HyperLogLog 的基数估算值.
            </summary>
            <param name="destkey"></param>
            <param name="sourcekey1"></param>
            <param name="sourcekey2"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.IHttpServerFileHandler">
            <summary>
            HTTP Server 文件接收器
            </summary>
        </member>
        <member name="M:Adf.IHttpServerFileHandler.Create(System.String,System.String,System.String,Adf.HttpServerContext)">
            <summary>
            创建内容接收参数
            </summary>
            <param name="name">上传窗值设置的值，一般为 input.name 值</param>
            <param name="fileName">文件在客户端上的名称</param>
            <param name="httpContext">请求上下文</param>
            <param name="contentType">文件类型</param>
            <returns></returns>
        </member>
        <member name="T:Adf.RedisSets">
            <summary>
            Redis 集合
            </summary>
        </member>
        <member name="M:Adf.RedisSets.SAdd(System.String,System.String)">
            <summary>
            添加元素
            </summary>
            <param name="key"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.SCARD(System.String)">
            <summary>
            返回集合数
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.SDIFF(System.String,System.String)">
            <summary>
            返回2个集合差集
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.SDIFF(System.String[])">
            <summary>
            返回多个集合差集
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.SDIFFSTORE(System.String,System.String[])">
            <summary>
            该命令类似于 SDIFF, 不同之处在于该命令不返回结果集，而是将结果存放在destination集合中.
            如果destination 已经存在, 则将其覆盖重写.
            </summary>
            <param name="destKey"></param>
            <param name="keys"></param>
            <returns>结果集元素的个数</returns>
        </member>
        <member name="M:Adf.RedisSets.SINTER(System.String[])">
            <summary>
            返回多个集合交集
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.SINTERSTORE(System.String,System.String[])">
             <summary>
             这个命令与SINTER命令类似, 但是它并不是直接返回结果集,而是将结果保存在 destination集合中.
            如果destination 集合存在, 则会被重写.
             </summary>
             <param name="destKey"></param>
             <param name="keys"></param>
             <returns>结果集中成员的个数.</returns>
        </member>
        <member name="M:Adf.RedisSets.SISMEMBER(System.String,System.String)">
            <summary>
            判断是否存在元素
            </summary>
            <param name="key"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.SMEMBERS(System.String)">
            <summary>
            获取集合内容
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.SMOVE(System.String,System.String,System.String)">
            <summary>
            移动元素至指定集合
            </summary>
            <param name="srcKey"></param>
            <param name="destKey"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.SRANDMEMBER(System.String)">
            <summary>
            随机返回指定数量元素
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.SRANDMEMBER(System.String,System.Int32)">
            <summary>
            随机返回指定数量元素,Redis 2.6
            </summary>
            <param name="key"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.SPOP(System.String)">
            <summary>
            移除并返回一个集合中的随机元素
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.REM(System.String,System.String)">
            <summary>
            移除元素
            </summary>
            <param name="key"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.SUNION(System.String,System.String)">
            <summary>
            合并返回指定的集合
            返回给定的多个集合的并集中的所有成员.
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.SUNION(System.String[])">
            <summary>
            合并返回指定的集合
            返回给定的多个集合的并集中的所有成员.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisSets.SUNIONSTORE(System.String,System.String[])">
            <summary>
            合并元素至目标键
            </summary>
            <param name="destKey"></param>
            <param name="keys"></param>
        </member>
        <member name="T:Adf.RedisLists">
            <summary>
            Redis 列表
            </summary>
        </member>
        <member name="M:Adf.RedisLists.LRange(System.String,System.Int32,System.Int32)">
            <summary>
            获取列表中指定位置元素
            当"start=0,end=-1"获取整个集合中所有元素
            </summary>
            <param name="key"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisLists.LRem(System.String,System.String,System.Int32)">
            <summary>
            移除元素后的一个列表范围
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="count">
            
            count &lt; 0: Remove elements equal to value moving from head to tail.
            count &gt; 0: Remove elements equal to value moving from tail to head.
            count = 0: Remove all elements equal to value.
            
            </param>
            <returns>Integer reply: the number of removed elements.</returns>
        </member>
        <member name="M:Adf.RedisLists.LSet(System.String,System.Int32,System.String)">
            <summary>
            设置指定索引元素值
            将索引为index的元素赋值为value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="index"></param>
            <returns>Integer reply: the number of removed elements.</returns>
        </member>
        <member name="M:Adf.RedisLists.LInsert(System.String,System.String,System.String,System.Boolean)">
            <summary>
            在指定位置添加元素
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="before">元素前后,true before,false after</param>
            <param name="pivot">位置元素</param>
            <returns>添加后元素数</returns>
        </member>
        <member name="M:Adf.RedisLists.LPush(System.String,System.String)">
            <summary>
            在列表左侧添加元素
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>添加后元素数</returns>
        </member>
        <member name="M:Adf.RedisLists.RPush(System.String,System.String)">
            <summary>
            在列表右侧添加元素
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>添加后元素数</returns>
        </member>
        <member name="M:Adf.RedisLists.LLen(System.String)">
            <summary>
            列表中元素的个数
            当键不存在时LLEN会返回0
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisLists.LIndex(System.String,System.Int32)">
            <summary>
            获取指定索引元素
            如果index是负数则表示从右边开始计算的索引，最右边元素的索引是-1
            </summary>
            <param name="key"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisLists.LPop(System.String)">
            <summary>
            取出列表第一元素
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisLists.RPop(System.String)">
            <summary>
            取出列表最后一个元素
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.RedisLists.RPOPLPUSH(System.String,System.String)">
            <summary>
            将元素从一个列表转到另一个列表
            原子性地返回并移除存储在 source 的列表的最后一个元素（列表尾部元素）， 并把该元素放入存储在 destination 的列表的第一个元素位置（列表头部)
            </summary>
            <param name="destinationKey"></param>
            <param name="sourceKey"></param>
        </member>
        <member name="T:Adf.PropertyAccessor">
            <summary>
            属性访问器
            </summary>
        </member>
        <member name="M:Adf.PropertyAccessor.GetValue(System.Object,System.String)">
            <summary>
            获取属性值
            </summary>
            <param name="instance"></param>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.PropertyAccessor.SetValue(System.Object,System.String,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="instance"></param>
            <param name="memberName"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Adf.PropertyAccessor.FindProperty(System.Object,System.String)">
            <summary>
            找到实例属性
            </summary>
            <param name="instance"></param>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.PropertyAccessor.GetGets(System.Object)">
            <summary>
            获取实例所有可读属性列表
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.PropertyAccessor.GetGets(System.Type)">
            <summary>
            获取目标类型所有可读属性列表
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.PropertyAccessor.GetSets(System.Object)">
            <summary>
            获取实例所有可写属性列表
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.PropertyAccessor.GetSets(System.Type)">
            <summary>
            获取目标类型所有可写属性列表
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.PropertyAccessor.PropertyAccessorItem">
            <summary>
            属性访问项
            </summary>
        </member>
        <member name="P:Adf.PropertyAccessor.PropertyAccessorItem.PropertyInfo">
            <summary>
            属性
            </summary>
        </member>
        <member name="P:Adf.PropertyAccessor.PropertyAccessorItem.Method">
            <summary>
            相当方法
            </summary>
        </member>
        <member name="T:Adf.Config.IpGroupElement">
            <summary>
            IP组客户端配置元素
            </summary>
        </member>
        <member name="P:Adf.Config.IpGroupElement.Ip">
            <summary>
            Ip Address
            </summary>
        </member>
        <member name="P:Adf.Config.IpGroupElement.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:Adf.Config.IpGroupElement.Level">
            <summary>
            级别
            </summary>
        </member>
        <member name="P:Adf.Config.IpGroupElement.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:Adf.SocketBufferReader">
            <summary>
            Socket Buffer Reader
            </summary>
        </member>
        <member name="M:Adf.SocketBufferReader.#ctor(System.Net.Sockets.Socket,System.Text.Encoding,System.Int32)">
            <summary>
            new instance
            </summary>
            <param name="socket"></param>
            <param name="encoding"></param>
            <param name="maxLength"></param>
        </member>
        <member name="M:Adf.SocketBufferReader.Read">
            <summary>
            read a byte from Socket
            </summary>
            <returns></returns>
            <exception cref="T:System.Net.Sockets.SocketException">remote host has been closed</exception>
            <exception cref="T:System.InvalidOperationException">exceed the permitted maximum length</exception>
        </member>
        <member name="P:Adf.SocketBufferReader.ReadAllLength">
            <summary>
            get all read length
            </summary>
        </member>
        <member name="T:Adf.Mail.MailCommon">
            <summary>
            邮件助手
            </summary>
        </member>
        <member name="F:Adf.Mail.MailCommon.NewLine">
            <summary>
            表示一行
            </summary>
        </member>
        <member name="F:Adf.Mail.MailCommon.MimeVersion">
            <summary>
            MIME
            </summary>
        </member>
        <member name="F:Adf.Mail.MailCommon.Mailer">
            <summary>
            Mailer
            </summary>
        </member>
        <member name="M:Adf.Mail.MailCommon.Base64EncodHead(System.String,System.Text.Encoding)">
            <summary>
            进行BASE64头的编码
            </summary>
            <param name="input">要进行编码的串</param>
            <param name="encoding">编码类型</param>
            <returns>返回编码后的串</returns>
        </member>
        <member name="M:Adf.Mail.MailCommon.Line76Break(System.String)">
            <summary>
            将指定的字符串进行76字符行短行
            </summary>
            <param name="input">要进行处理的串</param>
            <returns>返回字符串形式的Base64编码后串</returns>
        </member>
        <member name="M:Adf.Mail.MailCommon.Line76Break(System.String,System.String)">
            <summary>
            将指定的字符串进行76字符行短行
            </summary>
            <param name="input">要进行处理的串</param>
            <param name="lineStart">每行开始字符</param>
            <returns>返回字符串形式的Base64编码后串</returns>
        </member>
        <member name="M:Adf.Mail.MailCommon.Base64EncodeAddress(System.String,System.String,System.Text.Encoding)">
            <summary>
            编码邮件地址头
            </summary>
            <param name="name"></param>
            <param name="address"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Mail.MailCommon.IsAscii(System.String)">
            <summary>
            判断是否为键盘字符
            </summary>
            <param name="input">要进行判断的字符串</param>
            <returns>返回Bool值表示是否为键盘字符</returns>
        </member>
        <member name="M:Adf.Mail.MailCommon.JoinAddressList(System.Collections.Generic.List{Adf.Mail.MailAddress},System.Text.Encoding)">
            <summary>
            创建用于邮件体的邮件地址集合的数组
            </summary>
            <param name="addressList">须要处理的集合</param>
            <param name="encoding"></param>
            <returns>返回字符串型式数组</returns>
        </member>
        <member name="M:Adf.Mail.MailCommon.BuildMessageID(System.DateTime)">
            <summary>
            构键消息标识
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.Config.AppConfig">
            <summary>
            应用配置项
            </summary>
        </member>
        <member name="F:Adf.Config.AppConfig.Instance">
            <summary>
            获取默认应用配置实例
            </summary>
        </member>
        <member name="M:Adf.Config.AppConfig.#ctor">
            <summary>
            App.Config
            </summary>
        </member>
        <member name="M:Adf.Config.AppConfig.#ctor(System.String)">
            <summary>
            AppName.Config
            </summary>
            <param name="appName"></param>
        </member>
        <member name="T:Adf.QueueServerPool">
            <summary>
            队列服务客户端池
            </summary>
        </member>
        <member name="M:Adf.QueueServerPool.#ctor(System.String)">
            <summary>
            指定配置文件以初始化新实例
            </summary>
            <param name="configName"></param>
        </member>
        <member name="P:Adf.QueueServerPool.Pool">
            <summary>
            获取池管理对象
            </summary>
        </member>
        <member name="P:Adf.QueueServerPool.Name">
            <summary>
            获取配置节点名, 默认： QueueServer
            </summary>
        </member>
        <member name="P:Adf.QueueServerPool.MemberPoolSize">
            <summary>
            获取每成员的最大实例数,默认:800,配置节： ConfigName + MemberPoolSize
            </summary>
        </member>
        <member name="P:Adf.QueueServerPool.Topic">
            <summary>
            获取连接队列名
            </summary>
        </member>
        <member name="P:Adf.QueueServerPool.CommitTimeout">
            <summary>
            获取连接消息处理超时时间，单位：秒， 默认 30s, 配置节： ConfigName + CommitTimeout
            </summary>
        </member>
        <member name="P:Adf.QueueServerPool.Timeout">
            <summary>
            获取请求超时时间，单位：秒， 默认 5s, 配置节： ,配置节： ConfigName + Timeout
            </summary>
        </member>
        <member name="T:Adf.QueueServerDefault">
            <summary>
            以 QueueServer 为配置的默认单例实例
            </summary>
        </member>
        <member name="F:Adf.QueueServerDefault.Instance">
            <summary>
            一个 QueueServer 实例
            </summary>
        </member>
        <member name="T:Adf.QueueServerAction">
            <summary>
            Queue Server Action Type
            </summary>
        </member>
        <member name="F:Adf.QueueServerAction.LPUSH">
            <summary>
            LPUSH
            </summary>
        </member>
        <member name="F:Adf.QueueServerAction.RPUSH">
            <summary>
            RPUSH
            </summary>
        </member>
        <member name="F:Adf.QueueServerAction.DELETE">
            <summary>
            DELETE
            </summary>
        </member>
        <member name="F:Adf.QueueServerAction.PULL">
            <summary>
            PULL
            </summary>
        </member>
        <member name="F:Adf.QueueServerAction.CLEAR">
            <summary>
            CLEAR
            </summary>
        </member>
        <member name="F:Adf.QueueServerAction.COUNT">
            <summary>
            COUNT
            </summary>
        </member>
        <member name="F:Adf.QueueServerAction.LCANCEL">
            <summary>
            LCANCEL
            </summary>
        </member>
        <member name="F:Adf.QueueServerAction.RCANCEL">
            <summary>
            RCANCEL
            </summary>
        </member>
        <member name="F:Adf.QueueServerAction.CREATEQUEUE">
            <summary>
            CREATE QUEUE
            </summary>
        </member>
        <member name="F:Adf.QueueServerAction.DELETEQUEUE">
            <summary>
            DELETE QUEUE
            </summary>
        </member>
        <member name="F:Adf.QueueServerAction.OK">
            <summary>
            RESULT OK
            </summary>
        </member>
        <member name="T:Adf.QueueServerEncoder">
            <summary>
            Queue Server Encoder
            </summary>
        </member>
        <member name="M:Adf.QueueServerEncoder.GenerateRequestID">
            <summary>
            generate a request id,  id is 32 byte uuid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.QueueServerEncoder.LPush(System.String,System.String,System.String)">
            <summary>
            encode lpush
            </summary>
            <param name="body"></param>
            <param name="requestId"></param>
            <param name="queue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">queue or requestId or data is null</exception>
        </member>
        <member name="M:Adf.QueueServerEncoder.LPush(System.String,System.String,System.Byte[])">
            <summary>
            encode lpush
            </summary>
            <param name="body"></param>
            <param name="requestId"></param>
            <param name="queue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">queue or requestId or data is null</exception>
        </member>
        <member name="M:Adf.QueueServerEncoder.RPush(System.String,System.String,System.String)">
            <summary>
            encode rpush
            </summary>
            <param name="body"></param>
            <param name="requestId"></param>
            <param name="queue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">queue or requestId or data is null</exception>
        </member>
        <member name="M:Adf.QueueServerEncoder.RPush(System.String,System.String,System.Byte[])">
            <summary>
            encode rpush
            </summary>
            <param name="body"></param>
            <param name="requestId"></param>
            <param name="queue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">queue or requestId or data is null</exception>
        </member>
        <member name="M:Adf.QueueServerEncoder.Clear(System.String,System.String)">
            <summary>
            encode clear, invoke QueueServerActionResult.GetBodyIntger() get clear count.
            </summary>
            <param name="requestId"></param>
            <param name="queue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">queue or requestId or data is null</exception>
        </member>
        <member name="M:Adf.QueueServerEncoder.Count(System.String,System.String)">
            <summary>
            encode count, invoke QueueServerActionResult.GetBodyIntger() get result.
            </summary>
            <param name="requestId"></param>
            <param name="queue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">queue or requestId or data is null</exception>
        </member>
        <member name="M:Adf.QueueServerEncoder.Delete(System.String,System.String)">
            <summary>
            encode delete
            </summary>
            <param name="requestId"></param>
            <param name="queue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">queue or requestId or data is null</exception>
        </member>
        <member name="M:Adf.QueueServerEncoder.LCancel(System.String,System.String)">
            <summary>
            encode lcancel
            </summary>
            <param name="requestId"></param>
            <param name="queue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">queue or requestId or data is null</exception>
        </member>
        <member name="M:Adf.QueueServerEncoder.RCancel(System.String,System.String)">
            <summary>
            encode rcancel
            </summary>
            <param name="requestId"></param>
            <param name="queue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">queue or requestId or data is null</exception>
        </member>
        <member name="M:Adf.QueueServerEncoder.Pull(System.String,System.String)">
            <summary>
            encode pull
            </summary>
            <param name="requestId"></param>
            <param name="queue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">queue or requestId or data is null</exception>
        </member>
        <member name="M:Adf.QueueServerEncoder.CreateQueue(System.String,System.String)">
            <summary>
            encode create queue
            </summary>
            <param name="requestId"></param>
            <param name="queue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">queue or requestId or data is null</exception>
        </member>
        <member name="M:Adf.QueueServerEncoder.DeleteQueue(System.String,System.String)">
            <summary>
            encode delete queue
            </summary>
            <param name="requestId"></param>
            <param name="queue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">queue or requestId or data is null</exception>
        </member>
        <member name="M:Adf.QueueServerEncoder.Action(System.Byte,System.String,System.String)">
            <summary>
            encode clear
            </summary>
            <param name="action"></param>
            <param name="requestId"></param>
            <param name="queue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">queue or requestId or data is null</exception>
        </member>
        <member name="M:Adf.QueueServerEncoder.Decode(System.Byte[])">
            <summary>
            解释一个操作结果
            </summary>
            <param name="data"></param>
            <exception cref="T:Adf.QueueServerDecodeException"></exception>
            <returns></returns>
        </member>
        <member name="T:Adf.QueueServerActionResult">
            <summary>
            表示一个队列操作结果
            </summary>
        </member>
        <member name="M:Adf.QueueServerActionResult.#ctor(System.Byte,System.String,System.String,System.String)">
            <summary>
            初始化新实例
            </summary>
            <param name="action"></param>
            <param name="requestId"></param>
            <param name="queue"></param>
            <param name="result"></param>
        </member>
        <member name="M:Adf.QueueServerActionResult.GetBodyString">
            <summary>
            获取消息实体UTF8解析的字符串表现形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adf.QueueServerActionResult.SetBody(System.Byte[],System.UInt16,System.UInt64)">
            <summary>
            设置当前消息已被获取的次数
            </summary>
            <param name="duplications"></param>
            <param name="body"></param>
            <param name="messageId"></param>
        </member>
        <member name="M:Adf.QueueServerActionResult.SetCount(System.Int32)">
            <summary>
            设置当前消息对数量的描述
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Adf.QueueServerActionResult.SetMessageId(System.UInt64)">
            <summary>
            设置当前消息的消息ID
            </summary>
            <param name="messageId"></param>
        </member>
        <member name="P:Adf.QueueServerActionResult.Action">
            <summary>
            获取当前操作类型，对应 <see cref="T:Adf.QueueServerActionResult"/>
            </summary>
        </member>
        <member name="P:Adf.QueueServerActionResult.RequestId">
            <summary>
            获取请求标识
            </summary>
        </member>
        <member name="P:Adf.QueueServerActionResult.Queue">
            <summary>
            获取请求队列
            </summary>
        </member>
        <member name="P:Adf.QueueServerActionResult.Result">
            <summary>
            获取请求结果
            </summary>
        </member>
        <member name="P:Adf.QueueServerActionResult.Body">
            <summary>
            获取PULL时消息实体
            </summary>
        </member>
        <member name="P:Adf.QueueServerActionResult.Duplications">
            <summary>
            获取PULL时获取当前消息已被获取的次数，首次被获取该值为1
            </summary>
        </member>
        <member name="P:Adf.QueueServerActionResult.MessageId">
            <summary>
            获取PULL/RPUSH/LPUSH 时描述消息ID
            </summary>
        </member>
        <member name="P:Adf.QueueServerActionResult.Count">
            <summary>
            获取COUNT/CLEAR 时数量描述
            </summary>
        </member>
        <member name="T:Adf.QueueServerDecodeException">
            <summary>
            解析失败异常
            </summary>
        </member>
        <member name="M:Adf.QueueServerDecodeException.#ctor(System.String)">
            <summary>
            初始化一个新异常
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:Adf.QueueServerDecodeException.#ctor(System.String,System.Exception)">
            <summary>
            初始化一个新异常
            </summary>
            <param name="message">消息</param>
            <param name="innerException">内嵌异常</param>
        </member>
        <member name="T:Adf.Mail.DKIMAlgorithm">
            <summary>
            DKIM Algorithm
            </summary>
        </member>
        <member name="F:Adf.Mail.DKIMAlgorithm.RSASha1">
            <summary>
            Sha1
            </summary>
        </member>
        <member name="F:Adf.Mail.DKIMAlgorithm.RSASha256">
            <summary>
            Sha256, is default
            </summary>
        </member>
        <member name="T:Adf.Mail.DKIMType">
            <summary>
            DKIM Type
            </summary>
        </member>
        <member name="F:Adf.Mail.DKIMType.Simple">
            <summary>
            Simple
            </summary>
        </member>
        <member name="F:Adf.Mail.DKIMType.Relaxed">
            <summary>
            Relaxed
            </summary>
        </member>
        <member name="T:Adf.Mail.DKIM">
            <summary>
            DKIM
            </summary>
        </member>
        <member name="M:Adf.Mail.DKIM.#ctor(System.String,System.String)">
            <summary>
            Initialize new instance
            </summary>
            <param name="domain"></param>
            <param name="selector"></param>
        </member>
        <member name="M:Adf.Mail.DKIM.LoadKeyFile(System.String)">
            <summary>
            Load Key File pcks7 pem
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="M:Adf.Mail.DKIM.LoadKey(System.String)">
            <summary>
            Load Key pcks7 pem
            </summary>
            <param name="privateKey"></param>
        </member>
        <member name="M:Adf.Mail.DKIM.Sign(Adf.Mail.MailMessage)">
            <summary>
            DKIM message
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.Mail.DKIM.HeaderType">
            <summary>
            DKIM type , default Relaxed
            </summary>
        </member>
        <member name="P:Adf.Mail.DKIM.BodyType">
            <summary>
            DKIM type , default Simple
            </summary>
        </member>
        <member name="P:Adf.Mail.DKIM.Algorithm">
            <summary>
            DKIM Algorithm, default RSASha256
            </summary>
        </member>
        <member name="P:Adf.Mail.DKIM.Domain">
            <summary>
            domain
            </summary>
        </member>
        <member name="P:Adf.Mail.DKIM.Selector">
            <summary>
            selector
            </summary>
        </member>
        <member name="P:Adf.Mail.DKIM.SignHeaders">
            <summary>
            sign headers
            </summary>
        </member>
        <member name="T:Adf.UniqueID">
            <summary>
            时间ID生成器
            </summary>
        </member>
        <member name="F:Adf.UniqueID.PAD">
            <summary>
            填充字符
            </summary>
        </member>
        <member name="F:Adf.UniqueID.Encoder">
            <summary>
            编码器
            </summary>
        </member>
        <member name="M:Adf.UniqueID.Generate">
            <summary>
            生成一个标识，长度为22字符
            </summary>
        </member>
        <member name="M:Adf.UniqueID.Generate(System.String,System.String)">
            <summary>
            生成新标识，并以加密型式追加指定字符，若要进行追加不加密，请使用不带参数方法生成码后再进行字符串拼接
            不带前后缀的标准长度为22字符
            </summary>
            <param name="prefix">加密前缀</param>
            <param name="append">加密的追加的信息</param>
        </member>
        <member name="T:Adf.HttpServerChunkStatus">
            <summary>
            块输出状态
            </summary>
        </member>
        <member name="F:Adf.HttpServerChunkStatus.NoBegin">
            <summary>
            No Begin
            </summary>
        </member>
        <member name="F:Adf.HttpServerChunkStatus.Writing">
            <summary>
            In The Writing
            </summary>
        </member>
        <member name="F:Adf.HttpServerChunkStatus.End">
            <summary>
            ENd
            </summary>
        </member>
        <member name="T:Adf.HttpServerAuthorizationCallback">
            <summary>
            Http Server Authorization Callback
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.HttpServerWebSocketCallback">
            <summary>
            WebSocket Disconnection Callback
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Adf.HttpServerWebSocketMessage">
            <summary>
            WebSocket Message Action
            </summary>
            <param name="context"></param>
            <param name="args">args</param>
            <returns></returns>
        </member>
        <member name="T:Adf.HttpServer">
            <summary>
            Simple Http Server
            </summary>
        </member>
        <member name="M:Adf.HttpServer.#ctor(Adf.HttpServerCallback,System.Int32,System.String)">
            <summary>
            Initialize new instance
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Adf.HttpServer.#ctor(System.Int32,System.String)">
            <summary>
            Initialize new instance
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
        </member>
        <member name="M:Adf.HttpServer.Start">
            <summary>
            start
            </summary>
        </member>
        <member name="M:Adf.HttpServer.OnError(System.Exception)">
            <summary>
            发生未处理异常事件时
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Adf.HttpServer.NewConnection(System.Net.Sockets.Socket)">
            <summary>
            new socket
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:Adf.HttpServer.HttpProcess(Adf.HttpServerContext)">
            <summary>
            Http 请求处理
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Adf.HttpServer.ParsePostData(System.Net.Sockets.Socket,Adf.HttpServerContext)">
            <summary>
            解析POST数扰
            </summary>
            <param name="socket"></param>
            <param name="context"></param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Adf.HttpServer.GetWebSocket(System.Int64)">
            <summary>
            获取指定id websocket,未找到则返回null
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.HttpServer.WebSocketForEach(System.Action{Adf.HttpServerWebSocketContext})">
            <summary>
            遍历当前具有的WebSocket连接
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Adf.HttpServer.OnWebSocketNewMessage(Adf.HttpServerWebSocketContext,System.Byte[],Adf.WebSocketOpcode)">
            <summary>
            触发一个消息
            </summary>
            <param name="data"></param>
            <param name="opcode"></param>
            <param name="context"></param>
        </member>
        <member name="M:Adf.HttpServer.OnWebSocketDisconnected(Adf.HttpServerWebSocketContext)">
            <summary>
            引发连接断开事件
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Adf.HttpServer.OnWebSocketSendCompleted(Adf.HttpServerWebSocketContext,Adf.WebSocketSendEventArgs)">
            <summary>
            触发一个消息发送完成事件，置状态失败
            </summary>
            <param name="args"></param>
            <param name="context"></param>
        </member>
        <member name="M:Adf.HttpServer.WebSocketDisconnectAll">
            <summary>
            断开所有连接
            </summary>
        </member>
        <member name="M:Adf.HttpServer.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="M:Adf.HttpServer.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Adf.HttpServer.MaxRequestHeadLength">
            <summary>
            获取或设置最大允许请求头长度，单位：字节， 默认 1M
            </summary>
        </member>
        <member name="P:Adf.HttpServer.MaxRequestContentLength">
            <summary>
            获取或设置请求内容最大长度，单位: 字节
            默认10M, 不建议直接修改此值，若有必要建议实现NewRequest事件，并在其中为指定的URL设置<see cref="P:Adf.HttpServerContext.MaxRequestContentLength"/>
            get or set request content entity max length,
            do not recommend setting this value directly, 
            recommend set <see cref="P:Adf.HttpServerContext.MaxRequestContentLength"/> from NewRequest event
            </summary>
        </member>
        <member name="P:Adf.HttpServer.BufferSize">
            <summary>
            获取或设置连接读取缓冲区大小，默认 4096
            </summary>
        </member>
        <member name="P:Adf.HttpServer.Port">
            <summary>
            Server Port
            </summary>
        </member>
        <member name="P:Adf.HttpServer.Ip">
            <summary>
            ip address
            </summary>
        </member>
        <member name="P:Adf.HttpServer.IsRuning">
            <summary>
            is Runing
            </summary>
        </member>
        <member name="P:Adf.HttpServer.Callback">
            <summary>
            get or set http callback, set null resume to default callback
            </summary>
        </member>
        <member name="P:Adf.HttpServer.Handler">
            <summary>
            get or set http handler, this property override <see cref="P:Adf.HttpServer.Callback"/> method
            </summary>
        </member>
        <member name="E:Adf.HttpServer.WebSocketConnectioned">
            <summary>
            新连接事件
            </summary>
        </member>
        <member name="E:Adf.HttpServer.WebSocketDisconnected">
            <summary>
            连接断开事件
            </summary>
        </member>
        <member name="E:Adf.HttpServer.WebSocketNewMessage">
            <summary>
            新消息事件
            </summary>
        </member>
        <member name="E:Adf.HttpServer.WebSocketSendCompleted">
            <summary>
            消息发送成功事件
            </summary>
        </member>
        <member name="E:Adf.HttpServer.NewRequest">
            <summary>
            新HTTP请求， 此事件中的任务异常均会中止请求，并返回403状态
            </summary>
        </member>
        <member name="E:Adf.HttpServer.Error">
            <summary>
            未处理的异常事件。注意：实现该事件时请确保能安全执行，若事件有异常发生有可能会引起应用崩溃
            </summary>
        </member>
        <member name="P:Adf.HttpServer.ServerName">
            <summary>
            获取或设置服务器名
            </summary>
        </member>
        <member name="P:Adf.HttpServer.Authorization">
            <summary>
            获取一个值表示是否需要验证
            </summary>
        </member>
        <member name="P:Adf.HttpServer.AuthorizationCallback">
            <summary>
            Authorization callback
            </summary>
        </member>
        <member name="P:Adf.HttpServer.AuthenticateRealm">
            <summary>
            WWW-Authenticate realm vaue
            </summary>
        </member>
        <member name="P:Adf.HttpServer.Encoding">
            <summary>
            Encoding, default utf-8
            </summary>
        </member>
        <member name="P:Adf.HttpServer.AddressFamily">
            <summary>
            tcp AddressFamily
            </summary>
        </member>
        <member name="P:Adf.HttpServer.Backlog">
            <summary>
            获取或设置监听队列长度
            </summary>
        </member>
        <member name="P:Adf.HttpServer.ReadHeadTimeout">
            <summary>
            头读取超时时间 - KeepAlive 超时时间
            </summary>
        </member>
        <member name="T:Adf.SocketConnection.SocketClientException">
            <summary>
            socket client exception
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketClientException.#ctor(System.String)">
            <summary>
            init new instance
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Adf.SocketConnection.SocketClientException.#ctor(System.String,System.Exception)">
            <summary>
            init new instance
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:Adf.SocketConnection.ErrorEventArgs">
            <summary>
            error event args
            </summary>
        </member>
        <member name="P:Adf.SocketConnection.ErrorEventArgs.Exception">
            <summary>
            get event exception
            </summary>
        </member>
        <member name="T:Adf.SocketConnection.ConnectionHandler">
            <summary>
            default connection handler
            </summary>
        </member>
        <member name="F:Adf.SocketConnection.ConnectionHandler.Default">
            <summary>
            default handler
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.ConnectionHandler.Parse(Adf.SocketConnection.SocketConnection,System.Byte)">
            <summary>
            parse message
            </summary>
            <param name="connection"></param>
            <param name="firstByte"></param>
            <returns></returns>
        </member>
        <member name="P:Adf.SocketConnection.ConnectionEventArgs.Connection">
            <summary>
            get connection
            </summary>
        </member>
        <member name="T:Adf.IO.BinaryWriterBE">
            <summary>
            字节写书器(Big Endian)
            </summary>
        </member>
        <member name="M:Adf.IO.BinaryWriterBE.Dispose">
            <summary>
            清理资源（不会清理初始传入的流）
            </summary>
        </member>
        <member name="P:Adf.IO.BinaryWriterBE.Stream">
            <summary>
            get stream
            </summary>
        </member>
        <member name="P:Adf.IO.BinaryWriterBE.Encoding">
            <summary>
            get encoding
            </summary>
        </member>
        <member name="T:Adf.WebSocketClient">
            <summary>
            WebSocket 客户端
            </summary>
        </member>
        <member name="M:Adf.WebSocketClient.#ctor(System.String,System.Int32)">
            <summary>
            以指定主机初始化实例
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:Adf.WebSocketClient.#ctor(System.String,System.Int32,System.String)">
            <summary>
            以指定主机初始化实例
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="path"></param>
        </member>
        <member name="M:Adf.WebSocketClient.#ctor(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            以指定主机初始化实例
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="path"></param>
            <param name="pingInterval">自动ping间隔，若设备为0则不进行ping检查</param>
        </member>
        <member name="M:Adf.WebSocketClient.Connection">
            <summary>
            打开连接
            </summary>
            <exception cref="T:System.IO.IOException">connection failure</exception>
            <exception cref="T:System.Net.WebException">web handshake exception</exception>
            <returns></returns>
        </member>
        <member name="M:Adf.WebSocketClient.Ping">
            <summary>
            发送PING
            </summary>
        </member>
        <member name="M:Adf.WebSocketClient.Send(System.String)">
            <summary>
            消息发送
            </summary>
            <param name="data"></param>
            <exception cref="T:System.ArgumentNullException">message is null</exception>
            <exception cref="T:System.IO.IOException">network is closed</exception>
        </member>
        <member name="M:Adf.WebSocketClient.SendAsync(System.String,System.Object)">
            <summary>
            异步发送一个消息
            </summary>
            <param name="data"></param>
            <exception cref="T:System.ArgumentNullException">message is null</exception>
            <exception cref="T:System.IO.IOException">network is closed</exception>
            <param name="userState"></param>
        </member>
        <member name="M:Adf.WebSocketClient.Send(System.Byte[])">
            <summary>
            发送字节数组
            </summary>
            <param name="data"></param>
            <exception cref="T:System.ArgumentNullException">message is null</exception>
            <exception cref="T:System.IO.IOException">network is closed</exception>
        </member>
        <member name="M:Adf.WebSocketClient.SendAsync(System.Byte[],System.Object)">
            <summary>
            异步发送字节数组
            </summary>
            <param name="data"></param>
            <exception cref="T:System.ArgumentNullException">message is null</exception>
            <exception cref="T:System.IO.IOException">network is closed</exception>
            <param name="userState"></param>
        </member>
        <member name="M:Adf.WebSocketClient.Send(System.Byte[],Adf.WebSocketOpcode)">
            <summary>
            发送字节数组并指定内容类型
            </summary>
            <param name="data"></param>
            <param name="opcode"></param>
            <exception cref="T:System.ArgumentNullException">message is null</exception>
            <exception cref="T:System.IO.IOException">network is closed</exception>
        </member>
        <member name="M:Adf.WebSocketClient.SendAsync(System.Byte[],Adf.WebSocketOpcode,System.Object)">
            <summary>
            异步发送字节数组并指定内容类型
            </summary>
            <param name="data"></param>
            <param name="opcode"></param>
            <param name="userState"></param>
            <exception cref="T:System.ArgumentNullException">message is null</exception>
            <exception cref="T:System.IO.IOException">network is closed</exception>
        </member>
        <member name="M:Adf.WebSocketClient.ReadCallback(System.IAsyncResult)">
            <summary>
            异步接收回调
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Adf.WebSocketClient.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="M:Adf.WebSocketClient.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:Adf.WebSocketClient.Close(Adf.WebSocketCloseReason)">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:Adf.WebSocketClient.OnError(System.Exception)">
            <summary>
            引发异常事件
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Adf.WebSocketClient.OnMessage(System.Byte[],Adf.WebSocketOpcode)">
            <summary>
            引发消息事件
            </summary>
            <param name="data"></param>
            <param name="opcode"></param>
        </member>
        <member name="M:Adf.WebSocketClient.OnConnectioned">
            <summary>
            引发连接完成事件
            </summary>
        </member>
        <member name="M:Adf.WebSocketClient.OnClosed(Adf.WebSocketCloseReason)">
            <summary>
            引发关闭完成事件
            </summary>
            <param name="reason"></param>
        </member>
        <member name="E:Adf.WebSocketClient.Connectioned">
            <summary>
            连接成功事件
            </summary>
        </member>
        <member name="E:Adf.WebSocketClient.Closed">
            <summary>
            连接断开/关闭事件
            </summary>
        </member>
        <member name="E:Adf.WebSocketClient.Error">
            <summary>
            错误事件
            </summary>
        </member>
        <member name="E:Adf.WebSocketClient.Message">
            <summary>
            消息事件
            </summary>
        </member>
        <member name="E:Adf.WebSocketClient.SendCompleted">
            <summary>
            消息发送成功事件
            </summary>
        </member>
        <member name="P:Adf.WebSocketClient.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Adf.WebSocketClient.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:Adf.WebSocketClient.PingInterval">
            <summary>
            获取或设置PING时间间隔,单位：秒，默认60
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">value must than or equal zero.</exception>
        </member>
        <member name="P:Adf.WebSocketClient.Encoding">
            <summary>
            获取或设置字符解释编码,默认UTF8
            </summary>
        </member>
        <member name="P:Adf.WebSocketClient.LocalEndPoint">
            <summary>
            获取或设置应用连接的本地接口
            </summary>
            <exception cref="T:System.ArgumentNullException">value is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="P:Adf.WebSocketClient.IsConnectioned">
            <summary>
            获取是否已连接至主机
            </summary>
        </member>
        <member name="P:Adf.WebSocketClient.Path">
            <summary>
            获取当前连接请求路径
            </summary>
        </member>
        <member name="P:Adf.WebSocketClient.RequestHeader">
            <summary>
            获取请求头
            </summary>
        </member>
        <member name="P:Adf.WebSocketClient.ResponseHeader">
            <summary>
            获取响应头
            </summary>
        </member>
        <member name="P:Adf.WebSocketClient.UserState">
            <summary>
            用户自定义状态值
            </summary>
        </member>
        <member name="P:Adf.WebSocketClient.AutoConnect">
            <summary>
            获取或设置是否进行自动连接，默认false, 设置为true时随ping检查，若未连接则将自动连接，若禁用PingInterval则该设置无效。若调用close则该值将置为false
            </summary>
        </member>
        <member name="T:Adf.Singleton`1">
            <summary>
            单例
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Adf.Singleton`1.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="T:Adf.Image.ImageMark">
            <summary>
            为图片处理水印
            </summary>
        </member>
        <member name="M:Adf.Image.ImageMark.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="imgMark">水印图片</param>
        </member>
        <member name="M:Adf.Image.ImageMark.#ctor(System.String,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="txtMark">水印文字</param>
            <param name="FontSize">文字大小</param>
        </member>
        <member name="M:Adf.Image.ImageMark.#ctor(System.String,System.String,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="txtMark">水印文字</param>
            <param name="imgMark">水印图片</param>
            <param name="FontSize">文字大小</param>
        </member>
        <member name="M:Adf.Image.ImageMark.GetPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            计算水印位置
            </summary>
            <param name="imgwidth">图片宽度</param>
            <param name="imgheight">图片高度</param>
            <param name="markwidth">水印宽度</param>
            <param name="markheight">水印高度</param>
            <returns>int[x,y]</returns>
        </member>
        <member name="M:Adf.Image.ImageMark.Create(System.IO.Stream,System.IO.Stream)">
            <summary>
            创建一个水印
            </summary>
            <param name="stream">要创建水印的图片流</param>
            <param name="savestream">要保存至的流</param>
        </member>
        <member name="M:Adf.Image.ImageMark.Create(System.String,System.String)">
            <summary>
            开始创建,并返回创建是否成功,如果不成功其异常信息将写入Result属性
            </summary>
            <param name="filepath">要添加水印的图片路径</param>
            <param name="savefilepath">水印添加后的保存路径</param>
        </member>
        <member name="M:Adf.Image.ImageMark.Create(System.String)">
            <summary>
            开始创建,并返回创建是否成功,如果不成功其异常信息将写入Result属性
            </summary>
            <param name="filepath">要添加水印的图片路径</param>
        </member>
        <member name="P:Adf.Image.ImageMark.TxtMark">
            <summary>
            获取文字水印文本
            </summary>
        </member>
        <member name="P:Adf.Image.ImageMark.ImgMark">
            <summary>
            获取水印图片对象路径(注:如果已设置TxtMark则此设置将无效)
            </summary>
        </member>
        <member name="P:Adf.Image.ImageMark.ErrorMessage">
            <summary>
            获取创建时出现的异常文本
            </summary>
        </member>
        <member name="P:Adf.Image.ImageMark.TxtFont">
            <summary>
            获取或设置水印文字的大小及字体
            </summary>
        </member>
        <member name="P:Adf.Image.ImageMark.TxtColor">
            <summary>
            获取或设置文字水印色
            </summary>
        </member>
        <member name="P:Adf.Image.ImageMark.TxtAlpha">
            <summary>
            获取或设置文字水印透明度,值由0-255，值越小越透明
            </summary>
        </member>
        <member name="P:Adf.Image.ImageMark.Left">
            <summary>
            获取或设置水印距左边宽度,默认为10
            </summary>
        </member>
        <member name="P:Adf.Image.ImageMark.Top">
            <summary>
            获取或设置水印距顶高度,默认为10
            </summary>
        </member>
        <member name="P:Adf.Image.ImageMark.Position">
            <summary>
            获取或设置水印图生成位置
            </summary>
        </member>
        <member name="P:Adf.Image.ImageMark.Margin">
            <summary>
            获取或设置当<see cref="P:Adf.Image.ImageMark.Position"/> 不等于<see cref="F:Adf.Image.ImageMarkPosition.Custom"/> 时水印与图片的边距
            </summary>
        </member>
        <member name="T:Adf.Config.ServerConfig">
            <summary>
            Server Config Item
            </summary>
        </member>
        <member name="F:Adf.Config.ServerConfig.Instance">
            <summary>
            获取配置实例
            </summary>
        </member>
        <member name="M:Adf.Config.ServerConfig.GetConfiguration(System.String)">
            <summary>
            通过单例模式获取一个配置实例
            </summary>
            <param name="fileName">配置文件名称,区分大小写</param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ServerConfig.#ctor">
            <summary>
            initialize new server.config instance
            </summary>
        </member>
        <member name="M:Adf.Config.ServerConfig.#ctor(System.String)">
            <summary>
            initialize new instance
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Adf.Config.ServerConfig.NewItem(System.Xml.XmlNode)">
            <summary>
            new config
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Adf.Config.ServerConfig.GetHosts">
            <summary>
            get hosts
            </summary>
            <returns>[ "host1:port1", "host2,port2", ... ]</returns>
        </member>
        <member name="T:Adf.HttpServerErrorEventArgs">
            <summary>
            Http Server error event data
            </summary>
        </member>
        <member name="M:Adf.HttpServerErrorEventArgs.#ctor(System.Exception)">
            <summary>
            initialize new instance
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Adf.HttpServerErrorEventArgs.ToString">
            <summary>
            to exception string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Adf.HttpServerErrorEventArgs.Exception">
            <summary>
            get error exception
            </summary>
        </member>
        <member name="T:Adf.SocketConnection.SocketIdentifier">
            <summary>
            socket id generator
            </summary>
        </member>
        <member name="F:Adf.SocketConnection.SocketIdentifier.Generator">
            <summary>
            generator
            </summary>
        </member>
        <member name="M:Adf.SocketConnection.SocketIdentifier.NewSessionId">
            <summary>
            new session id
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
